#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQ
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="abc")]
	public partial class AccreditationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserProgramMap(UserProgramMap instance);
    partial void UpdateUserProgramMap(UserProgramMap instance);
    partial void DeleteUserProgramMap(UserProgramMap instance);
    partial void InsertUserDepartmentMap(UserDepartmentMap instance);
    partial void UpdateUserDepartmentMap(UserDepartmentMap instance);
    partial void DeleteUserDepartmentMap(UserDepartmentMap instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertTopic(Topic instance);
    partial void UpdateTopic(Topic instance);
    partial void DeleteTopic(Topic instance);
    partial void InsertTerm(Term instance);
    partial void UpdateTerm(Term instance);
    partial void DeleteTerm(Term instance);
    partial void InsertTenured(Tenured instance);
    partial void UpdateTenured(Tenured instance);
    partial void DeleteTenured(Tenured instance);
    partial void InsertTblUserRegistration(TblUserRegistration instance);
    partial void UpdateTblUserRegistration(TblUserRegistration instance);
    partial void DeleteTblUserRegistration(TblUserRegistration instance);
    partial void InserttblUser(tblUser instance);
    partial void UpdatetblUser(tblUser instance);
    partial void DeletetblUser(tblUser instance);
    partial void InsertTblState(TblState instance);
    partial void UpdateTblState(TblState instance);
    partial void DeleteTblState(TblState instance);
    partial void InserttblRate(tblRate instance);
    partial void UpdatetblRate(tblRate instance);
    partial void DeletetblRate(tblRate instance);
    partial void InserttblPolicyRateFactor(tblPolicyRateFactor instance);
    partial void UpdatetblPolicyRateFactor(tblPolicyRateFactor instance);
    partial void DeletetblPolicyRateFactor(tblPolicyRateFactor instance);
    partial void InserttblPolicyRate(tblPolicyRate instance);
    partial void UpdatetblPolicyRate(tblPolicyRate instance);
    partial void DeletetblPolicyRate(tblPolicyRate instance);
    partial void InsertTblPasswordChange(TblPasswordChange instance);
    partial void UpdateTblPasswordChange(TblPasswordChange instance);
    partial void DeleteTblPasswordChange(TblPasswordChange instance);
    partial void InsertTblNotificationDetective(TblNotificationDetective instance);
    partial void UpdateTblNotificationDetective(TblNotificationDetective instance);
    partial void DeleteTblNotificationDetective(TblNotificationDetective instance);
    partial void InserttblModeofSalary(tblModeofSalary instance);
    partial void UpdatetblModeofSalary(tblModeofSalary instance);
    partial void DeletetblModeofSalary(tblModeofSalary instance);
    partial void InsertTblGroupCreation(TblGroupCreation instance);
    partial void UpdateTblGroupCreation(TblGroupCreation instance);
    partial void DeleteTblGroupCreation(TblGroupCreation instance);
    partial void InserttblGender(tblGender instance);
    partial void UpdatetblGender(tblGender instance);
    partial void DeletetblGender(tblGender instance);
    partial void InserttblEmployee(tblEmployee instance);
    partial void UpdatetblEmployee(tblEmployee instance);
    partial void DeletetblEmployee(tblEmployee instance);
    partial void InsertTblCounty(TblCounty instance);
    partial void UpdateTblCounty(TblCounty instance);
    partial void DeleteTblCounty(TblCounty instance);
    partial void InsertTblCountry(TblCountry instance);
    partial void UpdateTblCountry(TblCountry instance);
    partial void DeleteTblCountry(TblCountry instance);
    partial void InserttblClientGroup(tblClientGroup instance);
    partial void UpdatetblClientGroup(tblClientGroup instance);
    partial void DeletetblClientGroup(tblClientGroup instance);
    partial void InserttblCity(tblCity instance);
    partial void UpdatetblCity(tblCity instance);
    partial void DeletetblCity(tblCity instance);
    partial void InserttblBrokerageMaster(tblBrokerageMaster instance);
    partial void UpdatetblBrokerageMaster(tblBrokerageMaster instance);
    partial void DeletetblBrokerageMaster(tblBrokerageMaster instance);
    partial void InserttblBenefitPlan(tblBenefitPlan instance);
    partial void UpdatetblBenefitPlan(tblBenefitPlan instance);
    partial void DeletetblBenefitPlan(tblBenefitPlan instance);
    partial void InserttblAgencyRole(tblAgencyRole instance);
    partial void UpdatetblAgencyRole(tblAgencyRole instance);
    partial void DeletetblAgencyRole(tblAgencyRole instance);
    partial void InsertStudentSupervised(StudentSupervised instance);
    partial void UpdateStudentSupervised(StudentSupervised instance);
    partial void DeleteStudentSupervised(StudentSupervised instance);
    partial void InsertSectionInstructorScheduleTime(SectionInstructorScheduleTime instance);
    partial void UpdateSectionInstructorScheduleTime(SectionInstructorScheduleTime instance);
    partial void DeleteSectionInstructorScheduleTime(SectionInstructorScheduleTime instance);
    partial void InsertSectionInstructorMap(SectionInstructorMap instance);
    partial void UpdateSectionInstructorMap(SectionInstructorMap instance);
    partial void DeleteSectionInstructorMap(SectionInstructorMap instance);
    partial void InsertSection(Section instance);
    partial void UpdateSection(Section instance);
    partial void DeleteSection(Section instance);
    partial void InsertScholarshipPublication(ScholarshipPublication instance);
    partial void UpdateScholarshipPublication(ScholarshipPublication instance);
    partial void DeleteScholarshipPublication(ScholarshipPublication instance);
    partial void InsertScenarioCourseprogramRequirementMap(ScenarioCourseprogramRequirementMap instance);
    partial void UpdateScenarioCourseprogramRequirementMap(ScenarioCourseprogramRequirementMap instance);
    partial void DeleteScenarioCourseprogramRequirementMap(ScenarioCourseprogramRequirementMap instance);
    partial void InsertScenarioCourseProgram(ScenarioCourseProgram instance);
    partial void UpdateScenarioCourseProgram(ScenarioCourseProgram instance);
    partial void DeleteScenarioCourseProgram(ScenarioCourseProgram instance);
    partial void InsertSabbaticalLeave(SabbaticalLeave instance);
    partial void UpdateSabbaticalLeave(SabbaticalLeave instance);
    partial void DeleteSabbaticalLeave(SabbaticalLeave instance);
    partial void InsertRuleMap(RuleMap instance);
    partial void UpdateRuleMap(RuleMap instance);
    partial void DeleteRuleMap(RuleMap instance);
    partial void InsertRule(Rule instance);
    partial void UpdateRule(Rule instance);
    partial void DeleteRule(Rule instance);
    partial void InsertRank(Rank instance);
    partial void UpdateRank(Rank instance);
    partial void DeleteRank(Rank instance);
    partial void InsertProgramRequirementMap(ProgramRequirementMap instance);
    partial void UpdateProgramRequirementMap(ProgramRequirementMap instance);
    partial void DeleteProgramRequirementMap(ProgramRequirementMap instance);
    partial void InsertProgramRequirement(ProgramRequirement instance);
    partial void UpdateProgramRequirement(ProgramRequirement instance);
    partial void DeleteProgramRequirement(ProgramRequirement instance);
    partial void InsertProgramOption(ProgramOption instance);
    partial void UpdateProgramOption(ProgramOption instance);
    partial void DeleteProgramOption(ProgramOption instance);
    partial void InsertProgramAdditionalInfo(ProgramAdditionalInfo instance);
    partial void UpdateProgramAdditionalInfo(ProgramAdditionalInfo instance);
    partial void DeleteProgramAdditionalInfo(ProgramAdditionalInfo instance);
    partial void InsertProgram(Program instance);
    partial void UpdateProgram(Program instance);
    partial void DeleteProgram(Program instance);
    partial void InsertPrerequisite(Prerequisite instance);
    partial void UpdatePrerequisite(Prerequisite instance);
    partial void DeletePrerequisite(Prerequisite instance);
    partial void InsertPDFfile(PDFfile instance);
    partial void UpdatePDFfile(PDFfile instance);
    partial void DeletePDFfile(PDFfile instance);
    partial void InsertParameter(Parameter instance);
    partial void UpdateParameter(Parameter instance);
    partial void DeleteParameter(Parameter instance);
    partial void InsertMaterialUpload(MaterialUpload instance);
    partial void UpdateMaterialUpload(MaterialUpload instance);
    partial void DeleteMaterialUpload(MaterialUpload instance);
    partial void InsertInstructorCourseRelation(InstructorCourseRelation instance);
    partial void UpdateInstructorCourseRelation(InstructorCourseRelation instance);
    partial void DeleteInstructorCourseRelation(InstructorCourseRelation instance);
    partial void InsertImagesPath(ImagesPath instance);
    partial void UpdateImagesPath(ImagesPath instance);
    partial void DeleteImagesPath(ImagesPath instance);
    partial void InsertFunding(Funding instance);
    partial void UpdateFunding(Funding instance);
    partial void DeleteFunding(Funding instance);
    partial void InsertFaculty(Faculty instance);
    partial void UpdateFaculty(Faculty instance);
    partial void DeleteFaculty(Faculty instance);
    partial void InsertExternalGroupMap(ExternalGroupMap instance);
    partial void UpdateExternalGroupMap(ExternalGroupMap instance);
    partial void DeleteExternalGroupMap(ExternalGroupMap instance);
    partial void InsertExpenditureType(ExpenditureType instance);
    partial void UpdateExpenditureType(ExpenditureType instance);
    partial void DeleteExpenditureType(ExpenditureType instance);
    partial void InsertExpenditure(Expenditure instance);
    partial void UpdateExpenditure(Expenditure instance);
    partial void DeleteExpenditure(Expenditure instance);
    partial void InsertExamType(ExamType instance);
    partial void UpdateExamType(ExamType instance);
    partial void DeleteExamType(ExamType instance);
    partial void InsertExamArchive(ExamArchive instance);
    partial void UpdateExamArchive(ExamArchive instance);
    partial void DeleteExamArchive(ExamArchive instance);
    partial void InsertEvidenceType(EvidenceType instance);
    partial void UpdateEvidenceType(EvidenceType instance);
    partial void DeleteEvidenceType(EvidenceType instance);
    partial void InsertErrorLog(ErrorLog instance);
    partial void UpdateErrorLog(ErrorLog instance);
    partial void DeleteErrorLog(ErrorLog instance);
    partial void InsertDepartment(Department instance);
    partial void UpdateDepartment(Department instance);
    partial void DeleteDepartment(Department instance);
    partial void InsertDegree(Degree instance);
    partial void UpdateDegree(Degree instance);
    partial void DeleteDegree(Degree instance);
    partial void InsertCurrentProfessional(CurrentProfessional instance);
    partial void UpdateCurrentProfessional(CurrentProfessional instance);
    partial void DeleteCurrentProfessional(CurrentProfessional instance);
    partial void InsertCurrentMembership(CurrentMembership instance);
    partial void UpdateCurrentMembership(CurrentMembership instance);
    partial void DeleteCurrentMembership(CurrentMembership instance);
    partial void InsertCoursesTaught(CoursesTaught instance);
    partial void UpdateCoursesTaught(CoursesTaught instance);
    partial void DeleteCoursesTaught(CoursesTaught instance);
    partial void InsertCourseProgramRequirementMap(CourseProgramRequirementMap instance);
    partial void UpdateCourseProgramRequirementMap(CourseProgramRequirementMap instance);
    partial void DeleteCourseProgramRequirementMap(CourseProgramRequirementMap instance);
    partial void InsertCoursePrerequisiteMap(CoursePrerequisiteMap instance);
    partial void UpdateCoursePrerequisiteMap(CoursePrerequisiteMap instance);
    partial void DeleteCoursePrerequisiteMap(CoursePrerequisiteMap instance);
    partial void InsertCourseCategoryMap(CourseCategoryMap instance);
    partial void UpdateCourseCategoryMap(CourseCategoryMap instance);
    partial void DeleteCourseCategoryMap(CourseCategoryMap instance);
    partial void InsertCourseAbbreviation(CourseAbbreviation instance);
    partial void UpdateCourseAbbreviation(CourseAbbreviation instance);
    partial void DeleteCourseAbbreviation(CourseAbbreviation instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertControl(Control instance);
    partial void UpdateControl(Control instance);
    partial void DeleteControl(Control instance);
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertCalender(Calender instance);
    partial void UpdateCalender(Calender instance);
    partial void DeleteCalender(Calender instance);
    partial void InsertBook(Book instance);
    partial void UpdateBook(Book instance);
    partial void DeleteBook(Book instance);
    partial void InsertAuditValue(AuditValue instance);
    partial void UpdateAuditValue(AuditValue instance);
    partial void DeleteAuditValue(AuditValue instance);
    partial void InsertAudit(Audit instance);
    partial void UpdateAudit(Audit instance);
    partial void DeleteAudit(Audit instance);
    partial void Insertaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Updateaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Deleteaspnet_WebEvent_Event(aspnet_WebEvent_Event instance);
    partial void Insertaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Updateaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Deleteaspnet_UsersInRole(aspnet_UsersInRole instance);
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void Insertaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Updateaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Deleteaspnet_SchemaVersion(aspnet_SchemaVersion instance);
    partial void Insertaspnet_Role(aspnet_Role instance);
    partial void Updateaspnet_Role(aspnet_Role instance);
    partial void Deleteaspnet_Role(aspnet_Role instance);
    partial void Insertaspnet_Profile(aspnet_Profile instance);
    partial void Updateaspnet_Profile(aspnet_Profile instance);
    partial void Deleteaspnet_Profile(aspnet_Profile instance);
    partial void Insertaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Updateaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Deleteaspnet_PersonalizationPerUser(aspnet_PersonalizationPerUser instance);
    partial void Insertaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Updateaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Deleteaspnet_PersonalizationAllUser(aspnet_PersonalizationAllUser instance);
    partial void Insertaspnet_Path(aspnet_Path instance);
    partial void Updateaspnet_Path(aspnet_Path instance);
    partial void Deleteaspnet_Path(aspnet_Path instance);
    partial void Insertaspnet_Membership(aspnet_Membership instance);
    partial void Updateaspnet_Membership(aspnet_Membership instance);
    partial void Deleteaspnet_Membership(aspnet_Membership instance);
    partial void Insertaspnet_Application(aspnet_Application instance);
    partial void Updateaspnet_Application(aspnet_Application instance);
    partial void Deleteaspnet_Application(aspnet_Application instance);
    partial void InsertAdvancementRank(AdvancementRank instance);
    partial void UpdateAdvancementRank(AdvancementRank instance);
    partial void DeleteAdvancementRank(AdvancementRank instance);
    partial void InsertAccess(Access instance);
    partial void UpdateAccess(Access instance);
    partial void DeleteAccess(Access instance);
    partial void InserttblDentalPlan(tblDentalPlan instance);
    partial void UpdatetblDentalPlan(tblDentalPlan instance);
    partial void DeletetblDentalPlan(tblDentalPlan instance);
    partial void InserttblDentalPlanRate(tblDentalPlanRate instance);
    partial void UpdatetblDentalPlanRate(tblDentalPlanRate instance);
    partial void DeletetblDentalPlanRate(tblDentalPlanRate instance);
    partial void InserttblVisionPlan(tblVisionPlan instance);
    partial void UpdatetblVisionPlan(tblVisionPlan instance);
    partial void DeletetblVisionPlan(tblVisionPlan instance);
    partial void InserttblVisionPlanRate(tblVisionPlanRate instance);
    partial void UpdatetblVisionPlanRate(tblVisionPlanRate instance);
    partial void DeletetblVisionPlanRate(tblVisionPlanRate instance);
    partial void Inserttest1(test1 instance);
    partial void Updatetest1(test1 instance);
    partial void Deletetest1(test1 instance);
    partial void InsertTblSubpoenaFrm(TblSubpoenaFrm instance);
    partial void UpdateTblSubpoenaFrm(TblSubpoenaFrm instance);
    partial void DeleteTblSubpoenaFrm(TblSubpoenaFrm instance);
    #endregion
		
		public AccreditationDataContext() : 
				base(global::LINQ.Properties.Settings.Default.abcConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public AccreditationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccreditationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccreditationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AccreditationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserProgramMap> UserProgramMaps
		{
			get
			{
				return this.GetTable<UserProgramMap>();
			}
		}
		
		public System.Data.Linq.Table<UserDepartmentMap> UserDepartmentMaps
		{
			get
			{
				return this.GetTable<UserDepartmentMap>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Topic> Topics
		{
			get
			{
				return this.GetTable<Topic>();
			}
		}
		
		public System.Data.Linq.Table<Term> Terms
		{
			get
			{
				return this.GetTable<Term>();
			}
		}
		
		public System.Data.Linq.Table<Tenured> Tenureds
		{
			get
			{
				return this.GetTable<Tenured>();
			}
		}
		
		public System.Data.Linq.Table<tblUserType> tblUserTypes
		{
			get
			{
				return this.GetTable<tblUserType>();
			}
		}
		
		public System.Data.Linq.Table<TblUserRegistration> TblUserRegistrations
		{
			get
			{
				return this.GetTable<TblUserRegistration>();
			}
		}
		
		public System.Data.Linq.Table<tblUser> tblUsers
		{
			get
			{
				return this.GetTable<tblUser>();
			}
		}
		
		public System.Data.Linq.Table<TblState> TblStates
		{
			get
			{
				return this.GetTable<TblState>();
			}
		}
		
		public System.Data.Linq.Table<tblRate> tblRates
		{
			get
			{
				return this.GetTable<tblRate>();
			}
		}
		
		public System.Data.Linq.Table<tblPolicyRateFactor> tblPolicyRateFactors
		{
			get
			{
				return this.GetTable<tblPolicyRateFactor>();
			}
		}
		
		public System.Data.Linq.Table<tblPolicyRate> tblPolicyRates
		{
			get
			{
				return this.GetTable<tblPolicyRate>();
			}
		}
		
		public System.Data.Linq.Table<TblPasswordChange> TblPasswordChanges
		{
			get
			{
				return this.GetTable<TblPasswordChange>();
			}
		}
		
		public System.Data.Linq.Table<TblNotificationDetective> TblNotificationDetectives
		{
			get
			{
				return this.GetTable<TblNotificationDetective>();
			}
		}
		
		public System.Data.Linq.Table<tblModeofSalary> tblModeofSalaries
		{
			get
			{
				return this.GetTable<tblModeofSalary>();
			}
		}
		
		public System.Data.Linq.Table<TblGroupCreation> TblGroupCreations
		{
			get
			{
				return this.GetTable<TblGroupCreation>();
			}
		}
		
		public System.Data.Linq.Table<tblGender> tblGenders
		{
			get
			{
				return this.GetTable<tblGender>();
			}
		}
		
		public System.Data.Linq.Table<tblEmployee> tblEmployees
		{
			get
			{
				return this.GetTable<tblEmployee>();
			}
		}
		
		public System.Data.Linq.Table<TblCounty> TblCounties
		{
			get
			{
				return this.GetTable<TblCounty>();
			}
		}
		
		public System.Data.Linq.Table<TblCountry> TblCountries
		{
			get
			{
				return this.GetTable<TblCountry>();
			}
		}
		
		public System.Data.Linq.Table<tblClientGroup> tblClientGroups
		{
			get
			{
				return this.GetTable<tblClientGroup>();
			}
		}
		
		public System.Data.Linq.Table<tblCity> tblCities
		{
			get
			{
				return this.GetTable<tblCity>();
			}
		}
		
		public System.Data.Linq.Table<tblBrokerageMaster> tblBrokerageMasters
		{
			get
			{
				return this.GetTable<tblBrokerageMaster>();
			}
		}
		
		public System.Data.Linq.Table<tblBenefitPlan> tblBenefitPlans
		{
			get
			{
				return this.GetTable<tblBenefitPlan>();
			}
		}
		
		public System.Data.Linq.Table<tblAgencyRole> tblAgencyRoles
		{
			get
			{
				return this.GetTable<tblAgencyRole>();
			}
		}
		
		public System.Data.Linq.Table<StudentSupervised> StudentSuperviseds
		{
			get
			{
				return this.GetTable<StudentSupervised>();
			}
		}
		
		public System.Data.Linq.Table<SectionInstructorScheduleTime> SectionInstructorScheduleTimes
		{
			get
			{
				return this.GetTable<SectionInstructorScheduleTime>();
			}
		}
		
		public System.Data.Linq.Table<SectionInstructorMap> SectionInstructorMaps
		{
			get
			{
				return this.GetTable<SectionInstructorMap>();
			}
		}
		
		public System.Data.Linq.Table<Section> Sections
		{
			get
			{
				return this.GetTable<Section>();
			}
		}
		
		public System.Data.Linq.Table<ScholarshipPublication> ScholarshipPublications
		{
			get
			{
				return this.GetTable<ScholarshipPublication>();
			}
		}
		
		public System.Data.Linq.Table<ScenarioCourseprogramRequirementMap> ScenarioCourseprogramRequirementMaps
		{
			get
			{
				return this.GetTable<ScenarioCourseprogramRequirementMap>();
			}
		}
		
		public System.Data.Linq.Table<ScenarioCourseProgram> ScenarioCoursePrograms
		{
			get
			{
				return this.GetTable<ScenarioCourseProgram>();
			}
		}
		
		public System.Data.Linq.Table<SabbaticalLeave> SabbaticalLeaves
		{
			get
			{
				return this.GetTable<SabbaticalLeave>();
			}
		}
		
		public System.Data.Linq.Table<RuleMap> RuleMaps
		{
			get
			{
				return this.GetTable<RuleMap>();
			}
		}
		
		public System.Data.Linq.Table<Rule> Rules
		{
			get
			{
				return this.GetTable<Rule>();
			}
		}
		
		public System.Data.Linq.Table<Rank> Ranks
		{
			get
			{
				return this.GetTable<Rank>();
			}
		}
		
		public System.Data.Linq.Table<ProgramRequirementMap> ProgramRequirementMaps
		{
			get
			{
				return this.GetTable<ProgramRequirementMap>();
			}
		}
		
		public System.Data.Linq.Table<ProgramRequirement> ProgramRequirements
		{
			get
			{
				return this.GetTable<ProgramRequirement>();
			}
		}
		
		public System.Data.Linq.Table<ProgramOption> ProgramOptions
		{
			get
			{
				return this.GetTable<ProgramOption>();
			}
		}
		
		public System.Data.Linq.Table<ProgramAdditionalInfo> ProgramAdditionalInfos
		{
			get
			{
				return this.GetTable<ProgramAdditionalInfo>();
			}
		}
		
		public System.Data.Linq.Table<Program> Programs
		{
			get
			{
				return this.GetTable<Program>();
			}
		}
		
		public System.Data.Linq.Table<Prerequisite> Prerequisites
		{
			get
			{
				return this.GetTable<Prerequisite>();
			}
		}
		
		public System.Data.Linq.Table<PDFfile> PDFfiles
		{
			get
			{
				return this.GetTable<PDFfile>();
			}
		}
		
		public System.Data.Linq.Table<Parameter> Parameters
		{
			get
			{
				return this.GetTable<Parameter>();
			}
		}
		
		public System.Data.Linq.Table<MaterialUpload> MaterialUploads
		{
			get
			{
				return this.GetTable<MaterialUpload>();
			}
		}
		
		public System.Data.Linq.Table<InstructorCourseRelation> InstructorCourseRelations
		{
			get
			{
				return this.GetTable<InstructorCourseRelation>();
			}
		}
		
		public System.Data.Linq.Table<ImagesPath> ImagesPaths
		{
			get
			{
				return this.GetTable<ImagesPath>();
			}
		}
		
		public System.Data.Linq.Table<Funding> Fundings
		{
			get
			{
				return this.GetTable<Funding>();
			}
		}
		
		public System.Data.Linq.Table<Faculty> Faculties
		{
			get
			{
				return this.GetTable<Faculty>();
			}
		}
		
		public System.Data.Linq.Table<ExternalGroupMap> ExternalGroupMaps
		{
			get
			{
				return this.GetTable<ExternalGroupMap>();
			}
		}
		
		public System.Data.Linq.Table<ExpenditureType> ExpenditureTypes
		{
			get
			{
				return this.GetTable<ExpenditureType>();
			}
		}
		
		public System.Data.Linq.Table<Expenditure> Expenditures
		{
			get
			{
				return this.GetTable<Expenditure>();
			}
		}
		
		public System.Data.Linq.Table<ExamType> ExamTypes
		{
			get
			{
				return this.GetTable<ExamType>();
			}
		}
		
		public System.Data.Linq.Table<ExamArchive> ExamArchives
		{
			get
			{
				return this.GetTable<ExamArchive>();
			}
		}
		
		public System.Data.Linq.Table<EvidenceType> EvidenceTypes
		{
			get
			{
				return this.GetTable<EvidenceType>();
			}
		}
		
		public System.Data.Linq.Table<ErrorLog> ErrorLogs
		{
			get
			{
				return this.GetTable<ErrorLog>();
			}
		}
		
		public System.Data.Linq.Table<Department> Departments
		{
			get
			{
				return this.GetTable<Department>();
			}
		}
		
		public System.Data.Linq.Table<Degree> Degrees
		{
			get
			{
				return this.GetTable<Degree>();
			}
		}
		
		public System.Data.Linq.Table<CurrentProfessional> CurrentProfessionals
		{
			get
			{
				return this.GetTable<CurrentProfessional>();
			}
		}
		
		public System.Data.Linq.Table<CurrentMembership> CurrentMemberships
		{
			get
			{
				return this.GetTable<CurrentMembership>();
			}
		}
		
		public System.Data.Linq.Table<CoursesTaught> CoursesTaughts
		{
			get
			{
				return this.GetTable<CoursesTaught>();
			}
		}
		
		public System.Data.Linq.Table<CourseProgramRequirementMap> CourseProgramRequirementMaps
		{
			get
			{
				return this.GetTable<CourseProgramRequirementMap>();
			}
		}
		
		public System.Data.Linq.Table<CoursePrerequisiteMap> CoursePrerequisiteMaps
		{
			get
			{
				return this.GetTable<CoursePrerequisiteMap>();
			}
		}
		
		public System.Data.Linq.Table<CourseCategoryMap> CourseCategoryMaps
		{
			get
			{
				return this.GetTable<CourseCategoryMap>();
			}
		}
		
		public System.Data.Linq.Table<CourseAbbreviation> CourseAbbreviations
		{
			get
			{
				return this.GetTable<CourseAbbreviation>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Control> Controls
		{
			get
			{
				return this.GetTable<Control>();
			}
		}
		
		public System.Data.Linq.Table<Category> Categories
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<Calender> Calenders
		{
			get
			{
				return this.GetTable<Calender>();
			}
		}
		
		public System.Data.Linq.Table<Book> Books
		{
			get
			{
				return this.GetTable<Book>();
			}
		}
		
		public System.Data.Linq.Table<AuditValue> AuditValues
		{
			get
			{
				return this.GetTable<AuditValue>();
			}
		}
		
		public System.Data.Linq.Table<Audit> Audits
		{
			get
			{
				return this.GetTable<Audit>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_WebEvent_Event> aspnet_WebEvent_Events
		{
			get
			{
				return this.GetTable<aspnet_WebEvent_Event>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this.GetTable<aspnet_UsersInRole>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_SchemaVersion> aspnet_SchemaVersions
		{
			get
			{
				return this.GetTable<aspnet_SchemaVersion>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this.GetTable<aspnet_Role>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Profile> aspnet_Profiles
		{
			get
			{
				return this.GetTable<aspnet_Profile>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this.GetTable<aspnet_PersonalizationPerUser>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_PersonalizationAllUser> aspnet_PersonalizationAllUsers
		{
			get
			{
				return this.GetTable<aspnet_PersonalizationAllUser>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Path> aspnet_Paths
		{
			get
			{
				return this.GetTable<aspnet_Path>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this.GetTable<aspnet_Membership>();
			}
		}
		
		public System.Data.Linq.Table<aspnet_Application> aspnet_Applications
		{
			get
			{
				return this.GetTable<aspnet_Application>();
			}
		}
		
		public System.Data.Linq.Table<AdvancementRank> AdvancementRanks
		{
			get
			{
				return this.GetTable<AdvancementRank>();
			}
		}
		
		public System.Data.Linq.Table<AddOccasion> AddOccasions
		{
			get
			{
				return this.GetTable<AddOccasion>();
			}
		}
		
		public System.Data.Linq.Table<Access> Accesses
		{
			get
			{
				return this.GetTable<Access>();
			}
		}
		
		public System.Data.Linq.Table<tblDentalPlan> tblDentalPlans
		{
			get
			{
				return this.GetTable<tblDentalPlan>();
			}
		}
		
		public System.Data.Linq.Table<tblDentalPlanRate> tblDentalPlanRates
		{
			get
			{
				return this.GetTable<tblDentalPlanRate>();
			}
		}
		
		public System.Data.Linq.Table<tblVisionPlan> tblVisionPlans
		{
			get
			{
				return this.GetTable<tblVisionPlan>();
			}
		}
		
		public System.Data.Linq.Table<tblVisionPlanRate> tblVisionPlanRates
		{
			get
			{
				return this.GetTable<tblVisionPlanRate>();
			}
		}
		
		public System.Data.Linq.Table<test1> test1s
		{
			get
			{
				return this.GetTable<test1>();
			}
		}
		
		public System.Data.Linq.Table<TblSubpoenaFrm> TblSubpoenaFrms
		{
			get
			{
				return this.GetTable<TblSubpoenaFrm>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserProgramMap")]
	public partial class UserProgramMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _ProgramId;
		
		private EntityRef<User> _User;
		
		private EntityRef<Program> _Program;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnProgramIdChanging(int value);
    partial void OnProgramIdChanged();
    #endregion
		
		public UserProgramMap()
		{
			this._User = default(EntityRef<User>);
			this._Program = default(EntityRef<Program>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProgramId
		{
			get
			{
				return this._ProgramId;
			}
			set
			{
				if ((this._ProgramId != value))
				{
					if (this._Program.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramId = value;
					this.SendPropertyChanged("ProgramId");
					this.OnProgramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProgramMap", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserProgramMaps.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserProgramMaps.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_UserProgramMap", Storage="_Program", ThisKey="ProgramId", OtherKey="ProgramId", IsForeignKey=true)]
		public Program Program
		{
			get
			{
				return this._Program.Entity;
			}
			set
			{
				Program previousValue = this._Program.Entity;
				if (((previousValue != value) 
							|| (this._Program.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Program.Entity = null;
						previousValue.UserProgramMaps.Remove(this);
					}
					this._Program.Entity = value;
					if ((value != null))
					{
						value.UserProgramMaps.Add(this);
						this._ProgramId = value.ProgramId;
					}
					else
					{
						this._ProgramId = default(int);
					}
					this.SendPropertyChanged("Program");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserDepartmentMap")]
	public partial class UserDepartmentMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _DepartmentId;
		
		private EntityRef<User> _User;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    #endregion
		
		public UserDepartmentMap()
		{
			this._User = default(EntityRef<User>);
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserDepartmentMap", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserDepartmentMaps.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserDepartmentMaps.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_UserDepartmentMap", Storage="_Department", ThisKey="DepartmentId", OtherKey="DepartmentId", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.UserDepartmentMaps.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.UserDepartmentMaps.Add(this);
						this._DepartmentId = value.DepartmentId;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserName;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.DateTime _ActiveFrom;
		
		private System.DateTime _ActiveTo;
		
		private string _CvLink;
		
		private string _Status;
		
		private System.Nullable<System.DateTime> _CVUploadDate;
		
		private string _Briefdescinfo;
		
		private string _IndustrialExp;
		
		private string _HonoursAwardsinfo;
		
		private string _Group;
		
		private EntitySet<UserProgramMap> _UserProgramMaps;
		
		private EntitySet<UserDepartmentMap> _UserDepartmentMaps;
		
		private EntitySet<Tenured> _Tenureds;
		
		private EntitySet<StudentSupervised> _StudentSuperviseds;
		
		private EntitySet<SectionInstructorMap> _SectionInstructorMaps;
		
		private EntitySet<ScholarshipPublication> _ScholarshipPublications;
		
		private EntitySet<SabbaticalLeave> _SabbaticalLeaves;
		
		private EntitySet<MaterialUpload> _MaterialUploads;
		
		private EntitySet<InstructorCourseRelation> _InstructorCourseRelations;
		
		private EntitySet<Funding> _Fundings;
		
		private EntitySet<ErrorLog> _ErrorLogs;
		
		private EntitySet<Degree> _Degrees;
		
		private EntitySet<CurrentProfessional> _CurrentProfessionals;
		
		private EntitySet<CurrentMembership> _CurrentMemberships;
		
		private EntitySet<CoursesTaught> _CoursesTaughts;
		
		private EntitySet<Audit> _Audits;
		
		private EntitySet<AdvancementRank> _AdvancementRanks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnActiveFromChanging(System.DateTime value);
    partial void OnActiveFromChanged();
    partial void OnActiveToChanging(System.DateTime value);
    partial void OnActiveToChanged();
    partial void OnCvLinkChanging(string value);
    partial void OnCvLinkChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCVUploadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCVUploadDateChanged();
    partial void OnBriefdescinfoChanging(string value);
    partial void OnBriefdescinfoChanged();
    partial void OnIndustrialExpChanging(string value);
    partial void OnIndustrialExpChanged();
    partial void OnHonoursAwardsinfoChanging(string value);
    partial void OnHonoursAwardsinfoChanged();
    partial void OnGroupChanging(string value);
    partial void OnGroupChanged();
    #endregion
		
		public User()
		{
			this._UserProgramMaps = new EntitySet<UserProgramMap>(new Action<UserProgramMap>(this.attach_UserProgramMaps), new Action<UserProgramMap>(this.detach_UserProgramMaps));
			this._UserDepartmentMaps = new EntitySet<UserDepartmentMap>(new Action<UserDepartmentMap>(this.attach_UserDepartmentMaps), new Action<UserDepartmentMap>(this.detach_UserDepartmentMaps));
			this._Tenureds = new EntitySet<Tenured>(new Action<Tenured>(this.attach_Tenureds), new Action<Tenured>(this.detach_Tenureds));
			this._StudentSuperviseds = new EntitySet<StudentSupervised>(new Action<StudentSupervised>(this.attach_StudentSuperviseds), new Action<StudentSupervised>(this.detach_StudentSuperviseds));
			this._SectionInstructorMaps = new EntitySet<SectionInstructorMap>(new Action<SectionInstructorMap>(this.attach_SectionInstructorMaps), new Action<SectionInstructorMap>(this.detach_SectionInstructorMaps));
			this._ScholarshipPublications = new EntitySet<ScholarshipPublication>(new Action<ScholarshipPublication>(this.attach_ScholarshipPublications), new Action<ScholarshipPublication>(this.detach_ScholarshipPublications));
			this._SabbaticalLeaves = new EntitySet<SabbaticalLeave>(new Action<SabbaticalLeave>(this.attach_SabbaticalLeaves), new Action<SabbaticalLeave>(this.detach_SabbaticalLeaves));
			this._MaterialUploads = new EntitySet<MaterialUpload>(new Action<MaterialUpload>(this.attach_MaterialUploads), new Action<MaterialUpload>(this.detach_MaterialUploads));
			this._InstructorCourseRelations = new EntitySet<InstructorCourseRelation>(new Action<InstructorCourseRelation>(this.attach_InstructorCourseRelations), new Action<InstructorCourseRelation>(this.detach_InstructorCourseRelations));
			this._Fundings = new EntitySet<Funding>(new Action<Funding>(this.attach_Fundings), new Action<Funding>(this.detach_Fundings));
			this._ErrorLogs = new EntitySet<ErrorLog>(new Action<ErrorLog>(this.attach_ErrorLogs), new Action<ErrorLog>(this.detach_ErrorLogs));
			this._Degrees = new EntitySet<Degree>(new Action<Degree>(this.attach_Degrees), new Action<Degree>(this.detach_Degrees));
			this._CurrentProfessionals = new EntitySet<CurrentProfessional>(new Action<CurrentProfessional>(this.attach_CurrentProfessionals), new Action<CurrentProfessional>(this.detach_CurrentProfessionals));
			this._CurrentMemberships = new EntitySet<CurrentMembership>(new Action<CurrentMembership>(this.attach_CurrentMemberships), new Action<CurrentMembership>(this.detach_CurrentMemberships));
			this._CoursesTaughts = new EntitySet<CoursesTaught>(new Action<CoursesTaught>(this.attach_CoursesTaughts), new Action<CoursesTaught>(this.detach_CoursesTaughts));
			this._Audits = new EntitySet<Audit>(new Action<Audit>(this.attach_Audits), new Action<Audit>(this.detach_Audits));
			this._AdvancementRanks = new EntitySet<AdvancementRank>(new Action<AdvancementRank>(this.attach_AdvancementRanks), new Action<AdvancementRank>(this.detach_AdvancementRanks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveFrom", DbType="DateTime NOT NULL")]
		public System.DateTime ActiveFrom
		{
			get
			{
				return this._ActiveFrom;
			}
			set
			{
				if ((this._ActiveFrom != value))
				{
					this.OnActiveFromChanging(value);
					this.SendPropertyChanging();
					this._ActiveFrom = value;
					this.SendPropertyChanged("ActiveFrom");
					this.OnActiveFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActiveTo", DbType="DateTime NOT NULL")]
		public System.DateTime ActiveTo
		{
			get
			{
				return this._ActiveTo;
			}
			set
			{
				if ((this._ActiveTo != value))
				{
					this.OnActiveToChanging(value);
					this.SendPropertyChanging();
					this._ActiveTo = value;
					this.SendPropertyChanged("ActiveTo");
					this.OnActiveToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CvLink", DbType="NVarChar(500)")]
		public string CvLink
		{
			get
			{
				return this._CvLink;
			}
			set
			{
				if ((this._CvLink != value))
				{
					this.OnCvLinkChanging(value);
					this.SendPropertyChanging();
					this._CvLink = value;
					this.SendPropertyChanged("CvLink");
					this.OnCvLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CVUploadDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CVUploadDate
		{
			get
			{
				return this._CVUploadDate;
			}
			set
			{
				if ((this._CVUploadDate != value))
				{
					this.OnCVUploadDateChanging(value);
					this.SendPropertyChanging();
					this._CVUploadDate = value;
					this.SendPropertyChanged("CVUploadDate");
					this.OnCVUploadDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Briefdescinfo", DbType="NVarChar(500)")]
		public string Briefdescinfo
		{
			get
			{
				return this._Briefdescinfo;
			}
			set
			{
				if ((this._Briefdescinfo != value))
				{
					this.OnBriefdescinfoChanging(value);
					this.SendPropertyChanging();
					this._Briefdescinfo = value;
					this.SendPropertyChanged("Briefdescinfo");
					this.OnBriefdescinfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndustrialExp", DbType="NVarChar(500)")]
		public string IndustrialExp
		{
			get
			{
				return this._IndustrialExp;
			}
			set
			{
				if ((this._IndustrialExp != value))
				{
					this.OnIndustrialExpChanging(value);
					this.SendPropertyChanging();
					this._IndustrialExp = value;
					this.SendPropertyChanged("IndustrialExp");
					this.OnIndustrialExpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HonoursAwardsinfo", DbType="NVarChar(500)")]
		public string HonoursAwardsinfo
		{
			get
			{
				return this._HonoursAwardsinfo;
			}
			set
			{
				if ((this._HonoursAwardsinfo != value))
				{
					this.OnHonoursAwardsinfoChanging(value);
					this.SendPropertyChanging();
					this._HonoursAwardsinfo = value;
					this.SendPropertyChanged("HonoursAwardsinfo");
					this.OnHonoursAwardsinfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group", DbType="NVarChar(50)")]
		public string Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserProgramMap", Storage="_UserProgramMaps", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserProgramMap> UserProgramMaps
		{
			get
			{
				return this._UserProgramMaps;
			}
			set
			{
				this._UserProgramMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserDepartmentMap", Storage="_UserDepartmentMaps", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<UserDepartmentMap> UserDepartmentMaps
		{
			get
			{
				return this._UserDepartmentMaps;
			}
			set
			{
				this._UserDepartmentMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Tenured", Storage="_Tenureds", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Tenured> Tenureds
		{
			get
			{
				return this._Tenureds;
			}
			set
			{
				this._Tenureds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudentSupervised", Storage="_StudentSuperviseds", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<StudentSupervised> StudentSuperviseds
		{
			get
			{
				return this._StudentSuperviseds;
			}
			set
			{
				this._StudentSuperviseds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SectionInstructorMap", Storage="_SectionInstructorMaps", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<SectionInstructorMap> SectionInstructorMaps
		{
			get
			{
				return this._SectionInstructorMaps;
			}
			set
			{
				this._SectionInstructorMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ScholarshipPublication", Storage="_ScholarshipPublications", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<ScholarshipPublication> ScholarshipPublications
		{
			get
			{
				return this._ScholarshipPublications;
			}
			set
			{
				this._ScholarshipPublications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SabbaticalLeave", Storage="_SabbaticalLeaves", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<SabbaticalLeave> SabbaticalLeaves
		{
			get
			{
				return this._SabbaticalLeaves;
			}
			set
			{
				this._SabbaticalLeaves.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MaterialUpload", Storage="_MaterialUploads", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<MaterialUpload> MaterialUploads
		{
			get
			{
				return this._MaterialUploads;
			}
			set
			{
				this._MaterialUploads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_InstructorCourseRelation", Storage="_InstructorCourseRelations", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<InstructorCourseRelation> InstructorCourseRelations
		{
			get
			{
				return this._InstructorCourseRelations;
			}
			set
			{
				this._InstructorCourseRelations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Funding", Storage="_Fundings", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Funding> Fundings
		{
			get
			{
				return this._Fundings;
			}
			set
			{
				this._Fundings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ErrorLog", Storage="_ErrorLogs", ThisKey="UserId", OtherKey="UserID")]
		public EntitySet<ErrorLog> ErrorLogs
		{
			get
			{
				return this._ErrorLogs;
			}
			set
			{
				this._ErrorLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Degree", Storage="_Degrees", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Degree> Degrees
		{
			get
			{
				return this._Degrees;
			}
			set
			{
				this._Degrees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CurrentProfessional", Storage="_CurrentProfessionals", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<CurrentProfessional> CurrentProfessionals
		{
			get
			{
				return this._CurrentProfessionals;
			}
			set
			{
				this._CurrentProfessionals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CurrentMembership", Storage="_CurrentMemberships", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<CurrentMembership> CurrentMemberships
		{
			get
			{
				return this._CurrentMemberships;
			}
			set
			{
				this._CurrentMemberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CoursesTaught", Storage="_CoursesTaughts", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<CoursesTaught> CoursesTaughts
		{
			get
			{
				return this._CoursesTaughts;
			}
			set
			{
				this._CoursesTaughts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Audit", Storage="_Audits", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<Audit> Audits
		{
			get
			{
				return this._Audits;
			}
			set
			{
				this._Audits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AdvancementRank", Storage="_AdvancementRanks", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<AdvancementRank> AdvancementRanks
		{
			get
			{
				return this._AdvancementRanks;
			}
			set
			{
				this._AdvancementRanks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProgramMaps(UserProgramMap entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserProgramMaps(UserProgramMap entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserDepartmentMaps(UserDepartmentMap entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserDepartmentMaps(UserDepartmentMap entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Tenureds(Tenured entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Tenureds(Tenured entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_StudentSuperviseds(StudentSupervised entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_StudentSuperviseds(StudentSupervised entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_SectionInstructorMaps(SectionInstructorMap entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SectionInstructorMaps(SectionInstructorMap entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ScholarshipPublications(ScholarshipPublication entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ScholarshipPublications(ScholarshipPublication entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_SabbaticalLeaves(SabbaticalLeave entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_SabbaticalLeaves(SabbaticalLeave entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_MaterialUploads(MaterialUpload entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_MaterialUploads(MaterialUpload entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_InstructorCourseRelations(InstructorCourseRelation entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_InstructorCourseRelations(InstructorCourseRelation entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Fundings(Funding entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Fundings(Funding entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ErrorLogs(ErrorLog entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ErrorLogs(ErrorLog entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Degrees(Degree entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Degrees(Degree entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CurrentProfessionals(CurrentProfessional entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CurrentProfessionals(CurrentProfessional entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CurrentMemberships(CurrentMembership entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CurrentMemberships(CurrentMembership entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_CoursesTaughts(CoursesTaught entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_CoursesTaughts(CoursesTaught entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Audits(Audit entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_AdvancementRanks(AdvancementRank entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AdvancementRanks(AdvancementRank entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Topic")]
	public partial class Topic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TopicId;
		
		private string _Description;
		
		private int _CourseId;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTopicIdChanging(int value);
    partial void OnTopicIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    #endregion
		
		public Topic()
		{
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TopicId
		{
			get
			{
				return this._TopicId;
			}
			set
			{
				if ((this._TopicId != value))
				{
					this.OnTopicIdChanging(value);
					this.SendPropertyChanging();
					this._TopicId = value;
					this.SendPropertyChanged("TopicId");
					this.OnTopicIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Topic", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Topics.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Topics.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Term")]
	public partial class Term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TermId;
		
		private string _Name;
		
		private EntitySet<Section> _Sections;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Term()
		{
			this._Sections = new EntitySet<Section>(new Action<Section>(this.attach_Sections), new Action<Section>(this.detach_Sections));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Term_Section", Storage="_Sections", ThisKey="TermId", OtherKey="TermId")]
		public EntitySet<Section> Sections
		{
			get
			{
				return this._Sections;
			}
			set
			{
				this._Sections.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Term = this;
		}
		
		private void detach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Term = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tenured")]
	public partial class Tenured : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TenuredId;
		
		private int _UserId;
		
		private string _Tenure;
		
		private string _TenureTrack;
		
		private string _LimitedTerm;
		
		private string _OtherSpecify;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTenuredIdChanging(int value);
    partial void OnTenuredIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnTenureChanging(string value);
    partial void OnTenureChanged();
    partial void OnTenureTrackChanging(string value);
    partial void OnTenureTrackChanged();
    partial void OnLimitedTermChanging(string value);
    partial void OnLimitedTermChanged();
    partial void OnOtherSpecifyChanging(string value);
    partial void OnOtherSpecifyChanged();
    #endregion
		
		public Tenured()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenuredId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TenuredId
		{
			get
			{
				return this._TenuredId;
			}
			set
			{
				if ((this._TenuredId != value))
				{
					this.OnTenuredIdChanging(value);
					this.SendPropertyChanging();
					this._TenuredId = value;
					this.SendPropertyChanged("TenuredId");
					this.OnTenuredIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tenure", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Tenure
		{
			get
			{
				return this._Tenure;
			}
			set
			{
				if ((this._Tenure != value))
				{
					this.OnTenureChanging(value);
					this.SendPropertyChanging();
					this._Tenure = value;
					this.SendPropertyChanged("Tenure");
					this.OnTenureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TenureTrack", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string TenureTrack
		{
			get
			{
				return this._TenureTrack;
			}
			set
			{
				if ((this._TenureTrack != value))
				{
					this.OnTenureTrackChanging(value);
					this.SendPropertyChanging();
					this._TenureTrack = value;
					this.SendPropertyChanged("TenureTrack");
					this.OnTenureTrackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LimitedTerm", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string LimitedTerm
		{
			get
			{
				return this._LimitedTerm;
			}
			set
			{
				if ((this._LimitedTerm != value))
				{
					this.OnLimitedTermChanging(value);
					this.SendPropertyChanging();
					this._LimitedTerm = value;
					this.SendPropertyChanged("LimitedTerm");
					this.OnLimitedTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherSpecify", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string OtherSpecify
		{
			get
			{
				return this._OtherSpecify;
			}
			set
			{
				if ((this._OtherSpecify != value))
				{
					this.OnOtherSpecifyChanging(value);
					this.SendPropertyChanging();
					this._OtherSpecify = value;
					this.SendPropertyChanged("OtherSpecify");
					this.OnOtherSpecifyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Tenured", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Tenureds.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Tenureds.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUserType")]
	public partial class tblUserType
	{
		
		private int _ID;
		
		private string _UserType;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		public tblUserType()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType", DbType="VarChar(100)")]
		public string UserType
		{
			get
			{
				return this._UserType;
			}
			set
			{
				if ((this._UserType != value))
				{
					this._UserType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this._CreatedBy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this._CreatedOn = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this._UpdatedBy = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this._UpdatedOn = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblUserRegistration")]
	public partial class TblUserRegistration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private string _UserFirstName;
       
		private string _UserLastName;
        private string _userRole;
		private string _UserEmail;

        private string _TempPass;
        private string _HashPass;
		
		private int _Group;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private EntityRef<TblGroupCreation> _TblGroupCreation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnUserFirstNameChanging(string value);
    partial void OnUserFirstNameChanged();
    partial void OnUserLastNameChanging(string value);
    partial void OnUserLastNameChanged();
    partial void OnuserRoleChanging(string value);
    partial void OnuserRoleChanged();
    partial void OnTempPassChanging(string value);
    partial void OnTempPassChanged();
    partial void OnHashPassChanging(string value);
    partial void OnHashPassChanged();
    partial void OnUserEmailChanging(string value);
    partial void OnUserEmailChanged();
    partial void OnGroupChanging(int value);
    partial void OnGroupChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public TblUserRegistration()
		{
			this._TblGroupCreation = default(EntityRef<TblGroupCreation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserFirstName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string UserFirstName
		{
			get
			{
				return this._UserFirstName;
			}
			set
			{
				if ((this._UserFirstName != value))
				{
					this.OnUserFirstNameChanging(value);
					this.SendPropertyChanging();
					this._UserFirstName = value;
					this.SendPropertyChanged("UserFirstName");
					this.OnUserFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserLastName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string UserLastName
		{
			get
			{
				return this._UserLastName;
			}
			set
			{
				if ((this._UserLastName != value))
				{
					this.OnUserLastNameChanging(value);
					this.SendPropertyChanging();
					this._UserLastName = value;
					this.SendPropertyChanged("UserLastName");
					this.OnUserLastNameChanged();
				}
			}
		}



        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_userRole", DbType = "VarChar(100) NOT NULL", CanBeNull = false)]
        public string userRole
        {
            get
            {
                return this._userRole;
            }
            set
            {
                if ((this._userRole != value))
                {
                    this.OnuserRoleChanging(value);
                    this.SendPropertyChanging();
                    this._userRole = value;
                    this.SendPropertyChanged("userRole");
                    this.OnuserRoleChanged();
                }
            }
        }



        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TempPass", DbType = "VarChar(100)")]
        public string TempPass
        {
            get
            {
                return this._TempPass;
            }
            set
            {
                if ((this._TempPass != value))
                {
                    this.OnTempPassChanging(value);
                    this.SendPropertyChanging();
                    this._TempPass = value;
                    this.SendPropertyChanged("TempPass");
                    this.OnTempPassChanged();
                }
            }
        }


        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_HashPass", DbType = "VarChar(150)")]
        public string HashPass
        {
            get
            {
                return this._HashPass;
            }
            set
            {
                if ((this._HashPass != value))
                {
                    this.OnHashPassChanging(value);
                    this.SendPropertyChanging();
                    this._HashPass = value;
                    this.SendPropertyChanged("HashPass");
                    this.OnHashPassChanged();
                }
            }
        }


		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserEmail", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string UserEmail
		{
			get
			{
				return this._UserEmail;
			}
			set
			{
				if ((this._UserEmail != value))
				{
					this.OnUserEmailChanging(value);
					this.SendPropertyChanging();
					this._UserEmail = value;
					this.SendPropertyChanged("UserEmail");
					this.OnUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Group]", Storage="_Group", DbType="Int NOT NULL")]
		public int Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblGroupCreation_TblUserRegistration", Storage="_TblGroupCreation", ThisKey="Group", OtherKey="GrpId", IsForeignKey=true)]
		public TblGroupCreation TblGroupCreation
		{
			get
			{
				return this._TblGroupCreation.Entity;
			}
			set
			{
				TblGroupCreation previousValue = this._TblGroupCreation.Entity;
				if (((previousValue != value) 
							|| (this._TblGroupCreation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblGroupCreation.Entity = null;
						previousValue.TblUserRegistrations.Remove(this);
					}
					this._TblGroupCreation.Entity = value;
					if ((value != null))
					{
						value.TblUserRegistrations.Add(this);
						this._Group = value.GrpId;
					}
					else
					{
						this._Group = default(int);
					}
					this.SendPropertyChanged("TblGroupCreation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblUser")]
	public partial class tblUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TypeId;
		
		private string _Company;
		
		private System.Nullable<System.DateTime> _LoginTime;
		
		private string _UserName;
		
		private string _Email;
		
		private string _Pin;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Phone;
		
		private string _TaxSSNBrokerId;
		
		private System.Nullable<int> _AgencyRoleId;
		
		private string _Fax;
		
		private System.Nullable<int> _WallEmilFrequency;
		
		private string _Address1;
		
		private string _Address2;
		
		private System.Nullable<int> _CityId;
		
		private System.Nullable<int> _StateId;
		
		private string _ZipCode;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private bool _Enable;
		
		private EntityRef<tblAgencyRole> _tblAgencyRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeIdChanging(System.Nullable<int> value);
    partial void OnTypeIdChanged();
    partial void OnCompanyChanging(string value);
    partial void OnCompanyChanged();
    partial void OnLoginTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLoginTimeChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPinChanging(string value);
    partial void OnPinChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnTaxSSNBrokerIdChanging(string value);
    partial void OnTaxSSNBrokerIdChanged();
    partial void OnAgencyRoleIdChanging(System.Nullable<int> value);
    partial void OnAgencyRoleIdChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnWallEmilFrequencyChanging(System.Nullable<int> value);
    partial void OnWallEmilFrequencyChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnStateIdChanging(System.Nullable<int> value);
    partial void OnStateIdChanged();
    partial void OnZipCodeChanging(string value);
    partial void OnZipCodeChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    partial void OnEnableChanging(bool value);
    partial void OnEnableChanged();
    #endregion
		
		public tblUser()
		{
			this._tblAgencyRole = default(EntityRef<tblAgencyRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeId", DbType="Int")]
		public System.Nullable<int> TypeId
		{
			get
			{
				return this._TypeId;
			}
			set
			{
				if ((this._TypeId != value))
				{
					this.OnTypeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeId = value;
					this.SendPropertyChanged("TypeId");
					this.OnTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Company", DbType="VarChar(100)")]
		public string Company
		{
			get
			{
				return this._Company;
			}
			set
			{
				if ((this._Company != value))
				{
					this.OnCompanyChanging(value);
					this.SendPropertyChanging();
					this._Company = value;
					this.SendPropertyChanged("Company");
					this.OnCompanyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LoginTime
		{
			get
			{
				return this._LoginTime;
			}
			set
			{
				if ((this._LoginTime != value))
				{
					this.OnLoginTimeChanging(value);
					this.SendPropertyChanging();
					this._LoginTime = value;
					this.SendPropertyChanged("LoginTime");
					this.OnLoginTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(100)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pin", DbType="VarChar(5)")]
		public string Pin
		{
			get
			{
				return this._Pin;
			}
			set
			{
				if ((this._Pin != value))
				{
					this.OnPinChanging(value);
					this.SendPropertyChanging();
					this._Pin = value;
					this.SendPropertyChanged("Pin");
					this.OnPinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(15)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxSSNBrokerId", DbType="VarChar(20)")]
		public string TaxSSNBrokerId
		{
			get
			{
				return this._TaxSSNBrokerId;
			}
			set
			{
				if ((this._TaxSSNBrokerId != value))
				{
					this.OnTaxSSNBrokerIdChanging(value);
					this.SendPropertyChanging();
					this._TaxSSNBrokerId = value;
					this.SendPropertyChanged("TaxSSNBrokerId");
					this.OnTaxSSNBrokerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgencyRoleId", DbType="Int")]
		public System.Nullable<int> AgencyRoleId
		{
			get
			{
				return this._AgencyRoleId;
			}
			set
			{
				if ((this._AgencyRoleId != value))
				{
					if (this._tblAgencyRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgencyRoleIdChanging(value);
					this.SendPropertyChanging();
					this._AgencyRoleId = value;
					this.SendPropertyChanged("AgencyRoleId");
					this.OnAgencyRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fax", DbType="VarChar(30)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WallEmilFrequency", DbType="Int")]
		public System.Nullable<int> WallEmilFrequency
		{
			get
			{
				return this._WallEmilFrequency;
			}
			set
			{
				if ((this._WallEmilFrequency != value))
				{
					this.OnWallEmilFrequencyChanging(value);
					this.SendPropertyChanging();
					this._WallEmilFrequency = value;
					this.SendPropertyChanged("WallEmilFrequency");
					this.OnWallEmilFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(100)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(100)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int")]
		public System.Nullable<int> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZipCode", DbType="VarChar(20)")]
		public string ZipCode
		{
			get
			{
				return this._ZipCode;
			}
			set
			{
				if ((this._ZipCode != value))
				{
					this.OnZipCodeChanging(value);
					this.SendPropertyChanging();
					this._ZipCode = value;
					this.SendPropertyChanged("ZipCode");
					this.OnZipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Enable", DbType="Bit NOT NULL")]
		public bool Enable
		{
			get
			{
				return this._Enable;
			}
			set
			{
				if ((this._Enable != value))
				{
					this.OnEnableChanging(value);
					this.SendPropertyChanging();
					this._Enable = value;
					this.SendPropertyChanged("Enable");
					this.OnEnableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAgencyRole_tblUser", Storage="_tblAgencyRole", ThisKey="AgencyRoleId", OtherKey="ID", IsForeignKey=true)]
		public tblAgencyRole tblAgencyRole
		{
			get
			{
				return this._tblAgencyRole.Entity;
			}
			set
			{
				tblAgencyRole previousValue = this._tblAgencyRole.Entity;
				if (((previousValue != value) 
							|| (this._tblAgencyRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAgencyRole.Entity = null;
						previousValue.tblUsers.Remove(this);
					}
					this._tblAgencyRole.Entity = value;
					if ((value != null))
					{
						value.tblUsers.Add(this);
						this._AgencyRoleId = value.ID;
					}
					else
					{
						this._AgencyRoleId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblAgencyRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblState")]
	public partial class TblState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StateId;
		
		private string _StateCode;
		
		private string _StateName;
		
		private string _StateCountyCode;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private EntitySet<tblRate> _tblRates;
		
		private EntitySet<tblRate> _tblRates1;
		
		private EntitySet<tblPolicyRate> _tblPolicyRates;
		
		private EntitySet<TblGroupCreation> _TblGroupCreations;
		
		private EntitySet<tblEmployee> _tblEmployees;
		
		private EntitySet<tblClientGroup> _tblClientGroups;
		
		private EntitySet<tblBrokerageMaster> _tblBrokerageMasters;
		
		private EntitySet<TblSubpoenaFrm> _TblSubpoenaFrms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    partial void OnStateCodeChanging(string value);
    partial void OnStateCodeChanged();
    partial void OnStateNameChanging(string value);
    partial void OnStateNameChanged();
    partial void OnStateCountyCodeChanging(string value);
    partial void OnStateCountyCodeChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public TblState()
		{
			this._tblRates = new EntitySet<tblRate>(new Action<tblRate>(this.attach_tblRates), new Action<tblRate>(this.detach_tblRates));
			this._tblRates1 = new EntitySet<tblRate>(new Action<tblRate>(this.attach_tblRates1), new Action<tblRate>(this.detach_tblRates1));
			this._tblPolicyRates = new EntitySet<tblPolicyRate>(new Action<tblPolicyRate>(this.attach_tblPolicyRates), new Action<tblPolicyRate>(this.detach_tblPolicyRates));
			this._TblGroupCreations = new EntitySet<TblGroupCreation>(new Action<TblGroupCreation>(this.attach_TblGroupCreations), new Action<TblGroupCreation>(this.detach_TblGroupCreations));
			this._tblEmployees = new EntitySet<tblEmployee>(new Action<tblEmployee>(this.attach_tblEmployees), new Action<tblEmployee>(this.detach_tblEmployees));
			this._tblClientGroups = new EntitySet<tblClientGroup>(new Action<tblClientGroup>(this.attach_tblClientGroups), new Action<tblClientGroup>(this.detach_tblClientGroups));
			this._tblBrokerageMasters = new EntitySet<tblBrokerageMaster>(new Action<tblBrokerageMaster>(this.attach_tblBrokerageMasters), new Action<tblBrokerageMaster>(this.detach_tblBrokerageMasters));
			this._TblSubpoenaFrms = new EntitySet<TblSubpoenaFrm>(new Action<TblSubpoenaFrm>(this.attach_TblSubpoenaFrms), new Action<TblSubpoenaFrm>(this.detach_TblSubpoenaFrms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateCode", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string StateCode
		{
			get
			{
				return this._StateCode;
			}
			set
			{
				if ((this._StateCode != value))
				{
					this.OnStateCodeChanging(value);
					this.SendPropertyChanging();
					this._StateCode = value;
					this.SendPropertyChanged("StateCode");
					this.OnStateCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string StateName
		{
			get
			{
				return this._StateName;
			}
			set
			{
				if ((this._StateName != value))
				{
					this.OnStateNameChanging(value);
					this.SendPropertyChanging();
					this._StateName = value;
					this.SendPropertyChanged("StateName");
					this.OnStateNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateCountyCode", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string StateCountyCode
		{
			get
			{
				return this._StateCountyCode;
			}
			set
			{
				if ((this._StateCountyCode != value))
				{
					this.OnStateCountyCodeChanging(value);
					this.SendPropertyChanging();
					this._StateCountyCode = value;
					this.SendPropertyChanged("StateCountyCode");
					this.OnStateCountyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_tblRate", Storage="_tblRates", ThisKey="StateId", OtherKey="stateId")]
		public EntitySet<tblRate> tblRates
		{
			get
			{
				return this._tblRates;
			}
			set
			{
				this._tblRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_tblRate1", Storage="_tblRates1", ThisKey="StateId", OtherKey="stateId")]
		public EntitySet<tblRate> tblRates1
		{
			get
			{
				return this._tblRates1;
			}
			set
			{
				this._tblRates1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_tblPolicyRate", Storage="_tblPolicyRates", ThisKey="StateId", OtherKey="stateId")]
		public EntitySet<tblPolicyRate> tblPolicyRates
		{
			get
			{
				return this._tblPolicyRates;
			}
			set
			{
				this._tblPolicyRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_TblGroupCreation", Storage="_TblGroupCreations", ThisKey="StateId", OtherKey="StateId")]
		public EntitySet<TblGroupCreation> TblGroupCreations
		{
			get
			{
				return this._TblGroupCreations;
			}
			set
			{
				this._TblGroupCreations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_tblEmployee", Storage="_tblEmployees", ThisKey="StateId", OtherKey="StateId")]
		public EntitySet<tblEmployee> tblEmployees
		{
			get
			{
				return this._tblEmployees;
			}
			set
			{
				this._tblEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_tblClientGroup", Storage="_tblClientGroups", ThisKey="StateId", OtherKey="State")]
		public EntitySet<tblClientGroup> tblClientGroups
		{
			get
			{
				return this._tblClientGroups;
			}
			set
			{
				this._tblClientGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_tblBrokerageMaster", Storage="_tblBrokerageMasters", ThisKey="StateId", OtherKey="StateID")]
		public EntitySet<tblBrokerageMaster> tblBrokerageMasters
		{
			get
			{
				return this._tblBrokerageMasters;
			}
			set
			{
				this._tblBrokerageMasters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_TblSubpoenaFrm", Storage="_TblSubpoenaFrms", ThisKey="StateId", OtherKey="StateId")]
		public EntitySet<TblSubpoenaFrm> TblSubpoenaFrms
		{
			get
			{
				return this._TblSubpoenaFrms;
			}
			set
			{
				this._TblSubpoenaFrms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblRates(tblRate entity)
		{
			this.SendPropertyChanging();
			entity.TblState = this;
		}
		
		private void detach_tblRates(tblRate entity)
		{
			this.SendPropertyChanging();
			entity.TblState = null;
		}
		
		private void attach_tblRates1(tblRate entity)
		{
			this.SendPropertyChanging();
			entity.TblState1 = this;
		}
		
		private void detach_tblRates1(tblRate entity)
		{
			this.SendPropertyChanging();
			entity.TblState1 = null;
		}
		
		private void attach_tblPolicyRates(tblPolicyRate entity)
		{
			this.SendPropertyChanging();
			entity.TblState = this;
		}
		
		private void detach_tblPolicyRates(tblPolicyRate entity)
		{
			this.SendPropertyChanging();
			entity.TblState = null;
		}
		
		private void attach_TblGroupCreations(TblGroupCreation entity)
		{
			this.SendPropertyChanging();
			entity.TblState = this;
		}
		
		private void detach_TblGroupCreations(TblGroupCreation entity)
		{
			this.SendPropertyChanging();
			entity.TblState = null;
		}
		
		private void attach_tblEmployees(tblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.TblState = this;
		}
		
		private void detach_tblEmployees(tblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.TblState = null;
		}
		
		private void attach_tblClientGroups(tblClientGroup entity)
		{
			this.SendPropertyChanging();
			entity.TblState = this;
		}
		
		private void detach_tblClientGroups(tblClientGroup entity)
		{
			this.SendPropertyChanging();
			entity.TblState = null;
		}
		
		private void attach_tblBrokerageMasters(tblBrokerageMaster entity)
		{
			this.SendPropertyChanging();
			entity.TblState = this;
		}
		
		private void detach_tblBrokerageMasters(tblBrokerageMaster entity)
		{
			this.SendPropertyChanging();
			entity.TblState = null;
		}
		
		private void attach_TblSubpoenaFrms(TblSubpoenaFrm entity)
		{
			this.SendPropertyChanging();
			entity.TblState = this;
		}
		
		private void detach_TblSubpoenaFrms(TblSubpoenaFrm entity)
		{
			this.SendPropertyChanging();
			entity.TblState = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblRate")]
	public partial class tblRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _CarrierId;
		
		private string _PlanCode;
		
		private System.Nullable<int> _stateId;
		
		private System.Nullable<int> _CountyId;
		
		private System.Nullable<int> _From;
		
		private System.Nullable<int> _To;
		
		private System.Nullable<decimal> _Rate;
		
		private System.Nullable<System.DateTime> _EffectiveDate;
		
		private bool _Active;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.DateTime _UpdatedOn;
		
		private EntityRef<TblState> _TblState;
		
		private EntityRef<TblCounty> _TblCounty;
		
		private EntityRef<tblBenefitPlan> _tblBenefitPlan;
		
		private EntityRef<TblCounty> _TblCounty1;
		
		private EntityRef<TblState> _TblState1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCarrierIdChanging(System.Nullable<int> value);
    partial void OnCarrierIdChanged();
    partial void OnPlanCodeChanging(string value);
    partial void OnPlanCodeChanged();
    partial void OnstateIdChanging(System.Nullable<int> value);
    partial void OnstateIdChanged();
    partial void OnCountyIdChanging(System.Nullable<int> value);
    partial void OnCountyIdChanged();
    partial void OnFromChanging(System.Nullable<int> value);
    partial void OnFromChanged();
    partial void OnToChanging(System.Nullable<int> value);
    partial void OnToChanged();
    partial void OnRateChanging(System.Nullable<decimal> value);
    partial void OnRateChanged();
    partial void OnEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEffectiveDateChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.DateTime value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblRate()
		{
			this._TblState = default(EntityRef<TblState>);
			this._TblCounty = default(EntityRef<TblCounty>);
			this._tblBenefitPlan = default(EntityRef<tblBenefitPlan>);
			this._TblCounty1 = default(EntityRef<TblCounty>);
			this._TblState1 = default(EntityRef<TblState>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarrierId", DbType="Int")]
		public System.Nullable<int> CarrierId
		{
			get
			{
				return this._CarrierId;
			}
			set
			{
				if ((this._CarrierId != value))
				{
					if (this._tblBenefitPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarrierIdChanging(value);
					this.SendPropertyChanging();
					this._CarrierId = value;
					this.SendPropertyChanged("CarrierId");
					this.OnCarrierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanCode", DbType="VarChar(50)")]
		public string PlanCode
		{
			get
			{
				return this._PlanCode;
			}
			set
			{
				if ((this._PlanCode != value))
				{
					this.OnPlanCodeChanging(value);
					this.SendPropertyChanging();
					this._PlanCode = value;
					this.SendPropertyChanged("PlanCode");
					this.OnPlanCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stateId", DbType="Int")]
		public System.Nullable<int> stateId
		{
			get
			{
				return this._stateId;
			}
			set
			{
				if ((this._stateId != value))
				{
					if ((this._TblState.HasLoadedOrAssignedValue || this._TblState1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstateIdChanging(value);
					this.SendPropertyChanging();
					this._stateId = value;
					this.SendPropertyChanged("stateId");
					this.OnstateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyId", DbType="Int")]
		public System.Nullable<int> CountyId
		{
			get
			{
				return this._CountyId;
			}
			set
			{
				if ((this._CountyId != value))
				{
					if ((this._TblCounty.HasLoadedOrAssignedValue || this._TblCounty1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountyIdChanging(value);
					this.SendPropertyChanging();
					this._CountyId = value;
					this.SendPropertyChanged("CountyId");
					this.OnCountyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="Int")]
		public System.Nullable<int> From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="Int")]
		public System.Nullable<int> To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged("EffectiveDate");
					this.OnEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_tblRate", Storage="_TblState", ThisKey="stateId", OtherKey="StateId", IsForeignKey=true)]
		public TblState TblState
		{
			get
			{
				return this._TblState.Entity;
			}
			set
			{
				TblState previousValue = this._TblState.Entity;
				if (((previousValue != value) 
							|| (this._TblState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblState.Entity = null;
						previousValue.tblRates.Remove(this);
					}
					this._TblState.Entity = value;
					if ((value != null))
					{
						value.tblRates.Add(this);
						this._stateId = value.StateId;
					}
					else
					{
						this._stateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblCounty_tblRate", Storage="_TblCounty", ThisKey="CountyId", OtherKey="CountyId", IsForeignKey=true)]
		public TblCounty TblCounty
		{
			get
			{
				return this._TblCounty.Entity;
			}
			set
			{
				TblCounty previousValue = this._TblCounty.Entity;
				if (((previousValue != value) 
							|| (this._TblCounty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCounty.Entity = null;
						previousValue.tblRates.Remove(this);
					}
					this._TblCounty.Entity = value;
					if ((value != null))
					{
						value.tblRates.Add(this);
						this._CountyId = value.CountyId;
					}
					else
					{
						this._CountyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblCounty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblRate", Storage="_tblBenefitPlan", ThisKey="CarrierId", OtherKey="ID", IsForeignKey=true)]
		public tblBenefitPlan tblBenefitPlan
		{
			get
			{
				return this._tblBenefitPlan.Entity;
			}
			set
			{
				tblBenefitPlan previousValue = this._tblBenefitPlan.Entity;
				if (((previousValue != value) 
							|| (this._tblBenefitPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblBenefitPlan.Entity = null;
						previousValue.tblRates.Remove(this);
					}
					this._tblBenefitPlan.Entity = value;
					if ((value != null))
					{
						value.tblRates.Add(this);
						this._CarrierId = value.ID;
					}
					else
					{
						this._CarrierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblBenefitPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblCounty_tblRate1", Storage="_TblCounty1", ThisKey="CountyId", OtherKey="CountyId", IsForeignKey=true)]
		public TblCounty TblCounty1
		{
			get
			{
				return this._TblCounty1.Entity;
			}
			set
			{
				TblCounty previousValue = this._TblCounty1.Entity;
				if (((previousValue != value) 
							|| (this._TblCounty1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCounty1.Entity = null;
						previousValue.tblRates1.Remove(this);
					}
					this._TblCounty1.Entity = value;
					if ((value != null))
					{
						value.tblRates1.Add(this);
						this._CountyId = value.CountyId;
					}
					else
					{
						this._CountyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblCounty1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_tblRate1", Storage="_TblState1", ThisKey="stateId", OtherKey="StateId", IsForeignKey=true)]
		public TblState TblState1
		{
			get
			{
				return this._TblState1.Entity;
			}
			set
			{
				TblState previousValue = this._TblState1.Entity;
				if (((previousValue != value) 
							|| (this._TblState1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblState1.Entity = null;
						previousValue.tblRates1.Remove(this);
					}
					this._TblState1.Entity = value;
					if ((value != null))
					{
						value.tblRates1.Add(this);
						this._stateId = value.StateId;
					}
					else
					{
						this._stateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblState1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPolicyRateFactor")]
	public partial class tblPolicyRateFactor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _PolicyRateId;
		
		private System.Nullable<int> _RateFrom;
		
		private System.Nullable<int> _RateTo;
		
		private System.Nullable<decimal> _RateFactor;
		
		private System.Nullable<System.DateTime> _EffectiveDate;
		
		private bool _Active;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.DateTime _UpdatedOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPolicyRateIdChanging(System.Nullable<int> value);
    partial void OnPolicyRateIdChanged();
    partial void OnRateFromChanging(System.Nullable<int> value);
    partial void OnRateFromChanged();
    partial void OnRateToChanging(System.Nullable<int> value);
    partial void OnRateToChanged();
    partial void OnRateFactorChanging(System.Nullable<decimal> value);
    partial void OnRateFactorChanged();
    partial void OnEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEffectiveDateChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.DateTime value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblPolicyRateFactor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PolicyRateId", DbType="Int")]
		public System.Nullable<int> PolicyRateId
		{
			get
			{
				return this._PolicyRateId;
			}
			set
			{
				if ((this._PolicyRateId != value))
				{
					this.OnPolicyRateIdChanging(value);
					this.SendPropertyChanging();
					this._PolicyRateId = value;
					this.SendPropertyChanged("PolicyRateId");
					this.OnPolicyRateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateFrom", DbType="Int")]
		public System.Nullable<int> RateFrom
		{
			get
			{
				return this._RateFrom;
			}
			set
			{
				if ((this._RateFrom != value))
				{
					this.OnRateFromChanging(value);
					this.SendPropertyChanging();
					this._RateFrom = value;
					this.SendPropertyChanged("RateFrom");
					this.OnRateFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateTo", DbType="Int")]
		public System.Nullable<int> RateTo
		{
			get
			{
				return this._RateTo;
			}
			set
			{
				if ((this._RateTo != value))
				{
					this.OnRateToChanging(value);
					this.SendPropertyChanging();
					this._RateTo = value;
					this.SendPropertyChanged("RateTo");
					this.OnRateToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RateFactor", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> RateFactor
		{
			get
			{
				return this._RateFactor;
			}
			set
			{
				if ((this._RateFactor != value))
				{
					this.OnRateFactorChanging(value);
					this.SendPropertyChanging();
					this._RateFactor = value;
					this.SendPropertyChanged("RateFactor");
					this.OnRateFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged("EffectiveDate");
					this.OnEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblPolicyRate")]
	public partial class tblPolicyRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _CarrierId;
		
		private string _PlanCode;
		
		private System.Nullable<int> _stateId;
		
		private System.Nullable<int> _CountyId;
		
		private System.Nullable<int> _From;
		
		private System.Nullable<int> _To;
		
		private System.Nullable<decimal> _Factor;
		
		private System.Nullable<System.DateTime> _EffectiveDate;
		
		private bool _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private EntityRef<TblCounty> _TblCounty;
		
		private EntityRef<TblState> _TblState;
		
		private EntityRef<TblCounty> _TblCounty1;
		
		private EntityRef<tblBenefitPlan> _tblBenefitPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCarrierIdChanging(System.Nullable<int> value);
    partial void OnCarrierIdChanged();
    partial void OnPlanCodeChanging(string value);
    partial void OnPlanCodeChanged();
    partial void OnstateIdChanging(System.Nullable<int> value);
    partial void OnstateIdChanged();
    partial void OnCountyIdChanging(System.Nullable<int> value);
    partial void OnCountyIdChanged();
    partial void OnFromChanging(System.Nullable<int> value);
    partial void OnFromChanged();
    partial void OnToChanging(System.Nullable<int> value);
    partial void OnToChanged();
    partial void OnFactorChanging(System.Nullable<decimal> value);
    partial void OnFactorChanged();
    partial void OnEffectiveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEffectiveDateChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblPolicyRate()
		{
			this._TblCounty = default(EntityRef<TblCounty>);
			this._TblState = default(EntityRef<TblState>);
			this._TblCounty1 = default(EntityRef<TblCounty>);
			this._tblBenefitPlan = default(EntityRef<tblBenefitPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarrierId", DbType="Int")]
		public System.Nullable<int> CarrierId
		{
			get
			{
				return this._CarrierId;
			}
			set
			{
				if ((this._CarrierId != value))
				{
					if (this._tblBenefitPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarrierIdChanging(value);
					this.SendPropertyChanging();
					this._CarrierId = value;
					this.SendPropertyChanged("CarrierId");
					this.OnCarrierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanCode", DbType="VarChar(50)")]
		public string PlanCode
		{
			get
			{
				return this._PlanCode;
			}
			set
			{
				if ((this._PlanCode != value))
				{
					this.OnPlanCodeChanging(value);
					this.SendPropertyChanging();
					this._PlanCode = value;
					this.SendPropertyChanged("PlanCode");
					this.OnPlanCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stateId", DbType="Int")]
		public System.Nullable<int> stateId
		{
			get
			{
				return this._stateId;
			}
			set
			{
				if ((this._stateId != value))
				{
					if (this._TblState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstateIdChanging(value);
					this.SendPropertyChanging();
					this._stateId = value;
					this.SendPropertyChanged("stateId");
					this.OnstateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyId", DbType="Int")]
		public System.Nullable<int> CountyId
		{
			get
			{
				return this._CountyId;
			}
			set
			{
				if ((this._CountyId != value))
				{
					if ((this._TblCounty.HasLoadedOrAssignedValue || this._TblCounty1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountyIdChanging(value);
					this.SendPropertyChanging();
					this._CountyId = value;
					this.SendPropertyChanged("CountyId");
					this.OnCountyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="Int")]
		public System.Nullable<int> From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="Int")]
		public System.Nullable<int> To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Factor", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Factor
		{
			get
			{
				return this._Factor;
			}
			set
			{
				if ((this._Factor != value))
				{
					this.OnFactorChanging(value);
					this.SendPropertyChanging();
					this._Factor = value;
					this.SendPropertyChanged("Factor");
					this.OnFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EffectiveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EffectiveDate
		{
			get
			{
				return this._EffectiveDate;
			}
			set
			{
				if ((this._EffectiveDate != value))
				{
					this.OnEffectiveDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveDate = value;
					this.SendPropertyChanged("EffectiveDate");
					this.OnEffectiveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblCounty_tblPolicyRate", Storage="_TblCounty", ThisKey="CountyId", OtherKey="CountyId", IsForeignKey=true)]
		public TblCounty TblCounty
		{
			get
			{
				return this._TblCounty.Entity;
			}
			set
			{
				TblCounty previousValue = this._TblCounty.Entity;
				if (((previousValue != value) 
							|| (this._TblCounty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCounty.Entity = null;
						previousValue.tblPolicyRates.Remove(this);
					}
					this._TblCounty.Entity = value;
					if ((value != null))
					{
						value.tblPolicyRates.Add(this);
						this._CountyId = value.CountyId;
					}
					else
					{
						this._CountyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblCounty");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_tblPolicyRate", Storage="_TblState", ThisKey="stateId", OtherKey="StateId", IsForeignKey=true)]
		public TblState TblState
		{
			get
			{
				return this._TblState.Entity;
			}
			set
			{
				TblState previousValue = this._TblState.Entity;
				if (((previousValue != value) 
							|| (this._TblState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblState.Entity = null;
						previousValue.tblPolicyRates.Remove(this);
					}
					this._TblState.Entity = value;
					if ((value != null))
					{
						value.tblPolicyRates.Add(this);
						this._stateId = value.StateId;
					}
					else
					{
						this._stateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblCounty_tblPolicyRate1", Storage="_TblCounty1", ThisKey="CountyId", OtherKey="CountyId", IsForeignKey=true)]
		public TblCounty TblCounty1
		{
			get
			{
				return this._TblCounty1.Entity;
			}
			set
			{
				TblCounty previousValue = this._TblCounty1.Entity;
				if (((previousValue != value) 
							|| (this._TblCounty1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCounty1.Entity = null;
						previousValue.tblPolicyRates1.Remove(this);
					}
					this._TblCounty1.Entity = value;
					if ((value != null))
					{
						value.tblPolicyRates1.Add(this);
						this._CountyId = value.CountyId;
					}
					else
					{
						this._CountyId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblCounty1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblPolicyRate", Storage="_tblBenefitPlan", ThisKey="CarrierId", OtherKey="ID", IsForeignKey=true)]
		public tblBenefitPlan tblBenefitPlan
		{
			get
			{
				return this._tblBenefitPlan.Entity;
			}
			set
			{
				tblBenefitPlan previousValue = this._tblBenefitPlan.Entity;
				if (((previousValue != value) 
							|| (this._tblBenefitPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblBenefitPlan.Entity = null;
						previousValue.tblPolicyRates.Remove(this);
					}
					this._tblBenefitPlan.Entity = value;
					if ((value != null))
					{
						value.tblPolicyRates.Add(this);
						this._CarrierId = value.ID;
					}
					else
					{
						this._CarrierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblBenefitPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblPasswordChange")]
	public partial class TblPasswordChange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PasswordChangeId;
		
		private string _EmailAddress;
		
		private string _TempPassword;
		
		private string _NewPassword;
		
		private string _RetypePassword;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPasswordChangeIdChanging(int value);
    partial void OnPasswordChangeIdChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnTempPasswordChanging(string value);
    partial void OnTempPasswordChanged();
    partial void OnNewPasswordChanging(string value);
    partial void OnNewPasswordChanged();
    partial void OnRetypePasswordChanging(string value);
    partial void OnRetypePasswordChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public TblPasswordChange()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordChangeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PasswordChangeId
		{
			get
			{
				return this._PasswordChangeId;
			}
			set
			{
				if ((this._PasswordChangeId != value))
				{
					this.OnPasswordChangeIdChanging(value);
					this.SendPropertyChanging();
					this._PasswordChangeId = value;
					this.SendPropertyChanged("PasswordChangeId");
					this.OnPasswordChangeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TempPassword", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string TempPassword
		{
			get
			{
				return this._TempPassword;
			}
			set
			{
				if ((this._TempPassword != value))
				{
					this.OnTempPasswordChanging(value);
					this.SendPropertyChanging();
					this._TempPassword = value;
					this.SendPropertyChanged("TempPassword");
					this.OnTempPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewPassword", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string NewPassword
		{
			get
			{
				return this._NewPassword;
			}
			set
			{
				if ((this._NewPassword != value))
				{
					this.OnNewPasswordChanging(value);
					this.SendPropertyChanging();
					this._NewPassword = value;
					this.SendPropertyChanged("NewPassword");
					this.OnNewPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RetypePassword", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string RetypePassword
		{
			get
			{
				return this._RetypePassword;
			}
			set
			{
				if ((this._RetypePassword != value))
				{
					this.OnRetypePasswordChanging(value);
					this.SendPropertyChanging();
					this._RetypePassword = value;
					this.SendPropertyChanged("RetypePassword");
					this.OnRetypePasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblNotificationDetective")]
	public partial class TblNotificationDetective : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NotificationId;
		
		private string _CaseId;
		
		private System.DateTime _When;
		
		private string _Where;
		
		private string _Calender;
		
		private string _Who;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNotificationIdChanging(int value);
    partial void OnNotificationIdChanged();
    partial void OnCaseIdChanging(string value);
    partial void OnCaseIdChanged();
    partial void OnWhenChanging(System.DateTime value);
    partial void OnWhenChanged();
    partial void OnWhereChanging(string value);
    partial void OnWhereChanged();
    partial void OnCalenderChanging(string value);
    partial void OnCalenderChanged();
    partial void OnWhoChanging(string value);
    partial void OnWhoChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public TblNotificationDetective()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NotificationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NotificationId
		{
			get
			{
				return this._NotificationId;
			}
			set
			{
				if ((this._NotificationId != value))
				{
					this.OnNotificationIdChanging(value);
					this.SendPropertyChanging();
					this._NotificationId = value;
					this.SendPropertyChanged("NotificationId");
					this.OnNotificationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseId", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string CaseId
		{
			get
			{
				return this._CaseId;
			}
			set
			{
				if ((this._CaseId != value))
				{
					this.OnCaseIdChanging(value);
					this.SendPropertyChanging();
					this._CaseId = value;
					this.SendPropertyChanged("CaseId");
					this.OnCaseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[When]", Storage="_When", DbType="DateTime NOT NULL")]
		public System.DateTime When
		{
			get
			{
				return this._When;
			}
			set
			{
				if ((this._When != value))
				{
					this.OnWhenChanging(value);
					this.SendPropertyChanging();
					this._When = value;
					this.SendPropertyChanged("When");
					this.OnWhenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Where]", Storage="_Where", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Where
		{
			get
			{
				return this._Where;
			}
			set
			{
				if ((this._Where != value))
				{
					this.OnWhereChanging(value);
					this.SendPropertyChanging();
					this._Where = value;
					this.SendPropertyChanged("Where");
					this.OnWhereChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Calender", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Calender
		{
			get
			{
				return this._Calender;
			}
			set
			{
				if ((this._Calender != value))
				{
					this.OnCalenderChanging(value);
					this.SendPropertyChanging();
					this._Calender = value;
					this.SendPropertyChanged("Calender");
					this.OnCalenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Who", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string Who
		{
			get
			{
				return this._Who;
			}
			set
			{
				if ((this._Who != value))
				{
					this.OnWhoChanging(value);
					this.SendPropertyChanging();
					this._Who = value;
					this.SendPropertyChanged("Who");
					this.OnWhoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblModeofSalary")]
	public partial class tblModeofSalary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ModeofSalary;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdateOn;
		
		private EntitySet<tblEmployee> _tblEmployees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnModeofSalaryChanging(string value);
    partial void OnModeofSalaryChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdateOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdateOnChanged();
    #endregion
		
		public tblModeofSalary()
		{
			this._tblEmployees = new EntitySet<tblEmployee>(new Action<tblEmployee>(this.attach_tblEmployees), new Action<tblEmployee>(this.detach_tblEmployees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeofSalary", DbType="VarChar(200)")]
		public string ModeofSalary
		{
			get
			{
				return this._ModeofSalary;
			}
			set
			{
				if ((this._ModeofSalary != value))
				{
					this.OnModeofSalaryChanging(value);
					this.SendPropertyChanging();
					this._ModeofSalary = value;
					this.SendPropertyChanged("ModeofSalary");
					this.OnModeofSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdateOn
		{
			get
			{
				return this._UpdateOn;
			}
			set
			{
				if ((this._UpdateOn != value))
				{
					this.OnUpdateOnChanging(value);
					this.SendPropertyChanging();
					this._UpdateOn = value;
					this.SendPropertyChanged("UpdateOn");
					this.OnUpdateOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblModeofSalary_tblEmployee", Storage="_tblEmployees", ThisKey="ID", OtherKey="ModeofSalary")]
		public EntitySet<tblEmployee> tblEmployees
		{
			get
			{
				return this._tblEmployees;
			}
			set
			{
				this._tblEmployees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblEmployees(tblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.tblModeofSalary = this;
		}
		
		private void detach_tblEmployees(tblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.tblModeofSalary = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblGroupCreation")]
	public partial class TblGroupCreation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GrpId;
		
		private string _GrpName;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private int _StateId;
		
		private string _Zipcode;
		
		private int _CountryId;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private EntitySet<TblUserRegistration> _TblUserRegistrations;
		
		private EntityRef<TblState> _TblState;
		
		private EntityRef<TblCountry> _TblCountry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGrpIdChanging(int value);
    partial void OnGrpIdChanged();
    partial void OnGrpNameChanging(string value);
    partial void OnGrpNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    partial void OnZipcodeChanging(string value);
    partial void OnZipcodeChanged();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public TblGroupCreation()
		{
			this._TblUserRegistrations = new EntitySet<TblUserRegistration>(new Action<TblUserRegistration>(this.attach_TblUserRegistrations), new Action<TblUserRegistration>(this.detach_TblUserRegistrations));
			this._TblState = default(EntityRef<TblState>);
			this._TblCountry = default(EntityRef<TblCountry>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrpId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int GrpId
		{
			get
			{
				return this._GrpId;
			}
			set
			{
				if ((this._GrpId != value))
				{
					this.OnGrpIdChanging(value);
					this.SendPropertyChanging();
					this._GrpId = value;
					this.SendPropertyChanged("GrpId");
					this.OnGrpIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrpName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string GrpName
		{
			get
			{
				return this._GrpName;
			}
			set
			{
				if ((this._GrpName != value))
				{
					this.OnGrpNameChanging(value);
					this.SendPropertyChanging();
					this._GrpName = value;
					this.SendPropertyChanged("GrpName");
					this.OnGrpNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(200)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int NOT NULL")]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._TblState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zipcode", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Zipcode
		{
			get
			{
				return this._Zipcode;
			}
			set
			{
				if ((this._Zipcode != value))
				{
					this.OnZipcodeChanging(value);
					this.SendPropertyChanging();
					this._Zipcode = value;
					this.SendPropertyChanged("Zipcode");
					this.OnZipcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int NOT NULL")]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._TblCountry.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblGroupCreation_TblUserRegistration", Storage="_TblUserRegistrations", ThisKey="GrpId", OtherKey="Group")]
		public EntitySet<TblUserRegistration> TblUserRegistrations
		{
			get
			{
				return this._TblUserRegistrations;
			}
			set
			{
				this._TblUserRegistrations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_TblGroupCreation", Storage="_TblState", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public TblState TblState
		{
			get
			{
				return this._TblState.Entity;
			}
			set
			{
				TblState previousValue = this._TblState.Entity;
				if (((previousValue != value) 
							|| (this._TblState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblState.Entity = null;
						previousValue.TblGroupCreations.Remove(this);
					}
					this._TblState.Entity = value;
					if ((value != null))
					{
						value.TblGroupCreations.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(int);
					}
					this.SendPropertyChanged("TblState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblCountry_TblGroupCreation", Storage="_TblCountry", ThisKey="CountryId", OtherKey="CountryId", IsForeignKey=true)]
		public TblCountry TblCountry
		{
			get
			{
				return this._TblCountry.Entity;
			}
			set
			{
				TblCountry previousValue = this._TblCountry.Entity;
				if (((previousValue != value) 
							|| (this._TblCountry.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCountry.Entity = null;
						previousValue.TblGroupCreations.Remove(this);
					}
					this._TblCountry.Entity = value;
					if ((value != null))
					{
						value.TblGroupCreations.Add(this);
						this._CountryId = value.CountryId;
					}
					else
					{
						this._CountryId = default(int);
					}
					this.SendPropertyChanged("TblCountry");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblUserRegistrations(TblUserRegistration entity)
		{
			this.SendPropertyChanging();
			entity.TblGroupCreation = this;
		}
		
		private void detach_TblUserRegistrations(TblUserRegistration entity)
		{
			this.SendPropertyChanging();
			entity.TblGroupCreation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblGender")]
	public partial class tblGender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _GenderType;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private EntitySet<tblEmployee> _tblEmployees;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGenderTypeChanging(string value);
    partial void OnGenderTypeChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblGender()
		{
			this._tblEmployees = new EntitySet<tblEmployee>(new Action<tblEmployee>(this.attach_tblEmployees), new Action<tblEmployee>(this.detach_tblEmployees));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GenderType", DbType="VarChar(100)")]
		public string GenderType
		{
			get
			{
				return this._GenderType;
			}
			set
			{
				if ((this._GenderType != value))
				{
					this.OnGenderTypeChanging(value);
					this.SendPropertyChanging();
					this._GenderType = value;
					this.SendPropertyChanged("GenderType");
					this.OnGenderTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblGender_tblEmployee", Storage="_tblEmployees", ThisKey="ID", OtherKey="Gender")]
		public EntitySet<tblEmployee> tblEmployees
		{
			get
			{
				return this._tblEmployees;
			}
			set
			{
				this._tblEmployees.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblEmployees(tblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.tblGender = this;
		}
		
		private void detach_tblEmployees(tblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.tblGender = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblEmployee")]
	public partial class tblEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _GroupID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private System.Nullable<int> _Age;
		
		private System.Nullable<int> _Gender;
		
		private string _SSN;
		
		private System.Nullable<System.DateTime> _SpouseDOB;
		
		private System.Nullable<int> _SpouseAge;
		
		private System.Nullable<int> _ChildCount;
		
		private string _SpouseSSN;
		
		private System.Nullable<System.DateTime> _Child1DOB;
		
		private System.Nullable<int> _Child1Age;
		
		private string _Child1SSN;
		
		private System.Nullable<System.DateTime> _Child2DOB;
		
		private System.Nullable<int> _Child2Age;
		
		private string _Child2SSN;
		
		private string _Corba;
		
		private string _Occupation;
		
		private System.Nullable<decimal> _Salary;
		
		private string _SalaryType;
		
		private System.Nullable<int> _ModeofSalary;
		
		private string _Address1;
		
		private string _Address2;
		
		private System.Nullable<int> _CityId;
		
		private System.Nullable<int> _StateId;
		
		private string _Zipcode;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private string _MedicalTier;
		
		private string _DentalTier;
		
		private string _VisionTier;
		
		private EntityRef<tblModeofSalary> _tblModeofSalary;
		
		private EntityRef<tblCity> _tblCity;
		
		private EntityRef<TblState> _TblState;
		
		private EntityRef<tblGender> _tblGender;
		
		private EntityRef<tblClientGroup> _tblClientGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGroupIDChanging(System.Nullable<int> value);
    partial void OnGroupIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnGenderChanging(System.Nullable<int> value);
    partial void OnGenderChanged();
    partial void OnSSNChanging(string value);
    partial void OnSSNChanged();
    partial void OnSpouseDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnSpouseDOBChanged();
    partial void OnSpouseAgeChanging(System.Nullable<int> value);
    partial void OnSpouseAgeChanged();
    partial void OnChildCountChanging(System.Nullable<int> value);
    partial void OnChildCountChanged();
    partial void OnSpouseSSNChanging(string value);
    partial void OnSpouseSSNChanged();
    partial void OnChild1DOBChanging(System.Nullable<System.DateTime> value);
    partial void OnChild1DOBChanged();
    partial void OnChild1AgeChanging(System.Nullable<int> value);
    partial void OnChild1AgeChanged();
    partial void OnChild1SSNChanging(string value);
    partial void OnChild1SSNChanged();
    partial void OnChild2DOBChanging(System.Nullable<System.DateTime> value);
    partial void OnChild2DOBChanged();
    partial void OnChild2AgeChanging(System.Nullable<int> value);
    partial void OnChild2AgeChanged();
    partial void OnChild2SSNChanging(string value);
    partial void OnChild2SSNChanged();
    partial void OnCorbaChanging(string value);
    partial void OnCorbaChanged();
    partial void OnOccupationChanging(string value);
    partial void OnOccupationChanged();
    partial void OnSalaryChanging(System.Nullable<decimal> value);
    partial void OnSalaryChanged();
    partial void OnSalaryTypeChanging(string value);
    partial void OnSalaryTypeChanged();
    partial void OnModeofSalaryChanging(System.Nullable<int> value);
    partial void OnModeofSalaryChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityIdChanging(System.Nullable<int> value);
    partial void OnCityIdChanged();
    partial void OnStateIdChanging(System.Nullable<int> value);
    partial void OnStateIdChanged();
    partial void OnZipcodeChanging(string value);
    partial void OnZipcodeChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    partial void OnMedicalTierChanging(string value);
    partial void OnMedicalTierChanged();
    partial void OnDentalTierChanging(string value);
    partial void OnDentalTierChanged();
    partial void OnVisionTierChanging(string value);
    partial void OnVisionTierChanged();
    #endregion
		
		public tblEmployee()
		{
			this._tblModeofSalary = default(EntityRef<tblModeofSalary>);
			this._tblCity = default(EntityRef<tblCity>);
			this._TblState = default(EntityRef<TblState>);
			this._tblGender = default(EntityRef<tblGender>);
			this._tblClientGroup = default(EntityRef<tblClientGroup>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="Int")]
		public System.Nullable<int> GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					if (this._tblClientGroup.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(100)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(100)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="DateTime")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Int")]
		public System.Nullable<int> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					if (this._tblGender.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSN", DbType="VarChar(20)")]
		public string SSN
		{
			get
			{
				return this._SSN;
			}
			set
			{
				if ((this._SSN != value))
				{
					this.OnSSNChanging(value);
					this.SendPropertyChanging();
					this._SSN = value;
					this.SendPropertyChanged("SSN");
					this.OnSSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseDOB", DbType="DateTime")]
		public System.Nullable<System.DateTime> SpouseDOB
		{
			get
			{
				return this._SpouseDOB;
			}
			set
			{
				if ((this._SpouseDOB != value))
				{
					this.OnSpouseDOBChanging(value);
					this.SendPropertyChanging();
					this._SpouseDOB = value;
					this.SendPropertyChanged("SpouseDOB");
					this.OnSpouseDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseAge", DbType="Int")]
		public System.Nullable<int> SpouseAge
		{
			get
			{
				return this._SpouseAge;
			}
			set
			{
				if ((this._SpouseAge != value))
				{
					this.OnSpouseAgeChanging(value);
					this.SendPropertyChanging();
					this._SpouseAge = value;
					this.SendPropertyChanged("SpouseAge");
					this.OnSpouseAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildCount", DbType="Int")]
		public System.Nullable<int> ChildCount
		{
			get
			{
				return this._ChildCount;
			}
			set
			{
				if ((this._ChildCount != value))
				{
					this.OnChildCountChanging(value);
					this.SendPropertyChanging();
					this._ChildCount = value;
					this.SendPropertyChanged("ChildCount");
					this.OnChildCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpouseSSN", DbType="VarChar(20)")]
		public string SpouseSSN
		{
			get
			{
				return this._SpouseSSN;
			}
			set
			{
				if ((this._SpouseSSN != value))
				{
					this.OnSpouseSSNChanging(value);
					this.SendPropertyChanging();
					this._SpouseSSN = value;
					this.SendPropertyChanged("SpouseSSN");
					this.OnSpouseSSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Child1DOB", DbType="DateTime")]
		public System.Nullable<System.DateTime> Child1DOB
		{
			get
			{
				return this._Child1DOB;
			}
			set
			{
				if ((this._Child1DOB != value))
				{
					this.OnChild1DOBChanging(value);
					this.SendPropertyChanging();
					this._Child1DOB = value;
					this.SendPropertyChanged("Child1DOB");
					this.OnChild1DOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Child1Age", DbType="Int")]
		public System.Nullable<int> Child1Age
		{
			get
			{
				return this._Child1Age;
			}
			set
			{
				if ((this._Child1Age != value))
				{
					this.OnChild1AgeChanging(value);
					this.SendPropertyChanging();
					this._Child1Age = value;
					this.SendPropertyChanged("Child1Age");
					this.OnChild1AgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Child1SSN", DbType="VarChar(20)")]
		public string Child1SSN
		{
			get
			{
				return this._Child1SSN;
			}
			set
			{
				if ((this._Child1SSN != value))
				{
					this.OnChild1SSNChanging(value);
					this.SendPropertyChanging();
					this._Child1SSN = value;
					this.SendPropertyChanged("Child1SSN");
					this.OnChild1SSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Child2DOB", DbType="DateTime")]
		public System.Nullable<System.DateTime> Child2DOB
		{
			get
			{
				return this._Child2DOB;
			}
			set
			{
				if ((this._Child2DOB != value))
				{
					this.OnChild2DOBChanging(value);
					this.SendPropertyChanging();
					this._Child2DOB = value;
					this.SendPropertyChanged("Child2DOB");
					this.OnChild2DOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Child2Age", DbType="Int")]
		public System.Nullable<int> Child2Age
		{
			get
			{
				return this._Child2Age;
			}
			set
			{
				if ((this._Child2Age != value))
				{
					this.OnChild2AgeChanging(value);
					this.SendPropertyChanging();
					this._Child2Age = value;
					this.SendPropertyChanged("Child2Age");
					this.OnChild2AgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Child2SSN", DbType="VarChar(20)")]
		public string Child2SSN
		{
			get
			{
				return this._Child2SSN;
			}
			set
			{
				if ((this._Child2SSN != value))
				{
					this.OnChild2SSNChanging(value);
					this.SendPropertyChanging();
					this._Child2SSN = value;
					this.SendPropertyChanged("Child2SSN");
					this.OnChild2SSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Corba", DbType="VarChar(50)")]
		public string Corba
		{
			get
			{
				return this._Corba;
			}
			set
			{
				if ((this._Corba != value))
				{
					this.OnCorbaChanging(value);
					this.SendPropertyChanging();
					this._Corba = value;
					this.SendPropertyChanged("Corba");
					this.OnCorbaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occupation", DbType="VarChar(100)")]
		public string Occupation
		{
			get
			{
				return this._Occupation;
			}
			set
			{
				if ((this._Occupation != value))
				{
					this.OnOccupationChanging(value);
					this.SendPropertyChanging();
					this._Occupation = value;
					this.SendPropertyChanged("Occupation");
					this.OnOccupationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalaryType", DbType="VarChar(100)")]
		public string SalaryType
		{
			get
			{
				return this._SalaryType;
			}
			set
			{
				if ((this._SalaryType != value))
				{
					this.OnSalaryTypeChanging(value);
					this.SendPropertyChanging();
					this._SalaryType = value;
					this.SendPropertyChanged("SalaryType");
					this.OnSalaryTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModeofSalary", DbType="Int")]
		public System.Nullable<int> ModeofSalary
		{
			get
			{
				return this._ModeofSalary;
			}
			set
			{
				if ((this._ModeofSalary != value))
				{
					if (this._tblModeofSalary.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModeofSalaryChanging(value);
					this.SendPropertyChanging();
					this._ModeofSalary = value;
					this.SendPropertyChanged("ModeofSalary");
					this.OnModeofSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(200)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(200)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityId", DbType="Int")]
		public System.Nullable<int> CityId
		{
			get
			{
				return this._CityId;
			}
			set
			{
				if ((this._CityId != value))
				{
					if (this._tblCity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityIdChanging(value);
					this.SendPropertyChanging();
					this._CityId = value;
					this.SendPropertyChanged("CityId");
					this.OnCityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int")]
		public System.Nullable<int> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._TblState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zipcode", DbType="VarChar(10)")]
		public string Zipcode
		{
			get
			{
				return this._Zipcode;
			}
			set
			{
				if ((this._Zipcode != value))
				{
					this.OnZipcodeChanging(value);
					this.SendPropertyChanging();
					this._Zipcode = value;
					this.SendPropertyChanged("Zipcode");
					this.OnZipcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicalTier", DbType="varchar(20)", CanBeNull=false)]
		public string MedicalTier
		{
			get
			{
				return this._MedicalTier;
			}
			set
			{
				if ((this._MedicalTier != value))
				{
					this.OnMedicalTierChanging(value);
					this.SendPropertyChanging();
					this._MedicalTier = value;
					this.SendPropertyChanged("MedicalTier");
					this.OnMedicalTierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DentalTier", DbType="varchar(20)", CanBeNull=false)]
		public string DentalTier
		{
			get
			{
				return this._DentalTier;
			}
			set
			{
				if ((this._DentalTier != value))
				{
					this.OnDentalTierChanging(value);
					this.SendPropertyChanging();
					this._DentalTier = value;
					this.SendPropertyChanged("DentalTier");
					this.OnDentalTierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisionTier", DbType="varchar(20)", CanBeNull=false)]
		public string VisionTier
		{
			get
			{
				return this._VisionTier;
			}
			set
			{
				if ((this._VisionTier != value))
				{
					this.OnVisionTierChanging(value);
					this.SendPropertyChanging();
					this._VisionTier = value;
					this.SendPropertyChanged("VisionTier");
					this.OnVisionTierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblModeofSalary_tblEmployee", Storage="_tblModeofSalary", ThisKey="ModeofSalary", OtherKey="ID", IsForeignKey=true)]
		public tblModeofSalary tblModeofSalary
		{
			get
			{
				return this._tblModeofSalary.Entity;
			}
			set
			{
				tblModeofSalary previousValue = this._tblModeofSalary.Entity;
				if (((previousValue != value) 
							|| (this._tblModeofSalary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblModeofSalary.Entity = null;
						previousValue.tblEmployees.Remove(this);
					}
					this._tblModeofSalary.Entity = value;
					if ((value != null))
					{
						value.tblEmployees.Add(this);
						this._ModeofSalary = value.ID;
					}
					else
					{
						this._ModeofSalary = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblModeofSalary");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCity_tblEmployee", Storage="_tblCity", ThisKey="CityId", OtherKey="ID", IsForeignKey=true)]
		public tblCity tblCity
		{
			get
			{
				return this._tblCity.Entity;
			}
			set
			{
				tblCity previousValue = this._tblCity.Entity;
				if (((previousValue != value) 
							|| (this._tblCity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCity.Entity = null;
						previousValue.tblEmployees.Remove(this);
					}
					this._tblCity.Entity = value;
					if ((value != null))
					{
						value.tblEmployees.Add(this);
						this._CityId = value.ID;
					}
					else
					{
						this._CityId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblCity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_tblEmployee", Storage="_TblState", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public TblState TblState
		{
			get
			{
				return this._TblState.Entity;
			}
			set
			{
				TblState previousValue = this._TblState.Entity;
				if (((previousValue != value) 
							|| (this._TblState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblState.Entity = null;
						previousValue.tblEmployees.Remove(this);
					}
					this._TblState.Entity = value;
					if ((value != null))
					{
						value.tblEmployees.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblGender_tblEmployee", Storage="_tblGender", ThisKey="Gender", OtherKey="ID", IsForeignKey=true)]
		public tblGender tblGender
		{
			get
			{
				return this._tblGender.Entity;
			}
			set
			{
				tblGender previousValue = this._tblGender.Entity;
				if (((previousValue != value) 
							|| (this._tblGender.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblGender.Entity = null;
						previousValue.tblEmployees.Remove(this);
					}
					this._tblGender.Entity = value;
					if ((value != null))
					{
						value.tblEmployees.Add(this);
						this._Gender = value.ID;
					}
					else
					{
						this._Gender = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblGender");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClientGroup_tblEmployee", Storage="_tblClientGroup", ThisKey="GroupID", OtherKey="ID", IsForeignKey=true)]
		public tblClientGroup tblClientGroup
		{
			get
			{
				return this._tblClientGroup.Entity;
			}
			set
			{
				tblClientGroup previousValue = this._tblClientGroup.Entity;
				if (((previousValue != value) 
							|| (this._tblClientGroup.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblClientGroup.Entity = null;
						previousValue.tblEmployees.Remove(this);
					}
					this._tblClientGroup.Entity = value;
					if ((value != null))
					{
						value.tblEmployees.Add(this);
						this._GroupID = value.ID;
					}
					else
					{
						this._GroupID = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblClientGroup");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblCounty")]
	public partial class TblCounty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountyId;
		
		private string _CountyCode;
		
		private string _CountyName;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _updatedOn;
		
		private EntitySet<tblRate> _tblRates;
		
		private EntitySet<tblRate> _tblRates1;
		
		private EntitySet<tblPolicyRate> _tblPolicyRates;
		
		private EntitySet<tblPolicyRate> _tblPolicyRates1;
		
		private EntitySet<TblSubpoenaFrm> _TblSubpoenaFrms;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountyIdChanging(int value);
    partial void OnCountyIdChanged();
    partial void OnCountyCodeChanging(string value);
    partial void OnCountyCodeChanged();
    partial void OnCountyNameChanging(string value);
    partial void OnCountyNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnupdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnupdatedOnChanged();
    #endregion
		
		public TblCounty()
		{
			this._tblRates = new EntitySet<tblRate>(new Action<tblRate>(this.attach_tblRates), new Action<tblRate>(this.detach_tblRates));
			this._tblRates1 = new EntitySet<tblRate>(new Action<tblRate>(this.attach_tblRates1), new Action<tblRate>(this.detach_tblRates1));
			this._tblPolicyRates = new EntitySet<tblPolicyRate>(new Action<tblPolicyRate>(this.attach_tblPolicyRates), new Action<tblPolicyRate>(this.detach_tblPolicyRates));
			this._tblPolicyRates1 = new EntitySet<tblPolicyRate>(new Action<tblPolicyRate>(this.attach_tblPolicyRates1), new Action<tblPolicyRate>(this.detach_tblPolicyRates1));
			this._TblSubpoenaFrms = new EntitySet<TblSubpoenaFrm>(new Action<TblSubpoenaFrm>(this.attach_TblSubpoenaFrms), new Action<TblSubpoenaFrm>(this.detach_TblSubpoenaFrms));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountyId
		{
			get
			{
				return this._CountyId;
			}
			set
			{
				if ((this._CountyId != value))
				{
					this.OnCountyIdChanging(value);
					this.SendPropertyChanging();
					this._CountyId = value;
					this.SendPropertyChanged("CountyId");
					this.OnCountyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyCode", DbType="VarChar(50)")]
		public string CountyCode
		{
			get
			{
				return this._CountyCode;
			}
			set
			{
				if ((this._CountyCode != value))
				{
					this.OnCountyCodeChanging(value);
					this.SendPropertyChanging();
					this._CountyCode = value;
					this.SendPropertyChanged("CountyCode");
					this.OnCountyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyName", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string CountyName
		{
			get
			{
				return this._CountyName;
			}
			set
			{
				if ((this._CountyName != value))
				{
					this.OnCountyNameChanging(value);
					this.SendPropertyChanging();
					this._CountyName = value;
					this.SendPropertyChanged("CountyName");
					this.OnCountyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_updatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> updatedOn
		{
			get
			{
				return this._updatedOn;
			}
			set
			{
				if ((this._updatedOn != value))
				{
					this.OnupdatedOnChanging(value);
					this.SendPropertyChanging();
					this._updatedOn = value;
					this.SendPropertyChanged("updatedOn");
					this.OnupdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblCounty_tblRate", Storage="_tblRates", ThisKey="CountyId", OtherKey="CountyId")]
		public EntitySet<tblRate> tblRates
		{
			get
			{
				return this._tblRates;
			}
			set
			{
				this._tblRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblCounty_tblRate1", Storage="_tblRates1", ThisKey="CountyId", OtherKey="CountyId")]
		public EntitySet<tblRate> tblRates1
		{
			get
			{
				return this._tblRates1;
			}
			set
			{
				this._tblRates1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblCounty_tblPolicyRate", Storage="_tblPolicyRates", ThisKey="CountyId", OtherKey="CountyId")]
		public EntitySet<tblPolicyRate> tblPolicyRates
		{
			get
			{
				return this._tblPolicyRates;
			}
			set
			{
				this._tblPolicyRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblCounty_tblPolicyRate1", Storage="_tblPolicyRates1", ThisKey="CountyId", OtherKey="CountyId")]
		public EntitySet<tblPolicyRate> tblPolicyRates1
		{
			get
			{
				return this._tblPolicyRates1;
			}
			set
			{
				this._tblPolicyRates1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblCounty_TblSubpoenaFrm", Storage="_TblSubpoenaFrms", ThisKey="CountyId", OtherKey="CountyId")]
		public EntitySet<TblSubpoenaFrm> TblSubpoenaFrms
		{
			get
			{
				return this._TblSubpoenaFrms;
			}
			set
			{
				this._TblSubpoenaFrms.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblRates(tblRate entity)
		{
			this.SendPropertyChanging();
			entity.TblCounty = this;
		}
		
		private void detach_tblRates(tblRate entity)
		{
			this.SendPropertyChanging();
			entity.TblCounty = null;
		}
		
		private void attach_tblRates1(tblRate entity)
		{
			this.SendPropertyChanging();
			entity.TblCounty1 = this;
		}
		
		private void detach_tblRates1(tblRate entity)
		{
			this.SendPropertyChanging();
			entity.TblCounty1 = null;
		}
		
		private void attach_tblPolicyRates(tblPolicyRate entity)
		{
			this.SendPropertyChanging();
			entity.TblCounty = this;
		}
		
		private void detach_tblPolicyRates(tblPolicyRate entity)
		{
			this.SendPropertyChanging();
			entity.TblCounty = null;
		}
		
		private void attach_tblPolicyRates1(tblPolicyRate entity)
		{
			this.SendPropertyChanging();
			entity.TblCounty1 = this;
		}
		
		private void detach_tblPolicyRates1(tblPolicyRate entity)
		{
			this.SendPropertyChanging();
			entity.TblCounty1 = null;
		}
		
		private void attach_TblSubpoenaFrms(TblSubpoenaFrm entity)
		{
			this.SendPropertyChanging();
			entity.TblCounty = this;
		}
		
		private void detach_TblSubpoenaFrms(TblSubpoenaFrm entity)
		{
			this.SendPropertyChanging();
			entity.TblCounty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblCountry")]
	public partial class TblCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryId;
		
		private string _CountryCode;
		
		private string _CountryName;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private EntitySet<TblGroupCreation> _TblGroupCreations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIdChanging(int value);
    partial void OnCountryIdChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnCountryNameChanging(string value);
    partial void OnCountryNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public TblCountry()
		{
			this._TblGroupCreations = new EntitySet<TblGroupCreation>(new Action<TblGroupCreation>(this.attach_TblGroupCreations), new Action<TblGroupCreation>(this.detach_TblGroupCreations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryCode", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CountryName
		{
			get
			{
				return this._CountryName;
			}
			set
			{
				if ((this._CountryName != value))
				{
					this.OnCountryNameChanging(value);
					this.SendPropertyChanging();
					this._CountryName = value;
					this.SendPropertyChanged("CountryName");
					this.OnCountryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblCountry_TblGroupCreation", Storage="_TblGroupCreations", ThisKey="CountryId", OtherKey="CountryId")]
		public EntitySet<TblGroupCreation> TblGroupCreations
		{
			get
			{
				return this._TblGroupCreations;
			}
			set
			{
				this._TblGroupCreations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblGroupCreations(TblGroupCreation entity)
		{
			this.SendPropertyChanging();
			entity.TblCountry = this;
		}
		
		private void detach_TblGroupCreations(TblGroupCreation entity)
		{
			this.SendPropertyChanging();
			entity.TblCountry = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblClientGroup")]
	public partial class tblClientGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _GrpName;
		
		private string _NatureofBusiness;
		
		private string _En;
		
		private string _NacSscCode;
		
		private System.Nullable<System.DateTime> _RequestEnDt;
		
		private string _ClientLogo;
		
		private string _Address1;
		
		private string _Address2;
		
		private System.Nullable<int> _city;
		
		private System.Nullable<int> _State;
		
		private string _Zipcode;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedNo;
		
		private EntitySet<tblEmployee> _tblEmployees;
		
		private EntityRef<TblState> _TblState;
		
		private EntityRef<tblCity> _tblCity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnGrpNameChanging(string value);
    partial void OnGrpNameChanged();
    partial void OnNatureofBusinessChanging(string value);
    partial void OnNatureofBusinessChanged();
    partial void OnEnChanging(string value);
    partial void OnEnChanged();
    partial void OnNacSscCodeChanging(string value);
    partial void OnNacSscCodeChanged();
    partial void OnRequestEnDtChanging(System.Nullable<System.DateTime> value);
    partial void OnRequestEnDtChanged();
    partial void OnClientLogoChanging(string value);
    partial void OnClientLogoChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OncityChanging(System.Nullable<int> value);
    partial void OncityChanged();
    partial void OnStateChanging(System.Nullable<int> value);
    partial void OnStateChanged();
    partial void OnZipcodeChanging(string value);
    partial void OnZipcodeChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedNoChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedNoChanged();
    #endregion
		
		public tblClientGroup()
		{
			this._tblEmployees = new EntitySet<tblEmployee>(new Action<tblEmployee>(this.attach_tblEmployees), new Action<tblEmployee>(this.detach_tblEmployees));
			this._TblState = default(EntityRef<TblState>);
			this._tblCity = default(EntityRef<tblCity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GrpName", DbType="VarChar(100)")]
		public string GrpName
		{
			get
			{
				return this._GrpName;
			}
			set
			{
				if ((this._GrpName != value))
				{
					this.OnGrpNameChanging(value);
					this.SendPropertyChanging();
					this._GrpName = value;
					this.SendPropertyChanged("GrpName");
					this.OnGrpNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NatureofBusiness", DbType="VarChar(100)")]
		public string NatureofBusiness
		{
			get
			{
				return this._NatureofBusiness;
			}
			set
			{
				if ((this._NatureofBusiness != value))
				{
					this.OnNatureofBusinessChanging(value);
					this.SendPropertyChanging();
					this._NatureofBusiness = value;
					this.SendPropertyChanged("NatureofBusiness");
					this.OnNatureofBusinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_En", DbType="VarChar(50)")]
		public string En
		{
			get
			{
				return this._En;
			}
			set
			{
				if ((this._En != value))
				{
					this.OnEnChanging(value);
					this.SendPropertyChanging();
					this._En = value;
					this.SendPropertyChanged("En");
					this.OnEnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NacSscCode", DbType="VarChar(50)")]
		public string NacSscCode
		{
			get
			{
				return this._NacSscCode;
			}
			set
			{
				if ((this._NacSscCode != value))
				{
					this.OnNacSscCodeChanging(value);
					this.SendPropertyChanging();
					this._NacSscCode = value;
					this.SendPropertyChanged("NacSscCode");
					this.OnNacSscCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestEnDt", DbType="DateTime")]
		public System.Nullable<System.DateTime> RequestEnDt
		{
			get
			{
				return this._RequestEnDt;
			}
			set
			{
				if ((this._RequestEnDt != value))
				{
					this.OnRequestEnDtChanging(value);
					this.SendPropertyChanging();
					this._RequestEnDt = value;
					this.SendPropertyChanged("RequestEnDt");
					this.OnRequestEnDtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientLogo", DbType="VarChar(100)")]
		public string ClientLogo
		{
			get
			{
				return this._ClientLogo;
			}
			set
			{
				if ((this._ClientLogo != value))
				{
					this.OnClientLogoChanging(value);
					this.SendPropertyChanging();
					this._ClientLogo = value;
					this.SendPropertyChanged("ClientLogo");
					this.OnClientLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="VarChar(200)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="VarChar(100)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_city", DbType="Int")]
		public System.Nullable<int> city
		{
			get
			{
				return this._city;
			}
			set
			{
				if ((this._city != value))
				{
					if (this._tblCity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncityChanging(value);
					this.SendPropertyChanging();
					this._city = value;
					this.SendPropertyChanged("city");
					this.OncityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int")]
		public System.Nullable<int> State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					if (this._TblState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zipcode", DbType="VarChar(50)")]
		public string Zipcode
		{
			get
			{
				return this._Zipcode;
			}
			set
			{
				if ((this._Zipcode != value))
				{
					this.OnZipcodeChanging(value);
					this.SendPropertyChanging();
					this._Zipcode = value;
					this.SendPropertyChanged("Zipcode");
					this.OnZipcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedNo", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedNo
		{
			get
			{
				return this._UpdatedNo;
			}
			set
			{
				if ((this._UpdatedNo != value))
				{
					this.OnUpdatedNoChanging(value);
					this.SendPropertyChanging();
					this._UpdatedNo = value;
					this.SendPropertyChanged("UpdatedNo");
					this.OnUpdatedNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClientGroup_tblEmployee", Storage="_tblEmployees", ThisKey="ID", OtherKey="GroupID")]
		public EntitySet<tblEmployee> tblEmployees
		{
			get
			{
				return this._tblEmployees;
			}
			set
			{
				this._tblEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_tblClientGroup", Storage="_TblState", ThisKey="State", OtherKey="StateId", IsForeignKey=true)]
		public TblState TblState
		{
			get
			{
				return this._TblState.Entity;
			}
			set
			{
				TblState previousValue = this._TblState.Entity;
				if (((previousValue != value) 
							|| (this._TblState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblState.Entity = null;
						previousValue.tblClientGroups.Remove(this);
					}
					this._TblState.Entity = value;
					if ((value != null))
					{
						value.tblClientGroups.Add(this);
						this._State = value.StateId;
					}
					else
					{
						this._State = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCity_tblClientGroup", Storage="_tblCity", ThisKey="city", OtherKey="ID", IsForeignKey=true)]
		public tblCity tblCity
		{
			get
			{
				return this._tblCity.Entity;
			}
			set
			{
				tblCity previousValue = this._tblCity.Entity;
				if (((previousValue != value) 
							|| (this._tblCity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCity.Entity = null;
						previousValue.tblClientGroups.Remove(this);
					}
					this._tblCity.Entity = value;
					if ((value != null))
					{
						value.tblClientGroups.Add(this);
						this._city = value.ID;
					}
					else
					{
						this._city = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblCity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblEmployees(tblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.tblClientGroup = this;
		}
		
		private void detach_tblEmployees(tblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.tblClientGroup = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblCity")]
	public partial class tblCity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CityName;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private EntitySet<tblEmployee> _tblEmployees;
		
		private EntitySet<tblClientGroup> _tblClientGroups;
		
		private EntitySet<tblBrokerageMaster> _tblBrokerageMasters;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCityNameChanging(string value);
    partial void OnCityNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblCity()
		{
			this._tblEmployees = new EntitySet<tblEmployee>(new Action<tblEmployee>(this.attach_tblEmployees), new Action<tblEmployee>(this.detach_tblEmployees));
			this._tblClientGroups = new EntitySet<tblClientGroup>(new Action<tblClientGroup>(this.attach_tblClientGroups), new Action<tblClientGroup>(this.detach_tblClientGroups));
			this._tblBrokerageMasters = new EntitySet<tblBrokerageMaster>(new Action<tblBrokerageMaster>(this.attach_tblBrokerageMasters), new Action<tblBrokerageMaster>(this.detach_tblBrokerageMasters));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CityName", DbType="VarChar(100)")]
		public string CityName
		{
			get
			{
				return this._CityName;
			}
			set
			{
				if ((this._CityName != value))
				{
					this.OnCityNameChanging(value);
					this.SendPropertyChanging();
					this._CityName = value;
					this.SendPropertyChanged("CityName");
					this.OnCityNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCity_tblEmployee", Storage="_tblEmployees", ThisKey="ID", OtherKey="CityId")]
		public EntitySet<tblEmployee> tblEmployees
		{
			get
			{
				return this._tblEmployees;
			}
			set
			{
				this._tblEmployees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCity_tblClientGroup", Storage="_tblClientGroups", ThisKey="ID", OtherKey="city")]
		public EntitySet<tblClientGroup> tblClientGroups
		{
			get
			{
				return this._tblClientGroups;
			}
			set
			{
				this._tblClientGroups.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCity_tblBrokerageMaster", Storage="_tblBrokerageMasters", ThisKey="ID", OtherKey="City")]
		public EntitySet<tblBrokerageMaster> tblBrokerageMasters
		{
			get
			{
				return this._tblBrokerageMasters;
			}
			set
			{
				this._tblBrokerageMasters.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblEmployees(tblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.tblCity = this;
		}
		
		private void detach_tblEmployees(tblEmployee entity)
		{
			this.SendPropertyChanging();
			entity.tblCity = null;
		}
		
		private void attach_tblClientGroups(tblClientGroup entity)
		{
			this.SendPropertyChanging();
			entity.tblCity = this;
		}
		
		private void detach_tblClientGroups(tblClientGroup entity)
		{
			this.SendPropertyChanging();
			entity.tblCity = null;
		}
		
		private void attach_tblBrokerageMasters(tblBrokerageMaster entity)
		{
			this.SendPropertyChanging();
			entity.tblCity = this;
		}
		
		private void detach_tblBrokerageMasters(tblBrokerageMaster entity)
		{
			this.SendPropertyChanging();
			entity.tblCity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblBrokerageMaster")]
	public partial class tblBrokerageMaster : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ContactName;
		
		private string _TaxSSN;
		
		private string _ContactPhone;
		
		private string _Addr1;
		
		private string _Addr2;
		
		private System.Nullable<int> _City;
		
		private System.Nullable<int> _StateID;
		
		private string _Zip;
		
		private string _CompanyLogo;
		
		private string _CompanyUrl;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private EntityRef<TblState> _TblState;
		
		private EntityRef<tblCity> _tblCity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnTaxSSNChanging(string value);
    partial void OnTaxSSNChanged();
    partial void OnContactPhoneChanging(string value);
    partial void OnContactPhoneChanged();
    partial void OnAddr1Changing(string value);
    partial void OnAddr1Changed();
    partial void OnAddr2Changing(string value);
    partial void OnAddr2Changed();
    partial void OnCityChanging(System.Nullable<int> value);
    partial void OnCityChanged();
    partial void OnStateIDChanging(System.Nullable<int> value);
    partial void OnStateIDChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnCompanyLogoChanging(string value);
    partial void OnCompanyLogoChanged();
    partial void OnCompanyUrlChanging(string value);
    partial void OnCompanyUrlChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblBrokerageMaster()
		{
			this._TblState = default(EntityRef<TblState>);
			this._tblCity = default(EntityRef<tblCity>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="VarChar(500)")]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxSSN", DbType="VarChar(20)")]
		public string TaxSSN
		{
			get
			{
				return this._TaxSSN;
			}
			set
			{
				if ((this._TaxSSN != value))
				{
					this.OnTaxSSNChanging(value);
					this.SendPropertyChanging();
					this._TaxSSN = value;
					this.SendPropertyChanged("TaxSSN");
					this.OnTaxSSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPhone", DbType="VarChar(50)")]
		public string ContactPhone
		{
			get
			{
				return this._ContactPhone;
			}
			set
			{
				if ((this._ContactPhone != value))
				{
					this.OnContactPhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactPhone = value;
					this.SendPropertyChanged("ContactPhone");
					this.OnContactPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Addr1", DbType="VarChar(100)")]
		public string Addr1
		{
			get
			{
				return this._Addr1;
			}
			set
			{
				if ((this._Addr1 != value))
				{
					this.OnAddr1Changing(value);
					this.SendPropertyChanging();
					this._Addr1 = value;
					this.SendPropertyChanged("Addr1");
					this.OnAddr1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Addr2", DbType="VarChar(100)")]
		public string Addr2
		{
			get
			{
				return this._Addr2;
			}
			set
			{
				if ((this._Addr2 != value))
				{
					this.OnAddr2Changing(value);
					this.SendPropertyChanging();
					this._Addr2 = value;
					this.SendPropertyChanged("Addr2");
					this.OnAddr2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="Int")]
		public System.Nullable<int> City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					if (this._tblCity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateID", DbType="Int")]
		public System.Nullable<int> StateID
		{
			get
			{
				return this._StateID;
			}
			set
			{
				if ((this._StateID != value))
				{
					if (this._TblState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIDChanging(value);
					this.SendPropertyChanging();
					this._StateID = value;
					this.SendPropertyChanged("StateID");
					this.OnStateIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(50)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyLogo", DbType="NVarChar(MAX)")]
		public string CompanyLogo
		{
			get
			{
				return this._CompanyLogo;
			}
			set
			{
				if ((this._CompanyLogo != value))
				{
					this.OnCompanyLogoChanging(value);
					this.SendPropertyChanging();
					this._CompanyLogo = value;
					this.SendPropertyChanged("CompanyLogo");
					this.OnCompanyLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyUrl", DbType="VarChar(200)")]
		public string CompanyUrl
		{
			get
			{
				return this._CompanyUrl;
			}
			set
			{
				if ((this._CompanyUrl != value))
				{
					this.OnCompanyUrlChanging(value);
					this.SendPropertyChanging();
					this._CompanyUrl = value;
					this.SendPropertyChanged("CompanyUrl");
					this.OnCompanyUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_tblBrokerageMaster", Storage="_TblState", ThisKey="StateID", OtherKey="StateId", IsForeignKey=true)]
		public TblState TblState
		{
			get
			{
				return this._TblState.Entity;
			}
			set
			{
				TblState previousValue = this._TblState.Entity;
				if (((previousValue != value) 
							|| (this._TblState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblState.Entity = null;
						previousValue.tblBrokerageMasters.Remove(this);
					}
					this._TblState.Entity = value;
					if ((value != null))
					{
						value.tblBrokerageMasters.Add(this);
						this._StateID = value.StateId;
					}
					else
					{
						this._StateID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblCity_tblBrokerageMaster", Storage="_tblCity", ThisKey="City", OtherKey="ID", IsForeignKey=true)]
		public tblCity tblCity
		{
			get
			{
				return this._tblCity.Entity;
			}
			set
			{
				tblCity previousValue = this._tblCity.Entity;
				if (((previousValue != value) 
							|| (this._tblCity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblCity.Entity = null;
						previousValue.tblBrokerageMasters.Remove(this);
					}
					this._tblCity.Entity = value;
					if ((value != null))
					{
						value.tblBrokerageMasters.Add(this);
						this._City = value.ID;
					}
					else
					{
						this._City = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblCity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblBenefitPlan")]
	public partial class tblBenefitPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Carrier;
		
		private string _PlanType;
		
		private string _Currency;
		
		private string _PhysicalCoPay;
		
		private System.Nullable<decimal> _IndividualDeductble;
		
		private System.Nullable<decimal> _FamilyDeductble;
		
		private string _CoInsurance;
		
		private System.Nullable<decimal> _IndvOutofPocketMax;
		
		private System.Nullable<decimal> _FamilyOutofPocketMax;
		
		private string _Network;
		
		private string _MRICTScam;
		
		private string _PrescriptionCopy;
		
		private string _UrgentCareCopy;
		
		private string _EmergencyRoomCopy;
		
		private System.Nullable<decimal> _PharmacyDeductible;
		
		private string _LifetimeMax;
		
		private string _ToWebbassedDoctor;
		
		private string _PlanDescription;
		
		private string _PlanCode;
		
		private bool _Active;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.DateTime _UpdatedOn;
		
		private EntitySet<tblRate> _tblRates;
		
		private EntitySet<tblPolicyRate> _tblPolicyRates;
		
		private EntitySet<tblDentalPlan> _tblDentalPlans;
		
		private EntitySet<tblDentalPlan> _tblDentalPlans1;
		
		private EntitySet<tblDentalPlanRate> _tblDentalPlanRates;
		
		private EntitySet<tblDentalPlanRate> _tblDentalPlanRates1;
		
		private EntitySet<tblVisionPlan> _tblVisionPlans;
		
		private EntitySet<tblVisionPlan> _tblVisionPlans1;
		
		private EntitySet<tblVisionPlanRate> _tblVisionPlanRates;
		
		private EntitySet<tblVisionPlanRate> _tblVisionPlanRates1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCarrierChanging(string value);
    partial void OnCarrierChanged();
    partial void OnPlanTypeChanging(string value);
    partial void OnPlanTypeChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    partial void OnPhysicalCoPayChanging(string value);
    partial void OnPhysicalCoPayChanged();
    partial void OnIndividualDeductbleChanging(System.Nullable<decimal> value);
    partial void OnIndividualDeductbleChanged();
    partial void OnFamilyDeductbleChanging(System.Nullable<decimal> value);
    partial void OnFamilyDeductbleChanged();
    partial void OnCoInsuranceChanging(string value);
    partial void OnCoInsuranceChanged();
    partial void OnIndvOutofPocketMaxChanging(System.Nullable<decimal> value);
    partial void OnIndvOutofPocketMaxChanged();
    partial void OnFamilyOutofPocketMaxChanging(System.Nullable<decimal> value);
    partial void OnFamilyOutofPocketMaxChanged();
    partial void OnNetworkChanging(string value);
    partial void OnNetworkChanged();
    partial void OnMRICTScamChanging(string value);
    partial void OnMRICTScamChanged();
    partial void OnPrescriptionCopyChanging(string value);
    partial void OnPrescriptionCopyChanged();
    partial void OnUrgentCareCopyChanging(string value);
    partial void OnUrgentCareCopyChanged();
    partial void OnEmergencyRoomCopyChanging(string value);
    partial void OnEmergencyRoomCopyChanged();
    partial void OnPharmacyDeductibleChanging(System.Nullable<decimal> value);
    partial void OnPharmacyDeductibleChanged();
    partial void OnLifetimeMaxChanging(string value);
    partial void OnLifetimeMaxChanged();
    partial void OnToWebbassedDoctorChanging(string value);
    partial void OnToWebbassedDoctorChanged();
    partial void OnPlanDescriptionChanging(string value);
    partial void OnPlanDescriptionChanged();
    partial void OnPlanCodeChanging(string value);
    partial void OnPlanCodeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.DateTime value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblBenefitPlan()
		{
			this._tblRates = new EntitySet<tblRate>(new Action<tblRate>(this.attach_tblRates), new Action<tblRate>(this.detach_tblRates));
			this._tblPolicyRates = new EntitySet<tblPolicyRate>(new Action<tblPolicyRate>(this.attach_tblPolicyRates), new Action<tblPolicyRate>(this.detach_tblPolicyRates));
			this._tblDentalPlans = new EntitySet<tblDentalPlan>(new Action<tblDentalPlan>(this.attach_tblDentalPlans), new Action<tblDentalPlan>(this.detach_tblDentalPlans));
			this._tblDentalPlans1 = new EntitySet<tblDentalPlan>(new Action<tblDentalPlan>(this.attach_tblDentalPlans1), new Action<tblDentalPlan>(this.detach_tblDentalPlans1));
			this._tblDentalPlanRates = new EntitySet<tblDentalPlanRate>(new Action<tblDentalPlanRate>(this.attach_tblDentalPlanRates), new Action<tblDentalPlanRate>(this.detach_tblDentalPlanRates));
			this._tblDentalPlanRates1 = new EntitySet<tblDentalPlanRate>(new Action<tblDentalPlanRate>(this.attach_tblDentalPlanRates1), new Action<tblDentalPlanRate>(this.detach_tblDentalPlanRates1));
			this._tblVisionPlans = new EntitySet<tblVisionPlan>(new Action<tblVisionPlan>(this.attach_tblVisionPlans), new Action<tblVisionPlan>(this.detach_tblVisionPlans));
			this._tblVisionPlans1 = new EntitySet<tblVisionPlan>(new Action<tblVisionPlan>(this.attach_tblVisionPlans1), new Action<tblVisionPlan>(this.detach_tblVisionPlans1));
			this._tblVisionPlanRates = new EntitySet<tblVisionPlanRate>(new Action<tblVisionPlanRate>(this.attach_tblVisionPlanRates), new Action<tblVisionPlanRate>(this.detach_tblVisionPlanRates));
			this._tblVisionPlanRates1 = new EntitySet<tblVisionPlanRate>(new Action<tblVisionPlanRate>(this.attach_tblVisionPlanRates1), new Action<tblVisionPlanRate>(this.detach_tblVisionPlanRates1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Carrier", DbType="VarChar(100)")]
		public string Carrier
		{
			get
			{
				return this._Carrier;
			}
			set
			{
				if ((this._Carrier != value))
				{
					this.OnCarrierChanging(value);
					this.SendPropertyChanging();
					this._Carrier = value;
					this.SendPropertyChanged("Carrier");
					this.OnCarrierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanType", DbType="VarChar(100)")]
		public string PlanType
		{
			get
			{
				return this._PlanType;
			}
			set
			{
				if ((this._PlanType != value))
				{
					this.OnPlanTypeChanging(value);
					this.SendPropertyChanging();
					this._PlanType = value;
					this.SendPropertyChanged("PlanType");
					this.OnPlanTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="VarChar(50)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhysicalCoPay", DbType="VarChar(50)")]
		public string PhysicalCoPay
		{
			get
			{
				return this._PhysicalCoPay;
			}
			set
			{
				if ((this._PhysicalCoPay != value))
				{
					this.OnPhysicalCoPayChanging(value);
					this.SendPropertyChanging();
					this._PhysicalCoPay = value;
					this.SendPropertyChanged("PhysicalCoPay");
					this.OnPhysicalCoPayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndividualDeductble", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> IndividualDeductble
		{
			get
			{
				return this._IndividualDeductble;
			}
			set
			{
				if ((this._IndividualDeductble != value))
				{
					this.OnIndividualDeductbleChanging(value);
					this.SendPropertyChanging();
					this._IndividualDeductble = value;
					this.SendPropertyChanged("IndividualDeductble");
					this.OnIndividualDeductbleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyDeductble", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> FamilyDeductble
		{
			get
			{
				return this._FamilyDeductble;
			}
			set
			{
				if ((this._FamilyDeductble != value))
				{
					this.OnFamilyDeductbleChanging(value);
					this.SendPropertyChanging();
					this._FamilyDeductble = value;
					this.SendPropertyChanged("FamilyDeductble");
					this.OnFamilyDeductbleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoInsurance", DbType="VarChar(25)")]
		public string CoInsurance
		{
			get
			{
				return this._CoInsurance;
			}
			set
			{
				if ((this._CoInsurance != value))
				{
					this.OnCoInsuranceChanging(value);
					this.SendPropertyChanging();
					this._CoInsurance = value;
					this.SendPropertyChanged("CoInsurance");
					this.OnCoInsuranceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndvOutofPocketMax", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> IndvOutofPocketMax
		{
			get
			{
				return this._IndvOutofPocketMax;
			}
			set
			{
				if ((this._IndvOutofPocketMax != value))
				{
					this.OnIndvOutofPocketMaxChanging(value);
					this.SendPropertyChanging();
					this._IndvOutofPocketMax = value;
					this.SendPropertyChanged("IndvOutofPocketMax");
					this.OnIndvOutofPocketMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FamilyOutofPocketMax", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> FamilyOutofPocketMax
		{
			get
			{
				return this._FamilyOutofPocketMax;
			}
			set
			{
				if ((this._FamilyOutofPocketMax != value))
				{
					this.OnFamilyOutofPocketMaxChanging(value);
					this.SendPropertyChanging();
					this._FamilyOutofPocketMax = value;
					this.SendPropertyChanged("FamilyOutofPocketMax");
					this.OnFamilyOutofPocketMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Network", DbType="VarChar(50)")]
		public string Network
		{
			get
			{
				return this._Network;
			}
			set
			{
				if ((this._Network != value))
				{
					this.OnNetworkChanging(value);
					this.SendPropertyChanging();
					this._Network = value;
					this.SendPropertyChanged("Network");
					this.OnNetworkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MRICTScam", DbType="VarChar(100)")]
		public string MRICTScam
		{
			get
			{
				return this._MRICTScam;
			}
			set
			{
				if ((this._MRICTScam != value))
				{
					this.OnMRICTScamChanging(value);
					this.SendPropertyChanging();
					this._MRICTScam = value;
					this.SendPropertyChanged("MRICTScam");
					this.OnMRICTScamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionCopy", DbType="VarChar(100)")]
		public string PrescriptionCopy
		{
			get
			{
				return this._PrescriptionCopy;
			}
			set
			{
				if ((this._PrescriptionCopy != value))
				{
					this.OnPrescriptionCopyChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionCopy = value;
					this.SendPropertyChanged("PrescriptionCopy");
					this.OnPrescriptionCopyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UrgentCareCopy", DbType="VarChar(50)")]
		public string UrgentCareCopy
		{
			get
			{
				return this._UrgentCareCopy;
			}
			set
			{
				if ((this._UrgentCareCopy != value))
				{
					this.OnUrgentCareCopyChanging(value);
					this.SendPropertyChanging();
					this._UrgentCareCopy = value;
					this.SendPropertyChanged("UrgentCareCopy");
					this.OnUrgentCareCopyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmergencyRoomCopy", DbType="VarChar(50)")]
		public string EmergencyRoomCopy
		{
			get
			{
				return this._EmergencyRoomCopy;
			}
			set
			{
				if ((this._EmergencyRoomCopy != value))
				{
					this.OnEmergencyRoomCopyChanging(value);
					this.SendPropertyChanging();
					this._EmergencyRoomCopy = value;
					this.SendPropertyChanged("EmergencyRoomCopy");
					this.OnEmergencyRoomCopyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PharmacyDeductible", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> PharmacyDeductible
		{
			get
			{
				return this._PharmacyDeductible;
			}
			set
			{
				if ((this._PharmacyDeductible != value))
				{
					this.OnPharmacyDeductibleChanging(value);
					this.SendPropertyChanging();
					this._PharmacyDeductible = value;
					this.SendPropertyChanged("PharmacyDeductible");
					this.OnPharmacyDeductibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LifetimeMax", DbType="VarChar(50)")]
		public string LifetimeMax
		{
			get
			{
				return this._LifetimeMax;
			}
			set
			{
				if ((this._LifetimeMax != value))
				{
					this.OnLifetimeMaxChanging(value);
					this.SendPropertyChanging();
					this._LifetimeMax = value;
					this.SendPropertyChanged("LifetimeMax");
					this.OnLifetimeMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToWebbassedDoctor", DbType="VarChar(100)")]
		public string ToWebbassedDoctor
		{
			get
			{
				return this._ToWebbassedDoctor;
			}
			set
			{
				if ((this._ToWebbassedDoctor != value))
				{
					this.OnToWebbassedDoctorChanging(value);
					this.SendPropertyChanging();
					this._ToWebbassedDoctor = value;
					this.SendPropertyChanged("ToWebbassedDoctor");
					this.OnToWebbassedDoctorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanDescription", DbType="VarChar(200)")]
		public string PlanDescription
		{
			get
			{
				return this._PlanDescription;
			}
			set
			{
				if ((this._PlanDescription != value))
				{
					this.OnPlanDescriptionChanging(value);
					this.SendPropertyChanging();
					this._PlanDescription = value;
					this.SendPropertyChanged("PlanDescription");
					this.OnPlanDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanCode", DbType="VarChar(25)")]
		public string PlanCode
		{
			get
			{
				return this._PlanCode;
			}
			set
			{
				if ((this._PlanCode != value))
				{
					this.OnPlanCodeChanging(value);
					this.SendPropertyChanging();
					this._PlanCode = value;
					this.SendPropertyChanged("PlanCode");
					this.OnPlanCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblRate", Storage="_tblRates", ThisKey="ID", OtherKey="CarrierId")]
		public EntitySet<tblRate> tblRates
		{
			get
			{
				return this._tblRates;
			}
			set
			{
				this._tblRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblPolicyRate", Storage="_tblPolicyRates", ThisKey="ID", OtherKey="CarrierId")]
		public EntitySet<tblPolicyRate> tblPolicyRates
		{
			get
			{
				return this._tblPolicyRates;
			}
			set
			{
				this._tblPolicyRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblDentalPlan", Storage="_tblDentalPlans", ThisKey="ID", OtherKey="CarrierId")]
		public EntitySet<tblDentalPlan> tblDentalPlans
		{
			get
			{
				return this._tblDentalPlans;
			}
			set
			{
				this._tblDentalPlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblDentalPlan1", Storage="_tblDentalPlans1", ThisKey="ID", OtherKey="PlanCode")]
		public EntitySet<tblDentalPlan> tblDentalPlans1
		{
			get
			{
				return this._tblDentalPlans1;
			}
			set
			{
				this._tblDentalPlans1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblDentalPlanRate", Storage="_tblDentalPlanRates", ThisKey="ID", OtherKey="CarrierId")]
		public EntitySet<tblDentalPlanRate> tblDentalPlanRates
		{
			get
			{
				return this._tblDentalPlanRates;
			}
			set
			{
				this._tblDentalPlanRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblDentalPlanRate1", Storage="_tblDentalPlanRates1", ThisKey="ID", OtherKey="PlanCode")]
		public EntitySet<tblDentalPlanRate> tblDentalPlanRates1
		{
			get
			{
				return this._tblDentalPlanRates1;
			}
			set
			{
				this._tblDentalPlanRates1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblVisionPlan", Storage="_tblVisionPlans", ThisKey="ID", OtherKey="CarrierId")]
		public EntitySet<tblVisionPlan> tblVisionPlans
		{
			get
			{
				return this._tblVisionPlans;
			}
			set
			{
				this._tblVisionPlans.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblVisionPlan1", Storage="_tblVisionPlans1", ThisKey="ID", OtherKey="PlanCode")]
		public EntitySet<tblVisionPlan> tblVisionPlans1
		{
			get
			{
				return this._tblVisionPlans1;
			}
			set
			{
				this._tblVisionPlans1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblVisionPlanRate", Storage="_tblVisionPlanRates", ThisKey="ID", OtherKey="CarrierId")]
		public EntitySet<tblVisionPlanRate> tblVisionPlanRates
		{
			get
			{
				return this._tblVisionPlanRates;
			}
			set
			{
				this._tblVisionPlanRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblVisionPlanRate1", Storage="_tblVisionPlanRates1", ThisKey="ID", OtherKey="PlanCode")]
		public EntitySet<tblVisionPlanRate> tblVisionPlanRates1
		{
			get
			{
				return this._tblVisionPlanRates1;
			}
			set
			{
				this._tblVisionPlanRates1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblRates(tblRate entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan = this;
		}
		
		private void detach_tblRates(tblRate entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan = null;
		}
		
		private void attach_tblPolicyRates(tblPolicyRate entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan = this;
		}
		
		private void detach_tblPolicyRates(tblPolicyRate entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan = null;
		}
		
		private void attach_tblDentalPlans(tblDentalPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan = this;
		}
		
		private void detach_tblDentalPlans(tblDentalPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan = null;
		}
		
		private void attach_tblDentalPlans1(tblDentalPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan1 = this;
		}
		
		private void detach_tblDentalPlans1(tblDentalPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan1 = null;
		}
		
		private void attach_tblDentalPlanRates(tblDentalPlanRate entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan = this;
		}
		
		private void detach_tblDentalPlanRates(tblDentalPlanRate entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan = null;
		}
		
		private void attach_tblDentalPlanRates1(tblDentalPlanRate entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan1 = this;
		}
		
		private void detach_tblDentalPlanRates1(tblDentalPlanRate entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan1 = null;
		}
		
		private void attach_tblVisionPlans(tblVisionPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan = this;
		}
		
		private void detach_tblVisionPlans(tblVisionPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan = null;
		}
		
		private void attach_tblVisionPlans1(tblVisionPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan1 = this;
		}
		
		private void detach_tblVisionPlans1(tblVisionPlan entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan1 = null;
		}
		
		private void attach_tblVisionPlanRates(tblVisionPlanRate entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan = this;
		}
		
		private void detach_tblVisionPlanRates(tblVisionPlanRate entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan = null;
		}
		
		private void attach_tblVisionPlanRates1(tblVisionPlanRate entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan1 = this;
		}
		
		private void detach_tblVisionPlanRates1(tblVisionPlanRate entity)
		{
			this.SendPropertyChanging();
			entity.tblBenefitPlan1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblAgencyRole")]
	public partial class tblAgencyRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AgencyRole;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private EntitySet<tblUser> _tblUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAgencyRoleChanging(string value);
    partial void OnAgencyRoleChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblAgencyRole()
		{
			this._tblUsers = new EntitySet<tblUser>(new Action<tblUser>(this.attach_tblUsers), new Action<tblUser>(this.detach_tblUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgencyRole", DbType="VarChar(100)")]
		public string AgencyRole
		{
			get
			{
				return this._AgencyRole;
			}
			set
			{
				if ((this._AgencyRole != value))
				{
					this.OnAgencyRoleChanging(value);
					this.SendPropertyChanging();
					this._AgencyRole = value;
					this.SendPropertyChanged("AgencyRole");
					this.OnAgencyRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAgencyRole_tblUser", Storage="_tblUsers", ThisKey="ID", OtherKey="AgencyRoleId")]
		public EntitySet<tblUser> tblUsers
		{
			get
			{
				return this._tblUsers;
			}
			set
			{
				this._tblUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblAgencyRole = this;
		}
		
		private void detach_tblUsers(tblUser entity)
		{
			this.SendPropertyChanging();
			entity.tblAgencyRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StudentSupervised")]
	public partial class StudentSupervised : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StudentSupervisedId;
		
		private int _UserId;
		
		private string _Year;
		
		private string _UG;
		
		private string _Masters;
		
		private string _PhD;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentSupervisedIdChanging(int value);
    partial void OnStudentSupervisedIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnUGChanging(string value);
    partial void OnUGChanged();
    partial void OnMastersChanging(string value);
    partial void OnMastersChanged();
    partial void OnPhDChanging(string value);
    partial void OnPhDChanged();
    #endregion
		
		public StudentSupervised()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentSupervisedId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StudentSupervisedId
		{
			get
			{
				return this._StudentSupervisedId;
			}
			set
			{
				if ((this._StudentSupervisedId != value))
				{
					this.OnStudentSupervisedIdChanging(value);
					this.SendPropertyChanging();
					this._StudentSupervisedId = value;
					this.SendPropertyChanged("StudentSupervisedId");
					this.OnStudentSupervisedIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UG", DbType="NVarChar(200)")]
		public string UG
		{
			get
			{
				return this._UG;
			}
			set
			{
				if ((this._UG != value))
				{
					this.OnUGChanging(value);
					this.SendPropertyChanging();
					this._UG = value;
					this.SendPropertyChanged("UG");
					this.OnUGChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Masters", DbType="NVarChar(200)")]
		public string Masters
		{
			get
			{
				return this._Masters;
			}
			set
			{
				if ((this._Masters != value))
				{
					this.OnMastersChanging(value);
					this.SendPropertyChanging();
					this._Masters = value;
					this.SendPropertyChanged("Masters");
					this.OnMastersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhD", DbType="NVarChar(200)")]
		public string PhD
		{
			get
			{
				return this._PhD;
			}
			set
			{
				if ((this._PhD != value))
				{
					this.OnPhDChanging(value);
					this.SendPropertyChanging();
					this._PhD = value;
					this.SendPropertyChanged("PhD");
					this.OnPhDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_StudentSupervised", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.StudentSuperviseds.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.StudentSuperviseds.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SectionInstructorScheduleTime")]
	public partial class SectionInstructorScheduleTime : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SectionInstructorScheduleTimeId;
		
		private int _SectionInstructorMapId;
		
		private int _From;
		
		private int _To;
		
		private string _DayOfTheWeek;
		
		private EntityRef<SectionInstructorMap> _SectionInstructorMap;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectionInstructorScheduleTimeIdChanging(int value);
    partial void OnSectionInstructorScheduleTimeIdChanged();
    partial void OnSectionInstructorMapIdChanging(int value);
    partial void OnSectionInstructorMapIdChanged();
    partial void OnFromChanging(int value);
    partial void OnFromChanged();
    partial void OnToChanging(int value);
    partial void OnToChanged();
    partial void OnDayOfTheWeekChanging(string value);
    partial void OnDayOfTheWeekChanged();
    #endregion
		
		public SectionInstructorScheduleTime()
		{
			this._SectionInstructorMap = default(EntityRef<SectionInstructorMap>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionInstructorScheduleTimeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SectionInstructorScheduleTimeId
		{
			get
			{
				return this._SectionInstructorScheduleTimeId;
			}
			set
			{
				if ((this._SectionInstructorScheduleTimeId != value))
				{
					this.OnSectionInstructorScheduleTimeIdChanging(value);
					this.SendPropertyChanging();
					this._SectionInstructorScheduleTimeId = value;
					this.SendPropertyChanged("SectionInstructorScheduleTimeId");
					this.OnSectionInstructorScheduleTimeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionInstructorMapId", DbType="Int NOT NULL")]
		public int SectionInstructorMapId
		{
			get
			{
				return this._SectionInstructorMapId;
			}
			set
			{
				if ((this._SectionInstructorMapId != value))
				{
					if (this._SectionInstructorMap.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionInstructorMapIdChanging(value);
					this.SendPropertyChanging();
					this._SectionInstructorMapId = value;
					this.SendPropertyChanged("SectionInstructorMapId");
					this.OnSectionInstructorMapIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[From]", Storage="_From", DbType="Int NOT NULL")]
		public int From
		{
			get
			{
				return this._From;
			}
			set
			{
				if ((this._From != value))
				{
					this.OnFromChanging(value);
					this.SendPropertyChanging();
					this._From = value;
					this.SendPropertyChanged("From");
					this.OnFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[To]", Storage="_To", DbType="Int NOT NULL")]
		public int To
		{
			get
			{
				return this._To;
			}
			set
			{
				if ((this._To != value))
				{
					this.OnToChanging(value);
					this.SendPropertyChanging();
					this._To = value;
					this.SendPropertyChanged("To");
					this.OnToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfTheWeek", DbType="NVarChar(9)")]
		public string DayOfTheWeek
		{
			get
			{
				return this._DayOfTheWeek;
			}
			set
			{
				if ((this._DayOfTheWeek != value))
				{
					this.OnDayOfTheWeekChanging(value);
					this.SendPropertyChanging();
					this._DayOfTheWeek = value;
					this.SendPropertyChanged("DayOfTheWeek");
					this.OnDayOfTheWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SectionInstructorMap_SectionInstructorScheduleTime", Storage="_SectionInstructorMap", ThisKey="SectionInstructorMapId", OtherKey="SectionInstructorMap1", IsForeignKey=true)]
		public SectionInstructorMap SectionInstructorMap
		{
			get
			{
				return this._SectionInstructorMap.Entity;
			}
			set
			{
				SectionInstructorMap previousValue = this._SectionInstructorMap.Entity;
				if (((previousValue != value) 
							|| (this._SectionInstructorMap.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SectionInstructorMap.Entity = null;
						previousValue.SectionInstructorScheduleTimes.Remove(this);
					}
					this._SectionInstructorMap.Entity = value;
					if ((value != null))
					{
						value.SectionInstructorScheduleTimes.Add(this);
						this._SectionInstructorMapId = value.SectionInstructorMap1;
					}
					else
					{
						this._SectionInstructorMapId = default(int);
					}
					this.SendPropertyChanged("SectionInstructorMap");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SectionInstructorMap")]
	public partial class SectionInstructorMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SectionInstructorMap1;
		
		private int _UserId;
		
		private int _SectionId;
		
		private bool _IsProffInCharge;
		
		private EntitySet<SectionInstructorScheduleTime> _SectionInstructorScheduleTimes;
		
		private EntityRef<User> _User;
		
		private EntityRef<Section> _Section;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectionInstructorMap1Changing(int value);
    partial void OnSectionInstructorMap1Changed();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnIsProffInChargeChanging(bool value);
    partial void OnIsProffInChargeChanged();
    #endregion
		
		public SectionInstructorMap()
		{
			this._SectionInstructorScheduleTimes = new EntitySet<SectionInstructorScheduleTime>(new Action<SectionInstructorScheduleTime>(this.attach_SectionInstructorScheduleTimes), new Action<SectionInstructorScheduleTime>(this.detach_SectionInstructorScheduleTimes));
			this._User = default(EntityRef<User>);
			this._Section = default(EntityRef<Section>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SectionInstructorMap", Storage="_SectionInstructorMap1", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SectionInstructorMap1
		{
			get
			{
				return this._SectionInstructorMap1;
			}
			set
			{
				if ((this._SectionInstructorMap1 != value))
				{
					this.OnSectionInstructorMap1Changing(value);
					this.SendPropertyChanging();
					this._SectionInstructorMap1 = value;
					this.SendPropertyChanged("SectionInstructorMap1");
					this.OnSectionInstructorMap1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", DbType="Int NOT NULL")]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					if (this._Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsProffInCharge", DbType="Bit NOT NULL")]
		public bool IsProffInCharge
		{
			get
			{
				return this._IsProffInCharge;
			}
			set
			{
				if ((this._IsProffInCharge != value))
				{
					this.OnIsProffInChargeChanging(value);
					this.SendPropertyChanging();
					this._IsProffInCharge = value;
					this.SendPropertyChanged("IsProffInCharge");
					this.OnIsProffInChargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SectionInstructorMap_SectionInstructorScheduleTime", Storage="_SectionInstructorScheduleTimes", ThisKey="SectionInstructorMap1", OtherKey="SectionInstructorMapId")]
		public EntitySet<SectionInstructorScheduleTime> SectionInstructorScheduleTimes
		{
			get
			{
				return this._SectionInstructorScheduleTimes;
			}
			set
			{
				this._SectionInstructorScheduleTimes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SectionInstructorMap", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SectionInstructorMaps.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SectionInstructorMaps.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_SectionInstructorMap", Storage="_Section", ThisKey="SectionId", OtherKey="SectionId", IsForeignKey=true)]
		public Section Section
		{
			get
			{
				return this._Section.Entity;
			}
			set
			{
				Section previousValue = this._Section.Entity;
				if (((previousValue != value) 
							|| (this._Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Section.Entity = null;
						previousValue.SectionInstructorMaps.Remove(this);
					}
					this._Section.Entity = value;
					if ((value != null))
					{
						value.SectionInstructorMaps.Add(this);
						this._SectionId = value.SectionId;
					}
					else
					{
						this._SectionId = default(int);
					}
					this.SendPropertyChanged("Section");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SectionInstructorScheduleTimes(SectionInstructorScheduleTime entity)
		{
			this.SendPropertyChanging();
			entity.SectionInstructorMap = this;
		}
		
		private void detach_SectionInstructorScheduleTimes(SectionInstructorScheduleTime entity)
		{
			this.SendPropertyChanging();
			entity.SectionInstructorMap = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Section")]
	public partial class Section : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SectionId;
		
		private System.Nullable<int> _CourseId;
		
		private System.Nullable<int> _TermId;
		
		private string _Name;
		
		private string _TermYear;
		
		private string _SectionType;
		
		private EntitySet<SectionInstructorMap> _SectionInstructorMaps;
		
		private EntitySet<ExamArchive> _ExamArchives;
		
		private EntityRef<Term> _Term;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnCourseIdChanging(System.Nullable<int> value);
    partial void OnCourseIdChanged();
    partial void OnTermIdChanging(System.Nullable<int> value);
    partial void OnTermIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTermYearChanging(string value);
    partial void OnTermYearChanged();
    partial void OnSectionTypeChanging(string value);
    partial void OnSectionTypeChanged();
    #endregion
		
		public Section()
		{
			this._SectionInstructorMaps = new EntitySet<SectionInstructorMap>(new Action<SectionInstructorMap>(this.attach_SectionInstructorMaps), new Action<SectionInstructorMap>(this.detach_SectionInstructorMaps));
			this._ExamArchives = new EntitySet<ExamArchive>(new Action<ExamArchive>(this.attach_ExamArchives), new Action<ExamArchive>(this.detach_ExamArchives));
			this._Term = default(EntityRef<Term>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int")]
		public System.Nullable<int> CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", DbType="Int")]
		public System.Nullable<int> TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					if (this._Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermYear", DbType="NVarChar(4)")]
		public string TermYear
		{
			get
			{
				return this._TermYear;
			}
			set
			{
				if ((this._TermYear != value))
				{
					this.OnTermYearChanging(value);
					this.SendPropertyChanging();
					this._TermYear = value;
					this.SendPropertyChanged("TermYear");
					this.OnTermYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionType", DbType="NVarChar(3)")]
		public string SectionType
		{
			get
			{
				return this._SectionType;
			}
			set
			{
				if ((this._SectionType != value))
				{
					this.OnSectionTypeChanging(value);
					this.SendPropertyChanging();
					this._SectionType = value;
					this.SendPropertyChanged("SectionType");
					this.OnSectionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_SectionInstructorMap", Storage="_SectionInstructorMaps", ThisKey="SectionId", OtherKey="SectionId")]
		public EntitySet<SectionInstructorMap> SectionInstructorMaps
		{
			get
			{
				return this._SectionInstructorMaps;
			}
			set
			{
				this._SectionInstructorMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_ExamArchive", Storage="_ExamArchives", ThisKey="SectionId", OtherKey="SectionId")]
		public EntitySet<ExamArchive> ExamArchives
		{
			get
			{
				return this._ExamArchives;
			}
			set
			{
				this._ExamArchives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Term_Section", Storage="_Term", ThisKey="TermId", OtherKey="TermId", IsForeignKey=true)]
		public Term Term
		{
			get
			{
				return this._Term.Entity;
			}
			set
			{
				Term previousValue = this._Term.Entity;
				if (((previousValue != value) 
							|| (this._Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Term.Entity = null;
						previousValue.Sections.Remove(this);
					}
					this._Term.Entity = value;
					if ((value != null))
					{
						value.Sections.Add(this);
						this._TermId = value.TermId;
					}
					else
					{
						this._TermId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Term");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Section", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Sections.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Sections.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SectionInstructorMaps(SectionInstructorMap entity)
		{
			this.SendPropertyChanging();
			entity.Section = this;
		}
		
		private void detach_SectionInstructorMaps(SectionInstructorMap entity)
		{
			this.SendPropertyChanging();
			entity.Section = null;
		}
		
		private void attach_ExamArchives(ExamArchive entity)
		{
			this.SendPropertyChanging();
			entity.Section = this;
		}
		
		private void detach_ExamArchives(ExamArchive entity)
		{
			this.SendPropertyChanging();
			entity.Section = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScholarshipPublication")]
	public partial class ScholarshipPublication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScholarshipPublicationId;
		
		private System.Nullable<int> _UserId;
		
		private string _Year;
		
		private string _RefereedJournals;
		
		private string _ReferredConference;
		
		private string _OtherPublications;
		
		private string _Patents;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScholarshipPublicationIdChanging(int value);
    partial void OnScholarshipPublicationIdChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnRefereedJournalsChanging(string value);
    partial void OnRefereedJournalsChanged();
    partial void OnReferredConferenceChanging(string value);
    partial void OnReferredConferenceChanged();
    partial void OnOtherPublicationsChanging(string value);
    partial void OnOtherPublicationsChanged();
    partial void OnPatentsChanging(string value);
    partial void OnPatentsChanged();
    #endregion
		
		public ScholarshipPublication()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScholarshipPublicationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScholarshipPublicationId
		{
			get
			{
				return this._ScholarshipPublicationId;
			}
			set
			{
				if ((this._ScholarshipPublicationId != value))
				{
					this.OnScholarshipPublicationIdChanging(value);
					this.SendPropertyChanging();
					this._ScholarshipPublicationId = value;
					this.SendPropertyChanged("ScholarshipPublicationId");
					this.OnScholarshipPublicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefereedJournals", DbType="NVarChar(200)")]
		public string RefereedJournals
		{
			get
			{
				return this._RefereedJournals;
			}
			set
			{
				if ((this._RefereedJournals != value))
				{
					this.OnRefereedJournalsChanging(value);
					this.SendPropertyChanging();
					this._RefereedJournals = value;
					this.SendPropertyChanged("RefereedJournals");
					this.OnRefereedJournalsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferredConference", DbType="NVarChar(200)")]
		public string ReferredConference
		{
			get
			{
				return this._ReferredConference;
			}
			set
			{
				if ((this._ReferredConference != value))
				{
					this.OnReferredConferenceChanging(value);
					this.SendPropertyChanging();
					this._ReferredConference = value;
					this.SendPropertyChanged("ReferredConference");
					this.OnReferredConferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherPublications", DbType="NVarChar(200)")]
		public string OtherPublications
		{
			get
			{
				return this._OtherPublications;
			}
			set
			{
				if ((this._OtherPublications != value))
				{
					this.OnOtherPublicationsChanging(value);
					this.SendPropertyChanging();
					this._OtherPublications = value;
					this.SendPropertyChanged("OtherPublications");
					this.OnOtherPublicationsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patents", DbType="NVarChar(200)")]
		public string Patents
		{
			get
			{
				return this._Patents;
			}
			set
			{
				if ((this._Patents != value))
				{
					this.OnPatentsChanging(value);
					this.SendPropertyChanging();
					this._Patents = value;
					this.SendPropertyChanged("Patents");
					this.OnPatentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ScholarshipPublication", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ScholarshipPublications.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ScholarshipPublications.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScenarioCourseprogramRequirementMap")]
	public partial class ScenarioCourseprogramRequirementMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScenarioId;
		
		private int _ProgramRequirementId;
		
		private int _CourseId;
		
		private EntityRef<ScenarioCourseProgram> _ScenarioCourseProgram;
		
		private EntityRef<ProgramRequirement> _ProgramRequirement;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScenarioIdChanging(int value);
    partial void OnScenarioIdChanged();
    partial void OnProgramRequirementIdChanging(int value);
    partial void OnProgramRequirementIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    #endregion
		
		public ScenarioCourseprogramRequirementMap()
		{
			this._ScenarioCourseProgram = default(EntityRef<ScenarioCourseProgram>);
			this._ProgramRequirement = default(EntityRef<ProgramRequirement>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScenarioId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ScenarioId
		{
			get
			{
				return this._ScenarioId;
			}
			set
			{
				if ((this._ScenarioId != value))
				{
					if (this._ScenarioCourseProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScenarioIdChanging(value);
					this.SendPropertyChanging();
					this._ScenarioId = value;
					this.SendPropertyChanged("ScenarioId");
					this.OnScenarioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramRequirementId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProgramRequirementId
		{
			get
			{
				return this._ProgramRequirementId;
			}
			set
			{
				if ((this._ProgramRequirementId != value))
				{
					if (this._ProgramRequirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramRequirementIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramRequirementId = value;
					this.SendPropertyChanged("ProgramRequirementId");
					this.OnProgramRequirementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScenarioCourseProgram_ScenarioCourseprogramRequirementMap", Storage="_ScenarioCourseProgram", ThisKey="ScenarioId", OtherKey="ScenarioId", IsForeignKey=true)]
		public ScenarioCourseProgram ScenarioCourseProgram
		{
			get
			{
				return this._ScenarioCourseProgram.Entity;
			}
			set
			{
				ScenarioCourseProgram previousValue = this._ScenarioCourseProgram.Entity;
				if (((previousValue != value) 
							|| (this._ScenarioCourseProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ScenarioCourseProgram.Entity = null;
						previousValue.ScenarioCourseprogramRequirementMaps.Remove(this);
					}
					this._ScenarioCourseProgram.Entity = value;
					if ((value != null))
					{
						value.ScenarioCourseprogramRequirementMaps.Add(this);
						this._ScenarioId = value.ScenarioId;
					}
					else
					{
						this._ScenarioId = default(int);
					}
					this.SendPropertyChanged("ScenarioCourseProgram");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramRequirement_ScenarioCourseprogramRequirementMap", Storage="_ProgramRequirement", ThisKey="ProgramRequirementId", OtherKey="ProgramRequirementId", IsForeignKey=true)]
		public ProgramRequirement ProgramRequirement
		{
			get
			{
				return this._ProgramRequirement.Entity;
			}
			set
			{
				ProgramRequirement previousValue = this._ProgramRequirement.Entity;
				if (((previousValue != value) 
							|| (this._ProgramRequirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgramRequirement.Entity = null;
						previousValue.ScenarioCourseprogramRequirementMaps.Remove(this);
					}
					this._ProgramRequirement.Entity = value;
					if ((value != null))
					{
						value.ScenarioCourseprogramRequirementMaps.Add(this);
						this._ProgramRequirementId = value.ProgramRequirementId;
					}
					else
					{
						this._ProgramRequirementId = default(int);
					}
					this.SendPropertyChanged("ProgramRequirement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_ScenarioCourseprogramRequirementMap", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.ScenarioCourseprogramRequirementMaps.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.ScenarioCourseprogramRequirementMaps.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ScenarioCourseProgram")]
	public partial class ScenarioCourseProgram : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ScenarioId;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private int _ProgramOptionId;
		
		private EntitySet<ScenarioCourseprogramRequirementMap> _ScenarioCourseprogramRequirementMaps;
		
		private EntityRef<ProgramOption> _ProgramOption;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScenarioIdChanging(int value);
    partial void OnScenarioIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnProgramOptionIdChanging(int value);
    partial void OnProgramOptionIdChanged();
    #endregion
		
		public ScenarioCourseProgram()
		{
			this._ScenarioCourseprogramRequirementMaps = new EntitySet<ScenarioCourseprogramRequirementMap>(new Action<ScenarioCourseprogramRequirementMap>(this.attach_ScenarioCourseprogramRequirementMaps), new Action<ScenarioCourseprogramRequirementMap>(this.detach_ScenarioCourseprogramRequirementMaps));
			this._ProgramOption = default(EntityRef<ProgramOption>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScenarioId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ScenarioId
		{
			get
			{
				return this._ScenarioId;
			}
			set
			{
				if ((this._ScenarioId != value))
				{
					this.OnScenarioIdChanging(value);
					this.SendPropertyChanging();
					this._ScenarioId = value;
					this.SendPropertyChanged("ScenarioId");
					this.OnScenarioIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramOptionId", DbType="Int NOT NULL")]
		public int ProgramOptionId
		{
			get
			{
				return this._ProgramOptionId;
			}
			set
			{
				if ((this._ProgramOptionId != value))
				{
					if (this._ProgramOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramOptionIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramOptionId = value;
					this.SendPropertyChanged("ProgramOptionId");
					this.OnProgramOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ScenarioCourseProgram_ScenarioCourseprogramRequirementMap", Storage="_ScenarioCourseprogramRequirementMaps", ThisKey="ScenarioId", OtherKey="ScenarioId")]
		public EntitySet<ScenarioCourseprogramRequirementMap> ScenarioCourseprogramRequirementMaps
		{
			get
			{
				return this._ScenarioCourseprogramRequirementMaps;
			}
			set
			{
				this._ScenarioCourseprogramRequirementMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramOption_ScenarioCourseProgram", Storage="_ProgramOption", ThisKey="ProgramOptionId", OtherKey="ProgramOptionId", IsForeignKey=true)]
		public ProgramOption ProgramOption
		{
			get
			{
				return this._ProgramOption.Entity;
			}
			set
			{
				ProgramOption previousValue = this._ProgramOption.Entity;
				if (((previousValue != value) 
							|| (this._ProgramOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgramOption.Entity = null;
						previousValue.ScenarioCoursePrograms.Remove(this);
					}
					this._ProgramOption.Entity = value;
					if ((value != null))
					{
						value.ScenarioCoursePrograms.Add(this);
						this._ProgramOptionId = value.ProgramOptionId;
					}
					else
					{
						this._ProgramOptionId = default(int);
					}
					this.SendPropertyChanged("ProgramOption");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScenarioCourseprogramRequirementMaps(ScenarioCourseprogramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.ScenarioCourseProgram = this;
		}
		
		private void detach_ScenarioCourseprogramRequirementMaps(ScenarioCourseprogramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.ScenarioCourseProgram = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SabbaticalLeaves")]
	public partial class SabbaticalLeave : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SabbaticalLeavesId;
		
		private int _UserId;
		
		private string _Year;
		
		private string _Organization;
		
		private string _Location;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSabbaticalLeavesIdChanging(int value);
    partial void OnSabbaticalLeavesIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnOrganizationChanging(string value);
    partial void OnOrganizationChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
		
		public SabbaticalLeave()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SabbaticalLeavesId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SabbaticalLeavesId
		{
			get
			{
				return this._SabbaticalLeavesId;
			}
			set
			{
				if ((this._SabbaticalLeavesId != value))
				{
					this.OnSabbaticalLeavesIdChanging(value);
					this.SendPropertyChanging();
					this._SabbaticalLeavesId = value;
					this.SendPropertyChanged("SabbaticalLeavesId");
					this.OnSabbaticalLeavesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Organization", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Organization
		{
			get
			{
				return this._Organization;
			}
			set
			{
				if ((this._Organization != value))
				{
					this.OnOrganizationChanging(value);
					this.SendPropertyChanging();
					this._Organization = value;
					this.SendPropertyChanged("Organization");
					this.OnOrganizationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_SabbaticalLeave", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.SabbaticalLeaves.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.SabbaticalLeaves.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RuleMap")]
	public partial class RuleMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RuleMapId;
		
		private int _RuleId;
		
		private string _code;
		
		private int _ParameterId;
		
		private EntityRef<Rule> _Rule;
		
		private EntityRef<Parameter> _Parameter;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRuleMapIdChanging(int value);
    partial void OnRuleMapIdChanged();
    partial void OnRuleIdChanging(int value);
    partial void OnRuleIdChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnParameterIdChanging(int value);
    partial void OnParameterIdChanged();
    #endregion
		
		public RuleMap()
		{
			this._Rule = default(EntityRef<Rule>);
			this._Parameter = default(EntityRef<Parameter>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleMapId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RuleMapId
		{
			get
			{
				return this._RuleMapId;
			}
			set
			{
				if ((this._RuleMapId != value))
				{
					this.OnRuleMapIdChanging(value);
					this.SendPropertyChanging();
					this._RuleMapId = value;
					this.SendPropertyChanged("RuleMapId");
					this.OnRuleMapIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleId", DbType="Int NOT NULL")]
		public int RuleId
		{
			get
			{
				return this._RuleId;
			}
			set
			{
				if ((this._RuleId != value))
				{
					if (this._Rule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRuleIdChanging(value);
					this.SendPropertyChanging();
					this._RuleId = value;
					this.SendPropertyChanged("RuleId");
					this.OnRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterId", DbType="Int NOT NULL")]
		public int ParameterId
		{
			get
			{
				return this._ParameterId;
			}
			set
			{
				if ((this._ParameterId != value))
				{
					if (this._Parameter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParameterIdChanging(value);
					this.SendPropertyChanging();
					this._ParameterId = value;
					this.SendPropertyChanged("ParameterId");
					this.OnParameterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_RuleMap", Storage="_Rule", ThisKey="RuleId", OtherKey="RuleId", IsForeignKey=true)]
		public Rule Rule
		{
			get
			{
				return this._Rule.Entity;
			}
			set
			{
				Rule previousValue = this._Rule.Entity;
				if (((previousValue != value) 
							|| (this._Rule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rule.Entity = null;
						previousValue.RuleMaps.Remove(this);
					}
					this._Rule.Entity = value;
					if ((value != null))
					{
						value.RuleMaps.Add(this);
						this._RuleId = value.RuleId;
					}
					else
					{
						this._RuleId = default(int);
					}
					this.SendPropertyChanged("Rule");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_RuleMap", Storage="_Parameter", ThisKey="ParameterId", OtherKey="ParameterId", IsForeignKey=true)]
		public Parameter Parameter
		{
			get
			{
				return this._Parameter.Entity;
			}
			set
			{
				Parameter previousValue = this._Parameter.Entity;
				if (((previousValue != value) 
							|| (this._Parameter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parameter.Entity = null;
						previousValue.RuleMaps.Remove(this);
					}
					this._Parameter.Entity = value;
					if ((value != null))
					{
						value.RuleMaps.Add(this);
						this._ParameterId = value.ParameterId;
					}
					else
					{
						this._ParameterId = default(int);
					}
					this.SendPropertyChanged("Parameter");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Rule]")]
	public partial class Rule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RuleId;
		
		private string _Name;
		
		private string _Expression;
		
		private System.DateTime _ValidFrom;
		
		private System.DateTime _ValidTo;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.DateTime _UpdatedOn;
		
		private string _Desc;
		
		private EntitySet<RuleMap> _RuleMaps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRuleIdChanging(int value);
    partial void OnRuleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnExpressionChanging(string value);
    partial void OnExpressionChanged();
    partial void OnValidFromChanging(System.DateTime value);
    partial void OnValidFromChanged();
    partial void OnValidToChanging(System.DateTime value);
    partial void OnValidToChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.DateTime value);
    partial void OnUpdatedOnChanged();
    partial void OnDescChanging(string value);
    partial void OnDescChanged();
    #endregion
		
		public Rule()
		{
			this._RuleMaps = new EntitySet<RuleMap>(new Action<RuleMap>(this.attach_RuleMaps), new Action<RuleMap>(this.detach_RuleMaps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RuleId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RuleId
		{
			get
			{
				return this._RuleId;
			}
			set
			{
				if ((this._RuleId != value))
				{
					this.OnRuleIdChanging(value);
					this.SendPropertyChanging();
					this._RuleId = value;
					this.SendPropertyChanged("RuleId");
					this.OnRuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Expression", DbType="NVarChar(500)")]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidFrom", DbType="DateTime NOT NULL")]
		public System.DateTime ValidFrom
		{
			get
			{
				return this._ValidFrom;
			}
			set
			{
				if ((this._ValidFrom != value))
				{
					this.OnValidFromChanging(value);
					this.SendPropertyChanging();
					this._ValidFrom = value;
					this.SendPropertyChanged("ValidFrom");
					this.OnValidFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValidTo", DbType="DateTime NOT NULL")]
		public System.DateTime ValidTo
		{
			get
			{
				return this._ValidTo;
			}
			set
			{
				if ((this._ValidTo != value))
				{
					this.OnValidToChanging(value);
					this.SendPropertyChanging();
					this._ValidTo = value;
					this.SendPropertyChanged("ValidTo");
					this.OnValidToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Desc]", Storage="_Desc", DbType="NVarChar(1000)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged("Desc");
					this.OnDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rule_RuleMap", Storage="_RuleMaps", ThisKey="RuleId", OtherKey="RuleId")]
		public EntitySet<RuleMap> RuleMaps
		{
			get
			{
				return this._RuleMaps;
			}
			set
			{
				this._RuleMaps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RuleMaps(RuleMap entity)
		{
			this.SendPropertyChanging();
			entity.Rule = this;
		}
		
		private void detach_RuleMaps(RuleMap entity)
		{
			this.SendPropertyChanging();
			entity.Rule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Rank")]
	public partial class Rank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RankId;
		
		private string _RankDesc;
		
		private EntitySet<AdvancementRank> _AdvancementRanks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRankIdChanging(int value);
    partial void OnRankIdChanged();
    partial void OnRankDescChanging(string value);
    partial void OnRankDescChanged();
    #endregion
		
		public Rank()
		{
			this._AdvancementRanks = new EntitySet<AdvancementRank>(new Action<AdvancementRank>(this.attach_AdvancementRanks), new Action<AdvancementRank>(this.detach_AdvancementRanks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RankId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RankId
		{
			get
			{
				return this._RankId;
			}
			set
			{
				if ((this._RankId != value))
				{
					this.OnRankIdChanging(value);
					this.SendPropertyChanging();
					this._RankId = value;
					this.SendPropertyChanged("RankId");
					this.OnRankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RankDesc", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string RankDesc
		{
			get
			{
				return this._RankDesc;
			}
			set
			{
				if ((this._RankDesc != value))
				{
					this.OnRankDescChanging(value);
					this.SendPropertyChanging();
					this._RankDesc = value;
					this.SendPropertyChanged("RankDesc");
					this.OnRankDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_AdvancementRank", Storage="_AdvancementRanks", ThisKey="RankId", OtherKey="RankId")]
		public EntitySet<AdvancementRank> AdvancementRanks
		{
			get
			{
				return this._AdvancementRanks;
			}
			set
			{
				this._AdvancementRanks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AdvancementRanks(AdvancementRank entity)
		{
			this.SendPropertyChanging();
			entity.Rank = this;
		}
		
		private void detach_AdvancementRanks(AdvancementRank entity)
		{
			this.SendPropertyChanging();
			entity.Rank = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProgramRequirementMap")]
	public partial class ProgramRequirementMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProgramOptionId;
		
		private int _ProgramRequirementId;
		
		private EntityRef<ProgramRequirement> _ProgramRequirement;
		
		private EntityRef<ProgramOption> _ProgramOption;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgramOptionIdChanging(int value);
    partial void OnProgramOptionIdChanged();
    partial void OnProgramRequirementIdChanging(int value);
    partial void OnProgramRequirementIdChanged();
    #endregion
		
		public ProgramRequirementMap()
		{
			this._ProgramRequirement = default(EntityRef<ProgramRequirement>);
			this._ProgramOption = default(EntityRef<ProgramOption>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramOptionId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProgramOptionId
		{
			get
			{
				return this._ProgramOptionId;
			}
			set
			{
				if ((this._ProgramOptionId != value))
				{
					if (this._ProgramOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramOptionIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramOptionId = value;
					this.SendPropertyChanged("ProgramOptionId");
					this.OnProgramOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramRequirementId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProgramRequirementId
		{
			get
			{
				return this._ProgramRequirementId;
			}
			set
			{
				if ((this._ProgramRequirementId != value))
				{
					if (this._ProgramRequirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramRequirementIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramRequirementId = value;
					this.SendPropertyChanged("ProgramRequirementId");
					this.OnProgramRequirementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramRequirement_ProgramRequirementMap", Storage="_ProgramRequirement", ThisKey="ProgramRequirementId", OtherKey="ProgramRequirementId", IsForeignKey=true)]
		public ProgramRequirement ProgramRequirement
		{
			get
			{
				return this._ProgramRequirement.Entity;
			}
			set
			{
				ProgramRequirement previousValue = this._ProgramRequirement.Entity;
				if (((previousValue != value) 
							|| (this._ProgramRequirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgramRequirement.Entity = null;
						previousValue.ProgramRequirementMaps.Remove(this);
					}
					this._ProgramRequirement.Entity = value;
					if ((value != null))
					{
						value.ProgramRequirementMaps.Add(this);
						this._ProgramRequirementId = value.ProgramRequirementId;
					}
					else
					{
						this._ProgramRequirementId = default(int);
					}
					this.SendPropertyChanged("ProgramRequirement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramOption_ProgramRequirementMap", Storage="_ProgramOption", ThisKey="ProgramOptionId", OtherKey="ProgramOptionId", IsForeignKey=true)]
		public ProgramOption ProgramOption
		{
			get
			{
				return this._ProgramOption.Entity;
			}
			set
			{
				ProgramOption previousValue = this._ProgramOption.Entity;
				if (((previousValue != value) 
							|| (this._ProgramOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgramOption.Entity = null;
						previousValue.ProgramRequirementMaps.Remove(this);
					}
					this._ProgramOption.Entity = value;
					if ((value != null))
					{
						value.ProgramRequirementMaps.Add(this);
						this._ProgramOptionId = value.ProgramOptionId;
					}
					else
					{
						this._ProgramOptionId = default(int);
					}
					this.SendPropertyChanged("ProgramOption");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProgramRequirement")]
	public partial class ProgramRequirement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProgramRequirementId;
		
		private string _Type;
		
		private int _NoOfCompulsoryCourses;
		
		private string _Description;
		
		private System.Nullable<int> _ParentId;
		
		private string _SubGroupName;
		
		private EntitySet<ScenarioCourseprogramRequirementMap> _ScenarioCourseprogramRequirementMaps;
		
		private EntitySet<ProgramRequirementMap> _ProgramRequirementMaps;
		
		private EntitySet<CourseProgramRequirementMap> _CourseProgramRequirementMaps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgramRequirementIdChanging(int value);
    partial void OnProgramRequirementIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNoOfCompulsoryCoursesChanging(int value);
    partial void OnNoOfCompulsoryCoursesChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnSubGroupNameChanging(string value);
    partial void OnSubGroupNameChanged();
    #endregion
		
		public ProgramRequirement()
		{
			this._ScenarioCourseprogramRequirementMaps = new EntitySet<ScenarioCourseprogramRequirementMap>(new Action<ScenarioCourseprogramRequirementMap>(this.attach_ScenarioCourseprogramRequirementMaps), new Action<ScenarioCourseprogramRequirementMap>(this.detach_ScenarioCourseprogramRequirementMaps));
			this._ProgramRequirementMaps = new EntitySet<ProgramRequirementMap>(new Action<ProgramRequirementMap>(this.attach_ProgramRequirementMaps), new Action<ProgramRequirementMap>(this.detach_ProgramRequirementMaps));
			this._CourseProgramRequirementMaps = new EntitySet<CourseProgramRequirementMap>(new Action<CourseProgramRequirementMap>(this.attach_CourseProgramRequirementMaps), new Action<CourseProgramRequirementMap>(this.detach_CourseProgramRequirementMaps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramRequirementId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProgramRequirementId
		{
			get
			{
				return this._ProgramRequirementId;
			}
			set
			{
				if ((this._ProgramRequirementId != value))
				{
					this.OnProgramRequirementIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramRequirementId = value;
					this.SendPropertyChanged("ProgramRequirementId");
					this.OnProgramRequirementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoOfCompulsoryCourses", DbType="Int NOT NULL")]
		public int NoOfCompulsoryCourses
		{
			get
			{
				return this._NoOfCompulsoryCourses;
			}
			set
			{
				if ((this._NoOfCompulsoryCourses != value))
				{
					this.OnNoOfCompulsoryCoursesChanging(value);
					this.SendPropertyChanging();
					this._NoOfCompulsoryCourses = value;
					this.SendPropertyChanged("NoOfCompulsoryCourses");
					this.OnNoOfCompulsoryCoursesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubGroupName", DbType="NVarChar(4000)")]
		public string SubGroupName
		{
			get
			{
				return this._SubGroupName;
			}
			set
			{
				if ((this._SubGroupName != value))
				{
					this.OnSubGroupNameChanging(value);
					this.SendPropertyChanging();
					this._SubGroupName = value;
					this.SendPropertyChanged("SubGroupName");
					this.OnSubGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramRequirement_ScenarioCourseprogramRequirementMap", Storage="_ScenarioCourseprogramRequirementMaps", ThisKey="ProgramRequirementId", OtherKey="ProgramRequirementId")]
		public EntitySet<ScenarioCourseprogramRequirementMap> ScenarioCourseprogramRequirementMaps
		{
			get
			{
				return this._ScenarioCourseprogramRequirementMaps;
			}
			set
			{
				this._ScenarioCourseprogramRequirementMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramRequirement_ProgramRequirementMap", Storage="_ProgramRequirementMaps", ThisKey="ProgramRequirementId", OtherKey="ProgramRequirementId")]
		public EntitySet<ProgramRequirementMap> ProgramRequirementMaps
		{
			get
			{
				return this._ProgramRequirementMaps;
			}
			set
			{
				this._ProgramRequirementMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramRequirement_CourseProgramRequirementMap", Storage="_CourseProgramRequirementMaps", ThisKey="ProgramRequirementId", OtherKey="ProgramRequirementId")]
		public EntitySet<CourseProgramRequirementMap> CourseProgramRequirementMaps
		{
			get
			{
				return this._CourseProgramRequirementMaps;
			}
			set
			{
				this._CourseProgramRequirementMaps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScenarioCourseprogramRequirementMaps(ScenarioCourseprogramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.ProgramRequirement = this;
		}
		
		private void detach_ScenarioCourseprogramRequirementMaps(ScenarioCourseprogramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.ProgramRequirement = null;
		}
		
		private void attach_ProgramRequirementMaps(ProgramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.ProgramRequirement = this;
		}
		
		private void detach_ProgramRequirementMaps(ProgramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.ProgramRequirement = null;
		}
		
		private void attach_CourseProgramRequirementMaps(CourseProgramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.ProgramRequirement = this;
		}
		
		private void detach_CourseProgramRequirementMaps(CourseProgramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.ProgramRequirement = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProgramOption")]
	public partial class ProgramOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProgramOptionId;
		
		private int _ProgramId;
		
		private string _Option;
		
		private decimal _AvgWeek;
		
		private EntitySet<ScenarioCourseProgram> _ScenarioCoursePrograms;
		
		private EntitySet<ProgramRequirementMap> _ProgramRequirementMaps;
		
		private EntitySet<ProgramAdditionalInfo> _ProgramAdditionalInfos;
		
		private EntityRef<Program> _Program;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgramOptionIdChanging(int value);
    partial void OnProgramOptionIdChanged();
    partial void OnProgramIdChanging(int value);
    partial void OnProgramIdChanged();
    partial void OnOptionChanging(string value);
    partial void OnOptionChanged();
    partial void OnAvgWeekChanging(decimal value);
    partial void OnAvgWeekChanged();
    #endregion
		
		public ProgramOption()
		{
			this._ScenarioCoursePrograms = new EntitySet<ScenarioCourseProgram>(new Action<ScenarioCourseProgram>(this.attach_ScenarioCoursePrograms), new Action<ScenarioCourseProgram>(this.detach_ScenarioCoursePrograms));
			this._ProgramRequirementMaps = new EntitySet<ProgramRequirementMap>(new Action<ProgramRequirementMap>(this.attach_ProgramRequirementMaps), new Action<ProgramRequirementMap>(this.detach_ProgramRequirementMaps));
			this._ProgramAdditionalInfos = new EntitySet<ProgramAdditionalInfo>(new Action<ProgramAdditionalInfo>(this.attach_ProgramAdditionalInfos), new Action<ProgramAdditionalInfo>(this.detach_ProgramAdditionalInfos));
			this._Program = default(EntityRef<Program>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramOptionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProgramOptionId
		{
			get
			{
				return this._ProgramOptionId;
			}
			set
			{
				if ((this._ProgramOptionId != value))
				{
					this.OnProgramOptionIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramOptionId = value;
					this.SendPropertyChanged("ProgramOptionId");
					this.OnProgramOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramId", DbType="Int NOT NULL")]
		public int ProgramId
		{
			get
			{
				return this._ProgramId;
			}
			set
			{
				if ((this._ProgramId != value))
				{
					if (this._Program.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramId = value;
					this.SendPropertyChanged("ProgramId");
					this.OnProgramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Option]", Storage="_Option", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Option
		{
			get
			{
				return this._Option;
			}
			set
			{
				if ((this._Option != value))
				{
					this.OnOptionChanging(value);
					this.SendPropertyChanging();
					this._Option = value;
					this.SendPropertyChanged("Option");
					this.OnOptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgWeek", DbType="Decimal(18,2) NOT NULL")]
		public decimal AvgWeek
		{
			get
			{
				return this._AvgWeek;
			}
			set
			{
				if ((this._AvgWeek != value))
				{
					this.OnAvgWeekChanging(value);
					this.SendPropertyChanging();
					this._AvgWeek = value;
					this.SendPropertyChanged("AvgWeek");
					this.OnAvgWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramOption_ScenarioCourseProgram", Storage="_ScenarioCoursePrograms", ThisKey="ProgramOptionId", OtherKey="ProgramOptionId")]
		public EntitySet<ScenarioCourseProgram> ScenarioCoursePrograms
		{
			get
			{
				return this._ScenarioCoursePrograms;
			}
			set
			{
				this._ScenarioCoursePrograms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramOption_ProgramRequirementMap", Storage="_ProgramRequirementMaps", ThisKey="ProgramOptionId", OtherKey="ProgramOptionId")]
		public EntitySet<ProgramRequirementMap> ProgramRequirementMaps
		{
			get
			{
				return this._ProgramRequirementMaps;
			}
			set
			{
				this._ProgramRequirementMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramOption_ProgramAdditionalInfo", Storage="_ProgramAdditionalInfos", ThisKey="ProgramOptionId", OtherKey="ProgramOptionId")]
		public EntitySet<ProgramAdditionalInfo> ProgramAdditionalInfos
		{
			get
			{
				return this._ProgramAdditionalInfos;
			}
			set
			{
				this._ProgramAdditionalInfos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_ProgramOption", Storage="_Program", ThisKey="ProgramId", OtherKey="ProgramId", IsForeignKey=true)]
		public Program Program
		{
			get
			{
				return this._Program.Entity;
			}
			set
			{
				Program previousValue = this._Program.Entity;
				if (((previousValue != value) 
							|| (this._Program.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Program.Entity = null;
						previousValue.ProgramOptions.Remove(this);
					}
					this._Program.Entity = value;
					if ((value != null))
					{
						value.ProgramOptions.Add(this);
						this._ProgramId = value.ProgramId;
					}
					else
					{
						this._ProgramId = default(int);
					}
					this.SendPropertyChanged("Program");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ScenarioCoursePrograms(ScenarioCourseProgram entity)
		{
			this.SendPropertyChanging();
			entity.ProgramOption = this;
		}
		
		private void detach_ScenarioCoursePrograms(ScenarioCourseProgram entity)
		{
			this.SendPropertyChanging();
			entity.ProgramOption = null;
		}
		
		private void attach_ProgramRequirementMaps(ProgramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.ProgramOption = this;
		}
		
		private void detach_ProgramRequirementMaps(ProgramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.ProgramOption = null;
		}
		
		private void attach_ProgramAdditionalInfos(ProgramAdditionalInfo entity)
		{
			this.SendPropertyChanging();
			entity.ProgramOption = this;
		}
		
		private void detach_ProgramAdditionalInfos(ProgramAdditionalInfo entity)
		{
			this.SendPropertyChanging();
			entity.ProgramOption = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProgramAdditionalInfo")]
	public partial class ProgramAdditionalInfo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProgramAdditionalId;
		
		private int _AcademicYear;
		
		private int _ProgramOptionId;
		
		private System.Nullable<int> _NewStudentEntering;
		
		private System.Nullable<int> _TotalNoOfStudent;
		
		private System.Nullable<int> _BachelorDegreeConferred;
		
		private EntityRef<ProgramOption> _ProgramOption;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgramAdditionalIdChanging(int value);
    partial void OnProgramAdditionalIdChanged();
    partial void OnAcademicYearChanging(int value);
    partial void OnAcademicYearChanged();
    partial void OnProgramOptionIdChanging(int value);
    partial void OnProgramOptionIdChanged();
    partial void OnNewStudentEnteringChanging(System.Nullable<int> value);
    partial void OnNewStudentEnteringChanged();
    partial void OnTotalNoOfStudentChanging(System.Nullable<int> value);
    partial void OnTotalNoOfStudentChanged();
    partial void OnBachelorDegreeConferredChanging(System.Nullable<int> value);
    partial void OnBachelorDegreeConferredChanged();
    #endregion
		
		public ProgramAdditionalInfo()
		{
			this._ProgramOption = default(EntityRef<ProgramOption>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramAdditionalId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProgramAdditionalId
		{
			get
			{
				return this._ProgramAdditionalId;
			}
			set
			{
				if ((this._ProgramAdditionalId != value))
				{
					this.OnProgramAdditionalIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramAdditionalId = value;
					this.SendPropertyChanged("ProgramAdditionalId");
					this.OnProgramAdditionalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYear", DbType="Int NOT NULL")]
		public int AcademicYear
		{
			get
			{
				return this._AcademicYear;
			}
			set
			{
				if ((this._AcademicYear != value))
				{
					this.OnAcademicYearChanging(value);
					this.SendPropertyChanging();
					this._AcademicYear = value;
					this.SendPropertyChanged("AcademicYear");
					this.OnAcademicYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramOptionId", DbType="Int NOT NULL")]
		public int ProgramOptionId
		{
			get
			{
				return this._ProgramOptionId;
			}
			set
			{
				if ((this._ProgramOptionId != value))
				{
					if (this._ProgramOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramOptionIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramOptionId = value;
					this.SendPropertyChanged("ProgramOptionId");
					this.OnProgramOptionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewStudentEntering", DbType="Int")]
		public System.Nullable<int> NewStudentEntering
		{
			get
			{
				return this._NewStudentEntering;
			}
			set
			{
				if ((this._NewStudentEntering != value))
				{
					this.OnNewStudentEnteringChanging(value);
					this.SendPropertyChanging();
					this._NewStudentEntering = value;
					this.SendPropertyChanged("NewStudentEntering");
					this.OnNewStudentEnteringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalNoOfStudent", DbType="Int")]
		public System.Nullable<int> TotalNoOfStudent
		{
			get
			{
				return this._TotalNoOfStudent;
			}
			set
			{
				if ((this._TotalNoOfStudent != value))
				{
					this.OnTotalNoOfStudentChanging(value);
					this.SendPropertyChanging();
					this._TotalNoOfStudent = value;
					this.SendPropertyChanged("TotalNoOfStudent");
					this.OnTotalNoOfStudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BachelorDegreeConferred", DbType="Int")]
		public System.Nullable<int> BachelorDegreeConferred
		{
			get
			{
				return this._BachelorDegreeConferred;
			}
			set
			{
				if ((this._BachelorDegreeConferred != value))
				{
					this.OnBachelorDegreeConferredChanging(value);
					this.SendPropertyChanging();
					this._BachelorDegreeConferred = value;
					this.SendPropertyChanged("BachelorDegreeConferred");
					this.OnBachelorDegreeConferredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramOption_ProgramAdditionalInfo", Storage="_ProgramOption", ThisKey="ProgramOptionId", OtherKey="ProgramOptionId", IsForeignKey=true)]
		public ProgramOption ProgramOption
		{
			get
			{
				return this._ProgramOption.Entity;
			}
			set
			{
				ProgramOption previousValue = this._ProgramOption.Entity;
				if (((previousValue != value) 
							|| (this._ProgramOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgramOption.Entity = null;
						previousValue.ProgramAdditionalInfos.Remove(this);
					}
					this._ProgramOption.Entity = value;
					if ((value != null))
					{
						value.ProgramAdditionalInfos.Add(this);
						this._ProgramOptionId = value.ProgramOptionId;
					}
					else
					{
						this._ProgramOptionId = default(int);
					}
					this.SendPropertyChanged("ProgramOption");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Program")]
	public partial class Program : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProgramId;
		
		private string _Name;
		
		private EntitySet<UserProgramMap> _UserProgramMaps;
		
		private EntitySet<ProgramOption> _ProgramOptions;
		
		private EntitySet<Expenditure> _Expenditures;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgramIdChanging(int value);
    partial void OnProgramIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Program()
		{
			this._UserProgramMaps = new EntitySet<UserProgramMap>(new Action<UserProgramMap>(this.attach_UserProgramMaps), new Action<UserProgramMap>(this.detach_UserProgramMaps));
			this._ProgramOptions = new EntitySet<ProgramOption>(new Action<ProgramOption>(this.attach_ProgramOptions), new Action<ProgramOption>(this.detach_ProgramOptions));
			this._Expenditures = new EntitySet<Expenditure>(new Action<Expenditure>(this.attach_Expenditures), new Action<Expenditure>(this.detach_Expenditures));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProgramId
		{
			get
			{
				return this._ProgramId;
			}
			set
			{
				if ((this._ProgramId != value))
				{
					this.OnProgramIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramId = value;
					this.SendPropertyChanged("ProgramId");
					this.OnProgramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_UserProgramMap", Storage="_UserProgramMaps", ThisKey="ProgramId", OtherKey="ProgramId")]
		public EntitySet<UserProgramMap> UserProgramMaps
		{
			get
			{
				return this._UserProgramMaps;
			}
			set
			{
				this._UserProgramMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_ProgramOption", Storage="_ProgramOptions", ThisKey="ProgramId", OtherKey="ProgramId")]
		public EntitySet<ProgramOption> ProgramOptions
		{
			get
			{
				return this._ProgramOptions;
			}
			set
			{
				this._ProgramOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_Expenditure", Storage="_Expenditures", ThisKey="ProgramId", OtherKey="ProgramId")]
		public EntitySet<Expenditure> Expenditures
		{
			get
			{
				return this._Expenditures;
			}
			set
			{
				this._Expenditures.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserProgramMaps(UserProgramMap entity)
		{
			this.SendPropertyChanging();
			entity.Program = this;
		}
		
		private void detach_UserProgramMaps(UserProgramMap entity)
		{
			this.SendPropertyChanging();
			entity.Program = null;
		}
		
		private void attach_ProgramOptions(ProgramOption entity)
		{
			this.SendPropertyChanging();
			entity.Program = this;
		}
		
		private void detach_ProgramOptions(ProgramOption entity)
		{
			this.SendPropertyChanging();
			entity.Program = null;
		}
		
		private void attach_Expenditures(Expenditure entity)
		{
			this.SendPropertyChanging();
			entity.Program = this;
		}
		
		private void detach_Expenditures(Expenditure entity)
		{
			this.SendPropertyChanging();
			entity.Program = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prerequisite")]
	public partial class Prerequisite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrerequisiteId;
		
		private int _CourseId;
		
		private int _NumberRequired;
		
		private bool _IsCorequisite;
		
		private EntitySet<CoursePrerequisiteMap> _CoursePrerequisiteMaps;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrerequisiteIdChanging(int value);
    partial void OnPrerequisiteIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnNumberRequiredChanging(int value);
    partial void OnNumberRequiredChanged();
    partial void OnIsCorequisiteChanging(bool value);
    partial void OnIsCorequisiteChanged();
    #endregion
		
		public Prerequisite()
		{
			this._CoursePrerequisiteMaps = new EntitySet<CoursePrerequisiteMap>(new Action<CoursePrerequisiteMap>(this.attach_CoursePrerequisiteMaps), new Action<CoursePrerequisiteMap>(this.detach_CoursePrerequisiteMaps));
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrerequisiteId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrerequisiteId
		{
			get
			{
				return this._PrerequisiteId;
			}
			set
			{
				if ((this._PrerequisiteId != value))
				{
					this.OnPrerequisiteIdChanging(value);
					this.SendPropertyChanging();
					this._PrerequisiteId = value;
					this.SendPropertyChanged("PrerequisiteId");
					this.OnPrerequisiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberRequired", DbType="Int NOT NULL")]
		public int NumberRequired
		{
			get
			{
				return this._NumberRequired;
			}
			set
			{
				if ((this._NumberRequired != value))
				{
					this.OnNumberRequiredChanging(value);
					this.SendPropertyChanging();
					this._NumberRequired = value;
					this.SendPropertyChanged("NumberRequired");
					this.OnNumberRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCorequisite", DbType="Bit NOT NULL")]
		public bool IsCorequisite
		{
			get
			{
				return this._IsCorequisite;
			}
			set
			{
				if ((this._IsCorequisite != value))
				{
					this.OnIsCorequisiteChanging(value);
					this.SendPropertyChanging();
					this._IsCorequisite = value;
					this.SendPropertyChanged("IsCorequisite");
					this.OnIsCorequisiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prerequisite_CoursePrerequisiteMap", Storage="_CoursePrerequisiteMaps", ThisKey="PrerequisiteId", OtherKey="PrerequisiteId")]
		public EntitySet<CoursePrerequisiteMap> CoursePrerequisiteMaps
		{
			get
			{
				return this._CoursePrerequisiteMaps;
			}
			set
			{
				this._CoursePrerequisiteMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Prerequisite", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Prerequisites.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Prerequisites.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CoursePrerequisiteMaps(CoursePrerequisiteMap entity)
		{
			this.SendPropertyChanging();
			entity.Prerequisite = this;
		}
		
		private void detach_CoursePrerequisiteMaps(CoursePrerequisiteMap entity)
		{
			this.SendPropertyChanging();
			entity.Prerequisite = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PDFfiles")]
	public partial class PDFfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private string _type;
		
		private System.Data.Linq.Binary _data;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OntypeChanging(string value);
    partial void OntypeChanged();
    partial void OndataChanging(System.Data.Linq.Binary value);
    partial void OndataChanged();
    #endregion
		
		public PDFfile()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_type", DbType="VarChar(500)")]
		public string type
		{
			get
			{
				return this._type;
			}
			set
			{
				if ((this._type != value))
				{
					this.OntypeChanging(value);
					this.SendPropertyChanging();
					this._type = value;
					this.SendPropertyChanged("type");
					this.OntypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary data
		{
			get
			{
				return this._data;
			}
			set
			{
				if ((this._data != value))
				{
					this.OndataChanging(value);
					this.SendPropertyChanging();
					this._data = value;
					this.SendPropertyChanged("data");
					this.OndataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parameter")]
	public partial class Parameter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParameterId;
		
		private string _Name;
		
		private string _Desc;
		
		private EntitySet<RuleMap> _RuleMaps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParameterIdChanging(int value);
    partial void OnParameterIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescChanging(string value);
    partial void OnDescChanged();
    #endregion
		
		public Parameter()
		{
			this._RuleMaps = new EntitySet<RuleMap>(new Action<RuleMap>(this.attach_RuleMaps), new Action<RuleMap>(this.detach_RuleMaps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParameterId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ParameterId
		{
			get
			{
				return this._ParameterId;
			}
			set
			{
				if ((this._ParameterId != value))
				{
					this.OnParameterIdChanging(value);
					this.SendPropertyChanging();
					this._ParameterId = value;
					this.SendPropertyChanged("ParameterId");
					this.OnParameterIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Desc]", Storage="_Desc", DbType="NVarChar(500)")]
		public string Desc
		{
			get
			{
				return this._Desc;
			}
			set
			{
				if ((this._Desc != value))
				{
					this.OnDescChanging(value);
					this.SendPropertyChanging();
					this._Desc = value;
					this.SendPropertyChanged("Desc");
					this.OnDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parameter_RuleMap", Storage="_RuleMaps", ThisKey="ParameterId", OtherKey="ParameterId")]
		public EntitySet<RuleMap> RuleMaps
		{
			get
			{
				return this._RuleMaps;
			}
			set
			{
				this._RuleMaps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RuleMaps(RuleMap entity)
		{
			this.SendPropertyChanging();
			entity.Parameter = this;
		}
		
		private void detach_RuleMaps(RuleMap entity)
		{
			this.SendPropertyChanging();
			entity.Parameter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MaterialUpload")]
	public partial class MaterialUpload : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MaterialUploadId;
		
		private int _CourseId;
		
		private int _UserId;
		
		private string _Description;
		
		private string _UploadLink;
		
		private int _EvidenceTypeId;
		
		private EntityRef<User> _User;
		
		private EntityRef<EvidenceType> _EvidenceType;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaterialUploadIdChanging(int value);
    partial void OnMaterialUploadIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUploadLinkChanging(string value);
    partial void OnUploadLinkChanged();
    partial void OnEvidenceTypeIdChanging(int value);
    partial void OnEvidenceTypeIdChanged();
    #endregion
		
		public MaterialUpload()
		{
			this._User = default(EntityRef<User>);
			this._EvidenceType = default(EntityRef<EvidenceType>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaterialUploadId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MaterialUploadId
		{
			get
			{
				return this._MaterialUploadId;
			}
			set
			{
				if ((this._MaterialUploadId != value))
				{
					this.OnMaterialUploadIdChanging(value);
					this.SendPropertyChanging();
					this._MaterialUploadId = value;
					this.SendPropertyChanged("MaterialUploadId");
					this.OnMaterialUploadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadLink", DbType="NVarChar(100)")]
		public string UploadLink
		{
			get
			{
				return this._UploadLink;
			}
			set
			{
				if ((this._UploadLink != value))
				{
					this.OnUploadLinkChanging(value);
					this.SendPropertyChanging();
					this._UploadLink = value;
					this.SendPropertyChanged("UploadLink");
					this.OnUploadLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvidenceTypeId", DbType="Int NOT NULL")]
		public int EvidenceTypeId
		{
			get
			{
				return this._EvidenceTypeId;
			}
			set
			{
				if ((this._EvidenceTypeId != value))
				{
					if (this._EvidenceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEvidenceTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EvidenceTypeId = value;
					this.SendPropertyChanged("EvidenceTypeId");
					this.OnEvidenceTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_MaterialUpload", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.MaterialUploads.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.MaterialUploads.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EvidenceType_MaterialUpload", Storage="_EvidenceType", ThisKey="EvidenceTypeId", OtherKey="EvidenceTypeId", IsForeignKey=true)]
		public EvidenceType EvidenceType
		{
			get
			{
				return this._EvidenceType.Entity;
			}
			set
			{
				EvidenceType previousValue = this._EvidenceType.Entity;
				if (((previousValue != value) 
							|| (this._EvidenceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EvidenceType.Entity = null;
						previousValue.MaterialUploads.Remove(this);
					}
					this._EvidenceType.Entity = value;
					if ((value != null))
					{
						value.MaterialUploads.Add(this);
						this._EvidenceTypeId = value.EvidenceTypeId;
					}
					else
					{
						this._EvidenceTypeId = default(int);
					}
					this.SendPropertyChanged("EvidenceType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_MaterialUpload", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.MaterialUploads.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.MaterialUploads.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InstructorCourseRelation")]
	public partial class InstructorCourseRelation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _CourseId;
		
		private bool _IsIncharge;
		
		private EntityRef<User> _User;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnIsInchargeChanging(bool value);
    partial void OnIsInchargeChanged();
    #endregion
		
		public InstructorCourseRelation()
		{
			this._User = default(EntityRef<User>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsIncharge", DbType="Bit NOT NULL")]
		public bool IsIncharge
		{
			get
			{
				return this._IsIncharge;
			}
			set
			{
				if ((this._IsIncharge != value))
				{
					this.OnIsInchargeChanging(value);
					this.SendPropertyChanging();
					this._IsIncharge = value;
					this.SendPropertyChanged("IsIncharge");
					this.OnIsInchargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_InstructorCourseRelation", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.InstructorCourseRelations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.InstructorCourseRelations.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_InstructorCourseRelation", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.InstructorCourseRelations.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.InstructorCourseRelations.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImagesPath")]
	public partial class ImagesPath : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ImageId;
		
		private string _ImageName;
		
		private string _ImagePath;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImageIdChanging(int value);
    partial void OnImageIdChanged();
    partial void OnImageNameChanging(string value);
    partial void OnImageNameChanged();
    partial void OnImagePathChanging(string value);
    partial void OnImagePathChanged();
    #endregion
		
		public ImagesPath()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ImageId
		{
			get
			{
				return this._ImageId;
			}
			set
			{
				if ((this._ImageId != value))
				{
					this.OnImageIdChanging(value);
					this.SendPropertyChanging();
					this._ImageId = value;
					this.SendPropertyChanged("ImageId");
					this.OnImageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageName", DbType="VarChar(50)")]
		public string ImageName
		{
			get
			{
				return this._ImageName;
			}
			set
			{
				if ((this._ImageName != value))
				{
					this.OnImageNameChanging(value);
					this.SendPropertyChanging();
					this._ImageName = value;
					this.SendPropertyChanged("ImageName");
					this.OnImageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImagePath", DbType="NVarChar(MAX)")]
		public string ImagePath
		{
			get
			{
				return this._ImagePath;
			}
			set
			{
				if ((this._ImagePath != value))
				{
					this.OnImagePathChanging(value);
					this.SendPropertyChanging();
					this._ImagePath = value;
					this.SendPropertyChanged("ImagePath");
					this.OnImagePathChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Funding")]
	public partial class Funding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FundingId;
		
		private int _UserId;
		
		private string _Year;
		
		private string _NSERCResearchGrants;
		
		private string _OtherResearchGrants;
		
		private string _ResearchContracts;
		
		private string _NonResearch;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFundingIdChanging(int value);
    partial void OnFundingIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnNSERCResearchGrantsChanging(string value);
    partial void OnNSERCResearchGrantsChanged();
    partial void OnOtherResearchGrantsChanging(string value);
    partial void OnOtherResearchGrantsChanged();
    partial void OnResearchContractsChanging(string value);
    partial void OnResearchContractsChanged();
    partial void OnNonResearchChanging(string value);
    partial void OnNonResearchChanged();
    #endregion
		
		public Funding()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FundingId
		{
			get
			{
				return this._FundingId;
			}
			set
			{
				if ((this._FundingId != value))
				{
					this.OnFundingIdChanging(value);
					this.SendPropertyChanging();
					this._FundingId = value;
					this.SendPropertyChanged("FundingId");
					this.OnFundingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NSERCResearchGrants", DbType="NVarChar(500)")]
		public string NSERCResearchGrants
		{
			get
			{
				return this._NSERCResearchGrants;
			}
			set
			{
				if ((this._NSERCResearchGrants != value))
				{
					this.OnNSERCResearchGrantsChanging(value);
					this.SendPropertyChanging();
					this._NSERCResearchGrants = value;
					this.SendPropertyChanged("NSERCResearchGrants");
					this.OnNSERCResearchGrantsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OtherResearchGrants", DbType="NVarChar(500)")]
		public string OtherResearchGrants
		{
			get
			{
				return this._OtherResearchGrants;
			}
			set
			{
				if ((this._OtherResearchGrants != value))
				{
					this.OnOtherResearchGrantsChanging(value);
					this.SendPropertyChanging();
					this._OtherResearchGrants = value;
					this.SendPropertyChanged("OtherResearchGrants");
					this.OnOtherResearchGrantsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResearchContracts", DbType="NVarChar(500)")]
		public string ResearchContracts
		{
			get
			{
				return this._ResearchContracts;
			}
			set
			{
				if ((this._ResearchContracts != value))
				{
					this.OnResearchContractsChanging(value);
					this.SendPropertyChanging();
					this._ResearchContracts = value;
					this.SendPropertyChanged("ResearchContracts");
					this.OnResearchContractsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NonResearch", DbType="NVarChar(500)")]
		public string NonResearch
		{
			get
			{
				return this._NonResearch;
			}
			set
			{
				if ((this._NonResearch != value))
				{
					this.OnNonResearchChanging(value);
					this.SendPropertyChanging();
					this._NonResearch = value;
					this.SendPropertyChanged("NonResearch");
					this.OnNonResearchChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Funding", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Fundings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Fundings.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faculty")]
	public partial class Faculty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FacultyId;
		
		private string _FacultyName;
		
		private string _Description;
		
		private EntitySet<Department> _Departments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFacultyIdChanging(int value);
    partial void OnFacultyIdChanged();
    partial void OnFacultyNameChanging(string value);
    partial void OnFacultyNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Faculty()
		{
			this._Departments = new EntitySet<Department>(new Action<Department>(this.attach_Departments), new Action<Department>(this.detach_Departments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FacultyId
		{
			get
			{
				return this._FacultyId;
			}
			set
			{
				if ((this._FacultyId != value))
				{
					this.OnFacultyIdChanging(value);
					this.SendPropertyChanging();
					this._FacultyId = value;
					this.SendPropertyChanged("FacultyId");
					this.OnFacultyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyName", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string FacultyName
		{
			get
			{
				return this._FacultyName;
			}
			set
			{
				if ((this._FacultyName != value))
				{
					this.OnFacultyNameChanging(value);
					this.SendPropertyChanging();
					this._FacultyName = value;
					this.SendPropertyChanged("FacultyName");
					this.OnFacultyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Department", Storage="_Departments", ThisKey="FacultyId", OtherKey="FacultyId")]
		public EntitySet<Department> Departments
		{
			get
			{
				return this._Departments;
			}
			set
			{
				this._Departments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = this;
		}
		
		private void detach_Departments(Department entity)
		{
			this.SendPropertyChanging();
			entity.Faculty = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExternalGroupMap")]
	public partial class ExternalGroupMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExternalGroupMapId;
		
		private string _AMSGroupName;
		
		private string _ExternalGroupName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExternalGroupMapIdChanging(int value);
    partial void OnExternalGroupMapIdChanged();
    partial void OnAMSGroupNameChanging(string value);
    partial void OnAMSGroupNameChanged();
    partial void OnExternalGroupNameChanging(string value);
    partial void OnExternalGroupNameChanged();
    #endregion
		
		public ExternalGroupMap()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalGroupMapId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExternalGroupMapId
		{
			get
			{
				return this._ExternalGroupMapId;
			}
			set
			{
				if ((this._ExternalGroupMapId != value))
				{
					this.OnExternalGroupMapIdChanging(value);
					this.SendPropertyChanging();
					this._ExternalGroupMapId = value;
					this.SendPropertyChanged("ExternalGroupMapId");
					this.OnExternalGroupMapIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AMSGroupName", DbType="NVarChar(50)")]
		public string AMSGroupName
		{
			get
			{
				return this._AMSGroupName;
			}
			set
			{
				if ((this._AMSGroupName != value))
				{
					this.OnAMSGroupNameChanging(value);
					this.SendPropertyChanging();
					this._AMSGroupName = value;
					this.SendPropertyChanged("AMSGroupName");
					this.OnAMSGroupNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExternalGroupName", DbType="NVarChar(50)")]
		public string ExternalGroupName
		{
			get
			{
				return this._ExternalGroupName;
			}
			set
			{
				if ((this._ExternalGroupName != value))
				{
					this.OnExternalGroupNameChanging(value);
					this.SendPropertyChanging();
					this._ExternalGroupName = value;
					this.SendPropertyChanged("ExternalGroupName");
					this.OnExternalGroupNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExpenditureType")]
	public partial class ExpenditureType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExpenditureTypeId;
		
		private string _Name;
		
		private int _Order;
		
		private EntitySet<Expenditure> _Expenditures;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExpenditureTypeIdChanging(int value);
    partial void OnExpenditureTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public ExpenditureType()
		{
			this._Expenditures = new EntitySet<Expenditure>(new Action<Expenditure>(this.attach_Expenditures), new Action<Expenditure>(this.detach_Expenditures));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenditureTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExpenditureTypeId
		{
			get
			{
				return this._ExpenditureTypeId;
			}
			set
			{
				if ((this._ExpenditureTypeId != value))
				{
					this.OnExpenditureTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ExpenditureTypeId = value;
					this.SendPropertyChanged("ExpenditureTypeId");
					this.OnExpenditureTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExpenditureType_Expenditure", Storage="_Expenditures", ThisKey="ExpenditureTypeId", OtherKey="ExpenditureTypeId")]
		public EntitySet<Expenditure> Expenditures
		{
			get
			{
				return this._Expenditures;
			}
			set
			{
				this._Expenditures.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Expenditures(Expenditure entity)
		{
			this.SendPropertyChanging();
			entity.ExpenditureType = this;
		}
		
		private void detach_Expenditures(Expenditure entity)
		{
			this.SendPropertyChanging();
			entity.ExpenditureType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Expenditure")]
	public partial class Expenditure : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExpenditureId;
		
		private int _ExpenditureTypeId;
		
		private int _ProgramId;
		
		private decimal _Amount;
		
		private int _AcademicYear;
		
		private string _Name;
		
		private int _Order;
		
		private EntityRef<ExpenditureType> _ExpenditureType;
		
		private EntityRef<Program> _Program;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExpenditureIdChanging(int value);
    partial void OnExpenditureIdChanged();
    partial void OnExpenditureTypeIdChanging(int value);
    partial void OnExpenditureTypeIdChanged();
    partial void OnProgramIdChanging(int value);
    partial void OnProgramIdChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnAcademicYearChanging(int value);
    partial void OnAcademicYearChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderChanging(int value);
    partial void OnOrderChanged();
    #endregion
		
		public Expenditure()
		{
			this._ExpenditureType = default(EntityRef<ExpenditureType>);
			this._Program = default(EntityRef<Program>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenditureId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExpenditureId
		{
			get
			{
				return this._ExpenditureId;
			}
			set
			{
				if ((this._ExpenditureId != value))
				{
					this.OnExpenditureIdChanging(value);
					this.SendPropertyChanging();
					this._ExpenditureId = value;
					this.SendPropertyChanged("ExpenditureId");
					this.OnExpenditureIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenditureTypeId", DbType="Int NOT NULL")]
		public int ExpenditureTypeId
		{
			get
			{
				return this._ExpenditureTypeId;
			}
			set
			{
				if ((this._ExpenditureTypeId != value))
				{
					if (this._ExpenditureType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpenditureTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ExpenditureTypeId = value;
					this.SendPropertyChanged("ExpenditureTypeId");
					this.OnExpenditureTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramId", DbType="Int NOT NULL")]
		public int ProgramId
		{
			get
			{
				return this._ProgramId;
			}
			set
			{
				if ((this._ProgramId != value))
				{
					if (this._Program.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramId = value;
					this.SendPropertyChanged("ProgramId");
					this.OnProgramIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,3) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicYear", DbType="Int NOT NULL")]
		public int AcademicYear
		{
			get
			{
				return this._AcademicYear;
			}
			set
			{
				if ((this._AcademicYear != value))
				{
					this.OnAcademicYearChanging(value);
					this.SendPropertyChanging();
					this._AcademicYear = value;
					this.SendPropertyChanged("AcademicYear");
					this.OnAcademicYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="Int NOT NULL")]
		public int Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExpenditureType_Expenditure", Storage="_ExpenditureType", ThisKey="ExpenditureTypeId", OtherKey="ExpenditureTypeId", IsForeignKey=true)]
		public ExpenditureType ExpenditureType
		{
			get
			{
				return this._ExpenditureType.Entity;
			}
			set
			{
				ExpenditureType previousValue = this._ExpenditureType.Entity;
				if (((previousValue != value) 
							|| (this._ExpenditureType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExpenditureType.Entity = null;
						previousValue.Expenditures.Remove(this);
					}
					this._ExpenditureType.Entity = value;
					if ((value != null))
					{
						value.Expenditures.Add(this);
						this._ExpenditureTypeId = value.ExpenditureTypeId;
					}
					else
					{
						this._ExpenditureTypeId = default(int);
					}
					this.SendPropertyChanged("ExpenditureType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Program_Expenditure", Storage="_Program", ThisKey="ProgramId", OtherKey="ProgramId", IsForeignKey=true)]
		public Program Program
		{
			get
			{
				return this._Program.Entity;
			}
			set
			{
				Program previousValue = this._Program.Entity;
				if (((previousValue != value) 
							|| (this._Program.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Program.Entity = null;
						previousValue.Expenditures.Remove(this);
					}
					this._Program.Entity = value;
					if ((value != null))
					{
						value.Expenditures.Add(this);
						this._ProgramId = value.ProgramId;
					}
					else
					{
						this._ProgramId = default(int);
					}
					this.SendPropertyChanged("Program");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamType")]
	public partial class ExamType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamTypeId;
		
		private string _ExamTypeName;
		
		private EntitySet<ExamArchive> _ExamArchives;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamTypeIdChanging(int value);
    partial void OnExamTypeIdChanged();
    partial void OnExamTypeNameChanging(string value);
    partial void OnExamTypeNameChanged();
    #endregion
		
		public ExamType()
		{
			this._ExamArchives = new EntitySet<ExamArchive>(new Action<ExamArchive>(this.attach_ExamArchives), new Action<ExamArchive>(this.detach_ExamArchives));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExamTypeId
		{
			get
			{
				return this._ExamTypeId;
			}
			set
			{
				if ((this._ExamTypeId != value))
				{
					this.OnExamTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ExamTypeId = value;
					this.SendPropertyChanged("ExamTypeId");
					this.OnExamTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamTypeName", DbType="NVarChar(100)")]
		public string ExamTypeName
		{
			get
			{
				return this._ExamTypeName;
			}
			set
			{
				if ((this._ExamTypeName != value))
				{
					this.OnExamTypeNameChanging(value);
					this.SendPropertyChanging();
					this._ExamTypeName = value;
					this.SendPropertyChanged("ExamTypeName");
					this.OnExamTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamType_ExamArchive", Storage="_ExamArchives", ThisKey="ExamTypeId", OtherKey="ExamTypeId")]
		public EntitySet<ExamArchive> ExamArchives
		{
			get
			{
				return this._ExamArchives;
			}
			set
			{
				this._ExamArchives.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExamArchives(ExamArchive entity)
		{
			this.SendPropertyChanging();
			entity.ExamType = this;
		}
		
		private void detach_ExamArchives(ExamArchive entity)
		{
			this.SendPropertyChanging();
			entity.ExamType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExamArchive")]
	public partial class ExamArchive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamPaperId;
		
		private System.DateTime _FromDate;
		
		private System.DateTime _ToDate;
		
		private int _CourseId;
		
		private int _SectionId;
		
		private int _ExamTypeId;
		
		private string _ExamPaperLink;
		
		private string _ExamPaperName;
		
		private System.Nullable<int> _TermYear;
		
		private EntityRef<ExamType> _ExamType;
		
		private EntityRef<Section> _Section;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamPaperIdChanging(int value);
    partial void OnExamPaperIdChanged();
    partial void OnFromDateChanging(System.DateTime value);
    partial void OnFromDateChanged();
    partial void OnToDateChanging(System.DateTime value);
    partial void OnToDateChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnSectionIdChanging(int value);
    partial void OnSectionIdChanged();
    partial void OnExamTypeIdChanging(int value);
    partial void OnExamTypeIdChanged();
    partial void OnExamPaperLinkChanging(string value);
    partial void OnExamPaperLinkChanged();
    partial void OnExamPaperNameChanging(string value);
    partial void OnExamPaperNameChanged();
    partial void OnTermYearChanging(System.Nullable<int> value);
    partial void OnTermYearChanged();
    #endregion
		
		public ExamArchive()
		{
			this._ExamType = default(EntityRef<ExamType>);
			this._Section = default(EntityRef<Section>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamPaperId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExamPaperId
		{
			get
			{
				return this._ExamPaperId;
			}
			set
			{
				if ((this._ExamPaperId != value))
				{
					this.OnExamPaperIdChanging(value);
					this.SendPropertyChanging();
					this._ExamPaperId = value;
					this.SendPropertyChanged("ExamPaperId");
					this.OnExamPaperIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromDate", DbType="DateTime NOT NULL")]
		public System.DateTime FromDate
		{
			get
			{
				return this._FromDate;
			}
			set
			{
				if ((this._FromDate != value))
				{
					this.OnFromDateChanging(value);
					this.SendPropertyChanging();
					this._FromDate = value;
					this.SendPropertyChanged("FromDate");
					this.OnFromDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToDate", DbType="DateTime NOT NULL")]
		public System.DateTime ToDate
		{
			get
			{
				return this._ToDate;
			}
			set
			{
				if ((this._ToDate != value))
				{
					this.OnToDateChanging(value);
					this.SendPropertyChanging();
					this._ToDate = value;
					this.SendPropertyChanged("ToDate");
					this.OnToDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectionId", DbType="Int NOT NULL")]
		public int SectionId
		{
			get
			{
				return this._SectionId;
			}
			set
			{
				if ((this._SectionId != value))
				{
					if (this._Section.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectionIdChanging(value);
					this.SendPropertyChanging();
					this._SectionId = value;
					this.SendPropertyChanged("SectionId");
					this.OnSectionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamTypeId", DbType="Int NOT NULL")]
		public int ExamTypeId
		{
			get
			{
				return this._ExamTypeId;
			}
			set
			{
				if ((this._ExamTypeId != value))
				{
					if (this._ExamType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamTypeIdChanging(value);
					this.SendPropertyChanging();
					this._ExamTypeId = value;
					this.SendPropertyChanged("ExamTypeId");
					this.OnExamTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamPaperLink", DbType="NVarChar(100)")]
		public string ExamPaperLink
		{
			get
			{
				return this._ExamPaperLink;
			}
			set
			{
				if ((this._ExamPaperLink != value))
				{
					this.OnExamPaperLinkChanging(value);
					this.SendPropertyChanging();
					this._ExamPaperLink = value;
					this.SendPropertyChanged("ExamPaperLink");
					this.OnExamPaperLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamPaperName", DbType="NVarChar(100)")]
		public string ExamPaperName
		{
			get
			{
				return this._ExamPaperName;
			}
			set
			{
				if ((this._ExamPaperName != value))
				{
					this.OnExamPaperNameChanging(value);
					this.SendPropertyChanging();
					this._ExamPaperName = value;
					this.SendPropertyChanged("ExamPaperName");
					this.OnExamPaperNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermYear", DbType="Int")]
		public System.Nullable<int> TermYear
		{
			get
			{
				return this._TermYear;
			}
			set
			{
				if ((this._TermYear != value))
				{
					this.OnTermYearChanging(value);
					this.SendPropertyChanging();
					this._TermYear = value;
					this.SendPropertyChanged("TermYear");
					this.OnTermYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExamType_ExamArchive", Storage="_ExamType", ThisKey="ExamTypeId", OtherKey="ExamTypeId", IsForeignKey=true)]
		public ExamType ExamType
		{
			get
			{
				return this._ExamType.Entity;
			}
			set
			{
				ExamType previousValue = this._ExamType.Entity;
				if (((previousValue != value) 
							|| (this._ExamType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExamType.Entity = null;
						previousValue.ExamArchives.Remove(this);
					}
					this._ExamType.Entity = value;
					if ((value != null))
					{
						value.ExamArchives.Add(this);
						this._ExamTypeId = value.ExamTypeId;
					}
					else
					{
						this._ExamTypeId = default(int);
					}
					this.SendPropertyChanged("ExamType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Section_ExamArchive", Storage="_Section", ThisKey="SectionId", OtherKey="SectionId", IsForeignKey=true)]
		public Section Section
		{
			get
			{
				return this._Section.Entity;
			}
			set
			{
				Section previousValue = this._Section.Entity;
				if (((previousValue != value) 
							|| (this._Section.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Section.Entity = null;
						previousValue.ExamArchives.Remove(this);
					}
					this._Section.Entity = value;
					if ((value != null))
					{
						value.ExamArchives.Add(this);
						this._SectionId = value.SectionId;
					}
					else
					{
						this._SectionId = default(int);
					}
					this.SendPropertyChanged("Section");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_ExamArchive", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.ExamArchives.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.ExamArchives.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EvidenceType")]
	public partial class EvidenceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EvidenceTypeId;
		
		private string _Name;
		
		private bool _EvidenceFlag;
		
		private EntitySet<MaterialUpload> _MaterialUploads;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEvidenceTypeIdChanging(int value);
    partial void OnEvidenceTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEvidenceFlagChanging(bool value);
    partial void OnEvidenceFlagChanged();
    #endregion
		
		public EvidenceType()
		{
			this._MaterialUploads = new EntitySet<MaterialUpload>(new Action<MaterialUpload>(this.attach_MaterialUploads), new Action<MaterialUpload>(this.detach_MaterialUploads));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvidenceTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EvidenceTypeId
		{
			get
			{
				return this._EvidenceTypeId;
			}
			set
			{
				if ((this._EvidenceTypeId != value))
				{
					this.OnEvidenceTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EvidenceTypeId = value;
					this.SendPropertyChanged("EvidenceTypeId");
					this.OnEvidenceTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvidenceFlag", DbType="Bit NOT NULL")]
		public bool EvidenceFlag
		{
			get
			{
				return this._EvidenceFlag;
			}
			set
			{
				if ((this._EvidenceFlag != value))
				{
					this.OnEvidenceFlagChanging(value);
					this.SendPropertyChanging();
					this._EvidenceFlag = value;
					this.SendPropertyChanged("EvidenceFlag");
					this.OnEvidenceFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EvidenceType_MaterialUpload", Storage="_MaterialUploads", ThisKey="EvidenceTypeId", OtherKey="EvidenceTypeId")]
		public EntitySet<MaterialUpload> MaterialUploads
		{
			get
			{
				return this._MaterialUploads;
			}
			set
			{
				this._MaterialUploads.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MaterialUploads(MaterialUpload entity)
		{
			this.SendPropertyChanging();
			entity.EvidenceType = this;
		}
		
		private void detach_MaterialUploads(MaterialUpload entity)
		{
			this.SendPropertyChanging();
			entity.EvidenceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ErrorLog")]
	public partial class ErrorLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ErrorID;
		
		private string _Description;
		
		private string _Page;
		
		private string _PostBackData;
		
		private string _BrowserName;
		
		private string _BrowserVersion;
		
		private string _BrowserPlatform;
		
		private bool _MinorError;
		
		private string _StackTrace;
		
		private System.DateTime _Time;
		
		private System.Nullable<int> _UserID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnErrorIDChanging(int value);
    partial void OnErrorIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPageChanging(string value);
    partial void OnPageChanged();
    partial void OnPostBackDataChanging(string value);
    partial void OnPostBackDataChanged();
    partial void OnBrowserNameChanging(string value);
    partial void OnBrowserNameChanged();
    partial void OnBrowserVersionChanging(string value);
    partial void OnBrowserVersionChanged();
    partial void OnBrowserPlatformChanging(string value);
    partial void OnBrowserPlatformChanged();
    partial void OnMinorErrorChanging(bool value);
    partial void OnMinorErrorChanged();
    partial void OnStackTraceChanging(string value);
    partial void OnStackTraceChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public ErrorLog()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ErrorID
		{
			get
			{
				return this._ErrorID;
			}
			set
			{
				if ((this._ErrorID != value))
				{
					this.OnErrorIDChanging(value);
					this.SendPropertyChanging();
					this._ErrorID = value;
					this.SendPropertyChanged("ErrorID");
					this.OnErrorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(700) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Page", DbType="VarChar(300)")]
		public string Page
		{
			get
			{
				return this._Page;
			}
			set
			{
				if ((this._Page != value))
				{
					this.OnPageChanging(value);
					this.SendPropertyChanging();
					this._Page = value;
					this.SendPropertyChanged("Page");
					this.OnPageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostBackData", DbType="NVarChar(MAX)")]
		public string PostBackData
		{
			get
			{
				return this._PostBackData;
			}
			set
			{
				if ((this._PostBackData != value))
				{
					this.OnPostBackDataChanging(value);
					this.SendPropertyChanging();
					this._PostBackData = value;
					this.SendPropertyChanged("PostBackData");
					this.OnPostBackDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrowserName", DbType="VarChar(300)")]
		public string BrowserName
		{
			get
			{
				return this._BrowserName;
			}
			set
			{
				if ((this._BrowserName != value))
				{
					this.OnBrowserNameChanging(value);
					this.SendPropertyChanging();
					this._BrowserName = value;
					this.SendPropertyChanged("BrowserName");
					this.OnBrowserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrowserVersion", DbType="VarChar(300)")]
		public string BrowserVersion
		{
			get
			{
				return this._BrowserVersion;
			}
			set
			{
				if ((this._BrowserVersion != value))
				{
					this.OnBrowserVersionChanging(value);
					this.SendPropertyChanging();
					this._BrowserVersion = value;
					this.SendPropertyChanged("BrowserVersion");
					this.OnBrowserVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrowserPlatform", DbType="VarChar(300)")]
		public string BrowserPlatform
		{
			get
			{
				return this._BrowserPlatform;
			}
			set
			{
				if ((this._BrowserPlatform != value))
				{
					this.OnBrowserPlatformChanging(value);
					this.SendPropertyChanging();
					this._BrowserPlatform = value;
					this.SendPropertyChanged("BrowserPlatform");
					this.OnBrowserPlatformChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinorError", DbType="Bit NOT NULL")]
		public bool MinorError
		{
			get
			{
				return this._MinorError;
			}
			set
			{
				if ((this._MinorError != value))
				{
					this.OnMinorErrorChanging(value);
					this.SendPropertyChanging();
					this._MinorError = value;
					this.SendPropertyChanged("MinorError");
					this.OnMinorErrorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StackTrace", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string StackTrace
		{
			get
			{
				return this._StackTrace;
			}
			set
			{
				if ((this._StackTrace != value))
				{
					this.OnStackTraceChanging(value);
					this.SendPropertyChanging();
					this._StackTrace = value;
					this.SendPropertyChanged("StackTrace");
					this.OnStackTraceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ErrorLog", Storage="_User", ThisKey="UserID", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ErrorLogs.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ErrorLogs.Add(this);
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Department")]
	public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DepartmentId;
		
		private string _DepartmentName;
		
		private string _Abbreviation;
		
		private int _FacultyId;
		
		private EntitySet<UserDepartmentMap> _UserDepartmentMaps;
		
		private EntitySet<CourseAbbreviation> _CourseAbbreviations;
		
		private EntityRef<Faculty> _Faculty;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    partial void OnFacultyIdChanging(int value);
    partial void OnFacultyIdChanged();
    #endregion
		
		public Department()
		{
			this._UserDepartmentMaps = new EntitySet<UserDepartmentMap>(new Action<UserDepartmentMap>(this.attach_UserDepartmentMaps), new Action<UserDepartmentMap>(this.detach_UserDepartmentMaps));
			this._CourseAbbreviations = new EntitySet<CourseAbbreviation>(new Action<CourseAbbreviation>(this.attach_CourseAbbreviations), new Action<CourseAbbreviation>(this.detach_CourseAbbreviations));
			this._Faculty = default(EntityRef<Faculty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string DepartmentName
		{
			get
			{
				return this._DepartmentName;
			}
			set
			{
				if ((this._DepartmentName != value))
				{
					this.OnDepartmentNameChanging(value);
					this.SendPropertyChanging();
					this._DepartmentName = value;
					this.SendPropertyChanged("DepartmentName");
					this.OnDepartmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbreviation", DbType="NVarChar(20)")]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacultyId", DbType="Int NOT NULL")]
		public int FacultyId
		{
			get
			{
				return this._FacultyId;
			}
			set
			{
				if ((this._FacultyId != value))
				{
					if (this._Faculty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacultyIdChanging(value);
					this.SendPropertyChanging();
					this._FacultyId = value;
					this.SendPropertyChanged("FacultyId");
					this.OnFacultyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_UserDepartmentMap", Storage="_UserDepartmentMaps", ThisKey="DepartmentId", OtherKey="DepartmentId")]
		public EntitySet<UserDepartmentMap> UserDepartmentMaps
		{
			get
			{
				return this._UserDepartmentMaps;
			}
			set
			{
				this._UserDepartmentMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_CourseAbbreviation", Storage="_CourseAbbreviations", ThisKey="DepartmentId", OtherKey="DepartmentId")]
		public EntitySet<CourseAbbreviation> CourseAbbreviations
		{
			get
			{
				return this._CourseAbbreviations;
			}
			set
			{
				this._CourseAbbreviations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculty_Department", Storage="_Faculty", ThisKey="FacultyId", OtherKey="FacultyId", IsForeignKey=true)]
		public Faculty Faculty
		{
			get
			{
				return this._Faculty.Entity;
			}
			set
			{
				Faculty previousValue = this._Faculty.Entity;
				if (((previousValue != value) 
							|| (this._Faculty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculty.Entity = null;
						previousValue.Departments.Remove(this);
					}
					this._Faculty.Entity = value;
					if ((value != null))
					{
						value.Departments.Add(this);
						this._FacultyId = value.FacultyId;
					}
					else
					{
						this._FacultyId = default(int);
					}
					this.SendPropertyChanged("Faculty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserDepartmentMaps(UserDepartmentMap entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_UserDepartmentMaps(UserDepartmentMap entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
		
		private void attach_CourseAbbreviations(CourseAbbreviation entity)
		{
			this.SendPropertyChanging();
			entity.Department = this;
		}
		
		private void detach_CourseAbbreviations(CourseAbbreviation entity)
		{
			this.SendPropertyChanging();
			entity.Department = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Degree")]
	public partial class Degree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DegreeId;
		
		private int _UserId;
		
		private string _Degrees;
		
		private string _Fields;
		
		private System.DateTime _DateAwarded;
		
		private string _InstitutionorCountry;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDegreeIdChanging(int value);
    partial void OnDegreeIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDegreesChanging(string value);
    partial void OnDegreesChanged();
    partial void OnFieldsChanging(string value);
    partial void OnFieldsChanged();
    partial void OnDateAwardedChanging(System.DateTime value);
    partial void OnDateAwardedChanged();
    partial void OnInstitutionorCountryChanging(string value);
    partial void OnInstitutionorCountryChanged();
    #endregion
		
		public Degree()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DegreeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DegreeId
		{
			get
			{
				return this._DegreeId;
			}
			set
			{
				if ((this._DegreeId != value))
				{
					this.OnDegreeIdChanging(value);
					this.SendPropertyChanging();
					this._DegreeId = value;
					this.SendPropertyChanged("DegreeId");
					this.OnDegreeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Degrees", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Degrees
		{
			get
			{
				return this._Degrees;
			}
			set
			{
				if ((this._Degrees != value))
				{
					this.OnDegreesChanging(value);
					this.SendPropertyChanging();
					this._Degrees = value;
					this.SendPropertyChanged("Degrees");
					this.OnDegreesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fields", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Fields
		{
			get
			{
				return this._Fields;
			}
			set
			{
				if ((this._Fields != value))
				{
					this.OnFieldsChanging(value);
					this.SendPropertyChanging();
					this._Fields = value;
					this.SendPropertyChanged("Fields");
					this.OnFieldsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAwarded", DbType="DateTime NOT NULL")]
		public System.DateTime DateAwarded
		{
			get
			{
				return this._DateAwarded;
			}
			set
			{
				if ((this._DateAwarded != value))
				{
					this.OnDateAwardedChanging(value);
					this.SendPropertyChanging();
					this._DateAwarded = value;
					this.SendPropertyChanged("DateAwarded");
					this.OnDateAwardedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstitutionorCountry", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string InstitutionorCountry
		{
			get
			{
				return this._InstitutionorCountry;
			}
			set
			{
				if ((this._InstitutionorCountry != value))
				{
					this.OnInstitutionorCountryChanging(value);
					this.SendPropertyChanging();
					this._InstitutionorCountry = value;
					this.SendPropertyChanged("InstitutionorCountry");
					this.OnInstitutionorCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Degree", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Degrees.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Degrees.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrentProfessional")]
	public partial class CurrentProfessional : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CurrentProfessionalId;
		
		private int _UserId;
		
		private string _ProvinceTerritory;
		
		private System.DateTime _Date;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurrentProfessionalIdChanging(int value);
    partial void OnCurrentProfessionalIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnProvinceTerritoryChanging(string value);
    partial void OnProvinceTerritoryChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public CurrentProfessional()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentProfessionalId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CurrentProfessionalId
		{
			get
			{
				return this._CurrentProfessionalId;
			}
			set
			{
				if ((this._CurrentProfessionalId != value))
				{
					this.OnCurrentProfessionalIdChanging(value);
					this.SendPropertyChanging();
					this._CurrentProfessionalId = value;
					this.SendPropertyChanged("CurrentProfessionalId");
					this.OnCurrentProfessionalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProvinceTerritory", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ProvinceTerritory
		{
			get
			{
				return this._ProvinceTerritory;
			}
			set
			{
				if ((this._ProvinceTerritory != value))
				{
					this.OnProvinceTerritoryChanging(value);
					this.SendPropertyChanging();
					this._ProvinceTerritory = value;
					this.SendPropertyChanged("ProvinceTerritory");
					this.OnProvinceTerritoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CurrentProfessional", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CurrentProfessionals.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CurrentProfessionals.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrentMemberships")]
	public partial class CurrentMembership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CurrentMembershipsId;
		
		private int _UserId;
		
		private string _CurrentMembershipDesc;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurrentMembershipsIdChanging(int value);
    partial void OnCurrentMembershipsIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnCurrentMembershipDescChanging(string value);
    partial void OnCurrentMembershipDescChanged();
    #endregion
		
		public CurrentMembership()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentMembershipsId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CurrentMembershipsId
		{
			get
			{
				return this._CurrentMembershipsId;
			}
			set
			{
				if ((this._CurrentMembershipsId != value))
				{
					this.OnCurrentMembershipsIdChanging(value);
					this.SendPropertyChanging();
					this._CurrentMembershipsId = value;
					this.SendPropertyChanged("CurrentMembershipsId");
					this.OnCurrentMembershipsIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentMembershipDesc", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string CurrentMembershipDesc
		{
			get
			{
				return this._CurrentMembershipDesc;
			}
			set
			{
				if ((this._CurrentMembershipDesc != value))
				{
					this.OnCurrentMembershipDescChanging(value);
					this.SendPropertyChanging();
					this._CurrentMembershipDesc = value;
					this.SendPropertyChanged("CurrentMembershipDesc");
					this.OnCurrentMembershipDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CurrentMembership", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CurrentMemberships.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CurrentMemberships.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoursesTaught")]
	public partial class CoursesTaught : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CoursesTaughtId;
		
		private int _UserId;
		
		private string _Year;
		
		private string _CourseNumber;
		
		private string _CourseTitle;
		
		private string _Undergraduategraduate;
		
		private string _CourseSection;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCoursesTaughtIdChanging(int value);
    partial void OnCoursesTaughtIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnCourseNumberChanging(string value);
    partial void OnCourseNumberChanged();
    partial void OnCourseTitleChanging(string value);
    partial void OnCourseTitleChanged();
    partial void OnUndergraduategraduateChanging(string value);
    partial void OnUndergraduategraduateChanged();
    partial void OnCourseSectionChanging(string value);
    partial void OnCourseSectionChanged();
    #endregion
		
		public CoursesTaught()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoursesTaughtId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CoursesTaughtId
		{
			get
			{
				return this._CoursesTaughtId;
			}
			set
			{
				if ((this._CoursesTaughtId != value))
				{
					this.OnCoursesTaughtIdChanging(value);
					this.SendPropertyChanging();
					this._CoursesTaughtId = value;
					this.SendPropertyChanged("CoursesTaughtId");
					this.OnCoursesTaughtIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseNumber", DbType="NVarChar(50)")]
		public string CourseNumber
		{
			get
			{
				return this._CourseNumber;
			}
			set
			{
				if ((this._CourseNumber != value))
				{
					this.OnCourseNumberChanging(value);
					this.SendPropertyChanging();
					this._CourseNumber = value;
					this.SendPropertyChanged("CourseNumber");
					this.OnCourseNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseTitle", DbType="NVarChar(200)")]
		public string CourseTitle
		{
			get
			{
				return this._CourseTitle;
			}
			set
			{
				if ((this._CourseTitle != value))
				{
					this.OnCourseTitleChanging(value);
					this.SendPropertyChanging();
					this._CourseTitle = value;
					this.SendPropertyChanged("CourseTitle");
					this.OnCourseTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Undergraduategraduate", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Undergraduategraduate
		{
			get
			{
				return this._Undergraduategraduate;
			}
			set
			{
				if ((this._Undergraduategraduate != value))
				{
					this.OnUndergraduategraduateChanging(value);
					this.SendPropertyChanging();
					this._Undergraduategraduate = value;
					this.SendPropertyChanged("Undergraduategraduate");
					this.OnUndergraduategraduateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseSection", DbType="NVarChar(200)")]
		public string CourseSection
		{
			get
			{
				return this._CourseSection;
			}
			set
			{
				if ((this._CourseSection != value))
				{
					this.OnCourseSectionChanging(value);
					this.SendPropertyChanging();
					this._CourseSection = value;
					this.SendPropertyChanged("CourseSection");
					this.OnCourseSectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_CoursesTaught", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.CoursesTaughts.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.CoursesTaughts.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseProgramRequirementMap")]
	public partial class CourseProgramRequirementMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProgramRequirementId;
		
		private int _CourseId;
		
		private EntityRef<ProgramRequirement> _ProgramRequirement;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProgramRequirementIdChanging(int value);
    partial void OnProgramRequirementIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    #endregion
		
		public CourseProgramRequirementMap()
		{
			this._ProgramRequirement = default(EntityRef<ProgramRequirement>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgramRequirementId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProgramRequirementId
		{
			get
			{
				return this._ProgramRequirementId;
			}
			set
			{
				if ((this._ProgramRequirementId != value))
				{
					if (this._ProgramRequirement.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgramRequirementIdChanging(value);
					this.SendPropertyChanging();
					this._ProgramRequirementId = value;
					this.SendPropertyChanged("ProgramRequirementId");
					this.OnProgramRequirementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProgramRequirement_CourseProgramRequirementMap", Storage="_ProgramRequirement", ThisKey="ProgramRequirementId", OtherKey="ProgramRequirementId", IsForeignKey=true)]
		public ProgramRequirement ProgramRequirement
		{
			get
			{
				return this._ProgramRequirement.Entity;
			}
			set
			{
				ProgramRequirement previousValue = this._ProgramRequirement.Entity;
				if (((previousValue != value) 
							|| (this._ProgramRequirement.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgramRequirement.Entity = null;
						previousValue.CourseProgramRequirementMaps.Remove(this);
					}
					this._ProgramRequirement.Entity = value;
					if ((value != null))
					{
						value.CourseProgramRequirementMaps.Add(this);
						this._ProgramRequirementId = value.ProgramRequirementId;
					}
					else
					{
						this._ProgramRequirementId = default(int);
					}
					this.SendPropertyChanged("ProgramRequirement");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseProgramRequirementMap", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseProgramRequirementMaps.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseProgramRequirementMaps.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CoursePrerequisiteMap")]
	public partial class CoursePrerequisiteMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrerequisiteId;
		
		private int _CourseId;
		
		private EntityRef<Prerequisite> _Prerequisite;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrerequisiteIdChanging(int value);
    partial void OnPrerequisiteIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    #endregion
		
		public CoursePrerequisiteMap()
		{
			this._Prerequisite = default(EntityRef<Prerequisite>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrerequisiteId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PrerequisiteId
		{
			get
			{
				return this._PrerequisiteId;
			}
			set
			{
				if ((this._PrerequisiteId != value))
				{
					if (this._Prerequisite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrerequisiteIdChanging(value);
					this.SendPropertyChanging();
					this._PrerequisiteId = value;
					this.SendPropertyChanged("PrerequisiteId");
					this.OnPrerequisiteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Prerequisite_CoursePrerequisiteMap", Storage="_Prerequisite", ThisKey="PrerequisiteId", OtherKey="PrerequisiteId", IsForeignKey=true)]
		public Prerequisite Prerequisite
		{
			get
			{
				return this._Prerequisite.Entity;
			}
			set
			{
				Prerequisite previousValue = this._Prerequisite.Entity;
				if (((previousValue != value) 
							|| (this._Prerequisite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Prerequisite.Entity = null;
						previousValue.CoursePrerequisiteMaps.Remove(this);
					}
					this._Prerequisite.Entity = value;
					if ((value != null))
					{
						value.CoursePrerequisiteMaps.Add(this);
						this._PrerequisiteId = value.PrerequisiteId;
					}
					else
					{
						this._PrerequisiteId = default(int);
					}
					this.SendPropertyChanged("Prerequisite");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CoursePrerequisiteMap", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CoursePrerequisiteMaps.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CoursePrerequisiteMaps.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseCategoryMap")]
	public partial class CourseCategoryMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseId;
		
		private int _CategoryId;
		
		private decimal _AUpercentage;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Category> _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnAUpercentageChanging(decimal value);
    partial void OnAUpercentageChanged();
    #endregion
		
		public CourseCategoryMap()
		{
			this._Course = default(EntityRef<Course>);
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AUpercentage", DbType="Decimal(18,2) NOT NULL")]
		public decimal AUpercentage
		{
			get
			{
				return this._AUpercentage;
			}
			set
			{
				if ((this._AUpercentage != value))
				{
					this.OnAUpercentageChanging(value);
					this.SendPropertyChanging();
					this._AUpercentage = value;
					this.SendPropertyChanged("AUpercentage");
					this.OnAUpercentageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseCategoryMap", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseCategoryMaps.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseCategoryMaps.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CourseCategoryMap", Storage="_Category", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.CourseCategoryMaps.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.CourseCategoryMaps.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseAbbreviation")]
	public partial class CourseAbbreviation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AbbreviationId;
		
		private int _DepartmentId;
		
		private string _Abbreviation;
		
		private EntitySet<Course> _Courses;
		
		private EntityRef<Department> _Department;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAbbreviationIdChanging(int value);
    partial void OnAbbreviationIdChanged();
    partial void OnDepartmentIdChanging(int value);
    partial void OnDepartmentIdChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    #endregion
		
		public CourseAbbreviation()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Department = default(EntityRef<Department>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbreviationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AbbreviationId
		{
			get
			{
				return this._AbbreviationId;
			}
			set
			{
				if ((this._AbbreviationId != value))
				{
					this.OnAbbreviationIdChanging(value);
					this.SendPropertyChanging();
					this._AbbreviationId = value;
					this.SendPropertyChanged("AbbreviationId");
					this.OnAbbreviationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int NOT NULL")]
		public int DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					if (this._Department.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbreviation", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseAbbreviation_Course", Storage="_Courses", ThisKey="AbbreviationId", OtherKey="AbbreviationId")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_CourseAbbreviation", Storage="_Department", ThisKey="DepartmentId", OtherKey="DepartmentId", IsForeignKey=true)]
		public Department Department
		{
			get
			{
				return this._Department.Entity;
			}
			set
			{
				Department previousValue = this._Department.Entity;
				if (((previousValue != value) 
							|| (this._Department.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Department.Entity = null;
						previousValue.CourseAbbreviations.Remove(this);
					}
					this._Department.Entity = value;
					if ((value != null))
					{
						value.CourseAbbreviations.Add(this);
						this._DepartmentId = value.DepartmentId;
					}
					else
					{
						this._DepartmentId = default(int);
					}
					this.SendPropertyChanged("Department");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.CourseAbbreviation = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.CourseAbbreviation = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseId;
		
		private string _Title;
		
		private string _CourseDescription;
		
		private System.Nullable<int> _DepartmentId;
		
		private int _Number;
		
		private bool _Active_;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.DateTime _UpdatedOn;
		
		private string _CalendarReference;
		
		private System.Nullable<int> _LabMinStudents;
		
		private System.Nullable<int> _LabMaxStudents;
		
		private System.Nullable<int> _SemMinStudents;
		
		private System.Nullable<int> _SemMaxStudents;
		
		private System.Nullable<int> _LecMinStudents;
		
		private System.Nullable<int> _LecMaxStudents;
		
		private string _LabExperience;
		
		private string _ComputerExperience;
		
		private System.Nullable<int> _LabCount;
		
		private System.Nullable<int> _SemCount;
		
		private string _CalendarNotes;
		
		private System.Nullable<int> _LecCount;
		
		private System.Nullable<decimal> _InstructorHrsPerWeek;
		
		private string _MajorTopics;
		
		private System.Nullable<int> _TeachingAssistantCount;
		
		private System.Nullable<decimal> _AverageGrade;
		
		private System.Nullable<decimal> _FailureRate;
		
		private System.Nullable<decimal> _TeachingAssistantHours;
		
		private System.Nullable<int> _AbbreviationId;
		
		private System.Nullable<decimal> _Credit;
		
		private string _Weight;
		
		private EntitySet<Topic> _Topics;
		
		private EntitySet<Section> _Sections;
		
		private EntitySet<ScenarioCourseprogramRequirementMap> _ScenarioCourseprogramRequirementMaps;
		
		private EntitySet<Prerequisite> _Prerequisites;
		
		private EntitySet<MaterialUpload> _MaterialUploads;
		
		private EntitySet<InstructorCourseRelation> _InstructorCourseRelations;
		
		private EntitySet<ExamArchive> _ExamArchives;
		
		private EntitySet<CourseProgramRequirementMap> _CourseProgramRequirementMaps;
		
		private EntitySet<CoursePrerequisiteMap> _CoursePrerequisiteMaps;
		
		private EntitySet<CourseCategoryMap> _CourseCategoryMaps;
		
		private EntitySet<Book> _Books;
		
		private EntityRef<CourseAbbreviation> _CourseAbbreviation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCourseDescriptionChanging(string value);
    partial void OnCourseDescriptionChanged();
    partial void OnDepartmentIdChanging(System.Nullable<int> value);
    partial void OnDepartmentIdChanged();
    partial void OnNumberChanging(int value);
    partial void OnNumberChanged();
    partial void OnActive_Changing(bool value);
    partial void OnActive_Changed();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.DateTime value);
    partial void OnUpdatedOnChanged();
    partial void OnCalendarReferenceChanging(string value);
    partial void OnCalendarReferenceChanged();
    partial void OnLabMinStudentsChanging(System.Nullable<int> value);
    partial void OnLabMinStudentsChanged();
    partial void OnLabMaxStudentsChanging(System.Nullable<int> value);
    partial void OnLabMaxStudentsChanged();
    partial void OnSemMinStudentsChanging(System.Nullable<int> value);
    partial void OnSemMinStudentsChanged();
    partial void OnSemMaxStudentsChanging(System.Nullable<int> value);
    partial void OnSemMaxStudentsChanged();
    partial void OnLecMinStudentsChanging(System.Nullable<int> value);
    partial void OnLecMinStudentsChanged();
    partial void OnLecMaxStudentsChanging(System.Nullable<int> value);
    partial void OnLecMaxStudentsChanged();
    partial void OnLabExperienceChanging(string value);
    partial void OnLabExperienceChanged();
    partial void OnComputerExperienceChanging(string value);
    partial void OnComputerExperienceChanged();
    partial void OnLabCountChanging(System.Nullable<int> value);
    partial void OnLabCountChanged();
    partial void OnSemCountChanging(System.Nullable<int> value);
    partial void OnSemCountChanged();
    partial void OnCalendarNotesChanging(string value);
    partial void OnCalendarNotesChanged();
    partial void OnLecCountChanging(System.Nullable<int> value);
    partial void OnLecCountChanged();
    partial void OnInstructorHrsPerWeekChanging(System.Nullable<decimal> value);
    partial void OnInstructorHrsPerWeekChanged();
    partial void OnMajorTopicsChanging(string value);
    partial void OnMajorTopicsChanged();
    partial void OnTeachingAssistantCountChanging(System.Nullable<int> value);
    partial void OnTeachingAssistantCountChanged();
    partial void OnAverageGradeChanging(System.Nullable<decimal> value);
    partial void OnAverageGradeChanged();
    partial void OnFailureRateChanging(System.Nullable<decimal> value);
    partial void OnFailureRateChanged();
    partial void OnTeachingAssistantHoursChanging(System.Nullable<decimal> value);
    partial void OnTeachingAssistantHoursChanged();
    partial void OnAbbreviationIdChanging(System.Nullable<int> value);
    partial void OnAbbreviationIdChanged();
    partial void OnCreditChanging(System.Nullable<decimal> value);
    partial void OnCreditChanged();
    partial void OnWeightChanging(string value);
    partial void OnWeightChanged();
    #endregion
		
		public Course()
		{
			this._Topics = new EntitySet<Topic>(new Action<Topic>(this.attach_Topics), new Action<Topic>(this.detach_Topics));
			this._Sections = new EntitySet<Section>(new Action<Section>(this.attach_Sections), new Action<Section>(this.detach_Sections));
			this._ScenarioCourseprogramRequirementMaps = new EntitySet<ScenarioCourseprogramRequirementMap>(new Action<ScenarioCourseprogramRequirementMap>(this.attach_ScenarioCourseprogramRequirementMaps), new Action<ScenarioCourseprogramRequirementMap>(this.detach_ScenarioCourseprogramRequirementMaps));
			this._Prerequisites = new EntitySet<Prerequisite>(new Action<Prerequisite>(this.attach_Prerequisites), new Action<Prerequisite>(this.detach_Prerequisites));
			this._MaterialUploads = new EntitySet<MaterialUpload>(new Action<MaterialUpload>(this.attach_MaterialUploads), new Action<MaterialUpload>(this.detach_MaterialUploads));
			this._InstructorCourseRelations = new EntitySet<InstructorCourseRelation>(new Action<InstructorCourseRelation>(this.attach_InstructorCourseRelations), new Action<InstructorCourseRelation>(this.detach_InstructorCourseRelations));
			this._ExamArchives = new EntitySet<ExamArchive>(new Action<ExamArchive>(this.attach_ExamArchives), new Action<ExamArchive>(this.detach_ExamArchives));
			this._CourseProgramRequirementMaps = new EntitySet<CourseProgramRequirementMap>(new Action<CourseProgramRequirementMap>(this.attach_CourseProgramRequirementMaps), new Action<CourseProgramRequirementMap>(this.detach_CourseProgramRequirementMaps));
			this._CoursePrerequisiteMaps = new EntitySet<CoursePrerequisiteMap>(new Action<CoursePrerequisiteMap>(this.attach_CoursePrerequisiteMaps), new Action<CoursePrerequisiteMap>(this.detach_CoursePrerequisiteMaps));
			this._CourseCategoryMaps = new EntitySet<CourseCategoryMap>(new Action<CourseCategoryMap>(this.attach_CourseCategoryMaps), new Action<CourseCategoryMap>(this.detach_CourseCategoryMaps));
			this._Books = new EntitySet<Book>(new Action<Book>(this.attach_Books), new Action<Book>(this.detach_Books));
			this._CourseAbbreviation = default(EntityRef<CourseAbbreviation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseDescription", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string CourseDescription
		{
			get
			{
				return this._CourseDescription;
			}
			set
			{
				if ((this._CourseDescription != value))
				{
					this.OnCourseDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CourseDescription = value;
					this.SendPropertyChanged("CourseDescription");
					this.OnCourseDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentId", DbType="Int")]
		public System.Nullable<int> DepartmentId
		{
			get
			{
				return this._DepartmentId;
			}
			set
			{
				if ((this._DepartmentId != value))
				{
					this.OnDepartmentIdChanging(value);
					this.SendPropertyChanging();
					this._DepartmentId = value;
					this.SendPropertyChanged("DepartmentId");
					this.OnDepartmentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int NOT NULL")]
		public int Number
		{
			get
			{
				return this._Number;
			}
			set
			{
				if ((this._Number != value))
				{
					this.OnNumberChanging(value);
					this.SendPropertyChanging();
					this._Number = value;
					this.SendPropertyChanged("Number");
					this.OnNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Active ]", Storage="_Active_", DbType="Bit NOT NULL")]
		public bool Active_
		{
			get
			{
				return this._Active_;
			}
			set
			{
				if ((this._Active_ != value))
				{
					this.OnActive_Changing(value);
					this.SendPropertyChanging();
					this._Active_ = value;
					this.SendPropertyChanged("Active_");
					this.OnActive_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalendarReference", DbType="NVarChar(100)")]
		public string CalendarReference
		{
			get
			{
				return this._CalendarReference;
			}
			set
			{
				if ((this._CalendarReference != value))
				{
					this.OnCalendarReferenceChanging(value);
					this.SendPropertyChanging();
					this._CalendarReference = value;
					this.SendPropertyChanged("CalendarReference");
					this.OnCalendarReferenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabMinStudents", DbType="Int")]
		public System.Nullable<int> LabMinStudents
		{
			get
			{
				return this._LabMinStudents;
			}
			set
			{
				if ((this._LabMinStudents != value))
				{
					this.OnLabMinStudentsChanging(value);
					this.SendPropertyChanging();
					this._LabMinStudents = value;
					this.SendPropertyChanged("LabMinStudents");
					this.OnLabMinStudentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabMaxStudents", DbType="Int")]
		public System.Nullable<int> LabMaxStudents
		{
			get
			{
				return this._LabMaxStudents;
			}
			set
			{
				if ((this._LabMaxStudents != value))
				{
					this.OnLabMaxStudentsChanging(value);
					this.SendPropertyChanging();
					this._LabMaxStudents = value;
					this.SendPropertyChanged("LabMaxStudents");
					this.OnLabMaxStudentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemMinStudents", DbType="Int")]
		public System.Nullable<int> SemMinStudents
		{
			get
			{
				return this._SemMinStudents;
			}
			set
			{
				if ((this._SemMinStudents != value))
				{
					this.OnSemMinStudentsChanging(value);
					this.SendPropertyChanging();
					this._SemMinStudents = value;
					this.SendPropertyChanged("SemMinStudents");
					this.OnSemMinStudentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemMaxStudents", DbType="Int")]
		public System.Nullable<int> SemMaxStudents
		{
			get
			{
				return this._SemMaxStudents;
			}
			set
			{
				if ((this._SemMaxStudents != value))
				{
					this.OnSemMaxStudentsChanging(value);
					this.SendPropertyChanging();
					this._SemMaxStudents = value;
					this.SendPropertyChanged("SemMaxStudents");
					this.OnSemMaxStudentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LecMinStudents", DbType="Int")]
		public System.Nullable<int> LecMinStudents
		{
			get
			{
				return this._LecMinStudents;
			}
			set
			{
				if ((this._LecMinStudents != value))
				{
					this.OnLecMinStudentsChanging(value);
					this.SendPropertyChanging();
					this._LecMinStudents = value;
					this.SendPropertyChanged("LecMinStudents");
					this.OnLecMinStudentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LecMaxStudents", DbType="Int")]
		public System.Nullable<int> LecMaxStudents
		{
			get
			{
				return this._LecMaxStudents;
			}
			set
			{
				if ((this._LecMaxStudents != value))
				{
					this.OnLecMaxStudentsChanging(value);
					this.SendPropertyChanging();
					this._LecMaxStudents = value;
					this.SendPropertyChanged("LecMaxStudents");
					this.OnLecMaxStudentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabExperience", DbType="NVarChar(500)")]
		public string LabExperience
		{
			get
			{
				return this._LabExperience;
			}
			set
			{
				if ((this._LabExperience != value))
				{
					this.OnLabExperienceChanging(value);
					this.SendPropertyChanging();
					this._LabExperience = value;
					this.SendPropertyChanged("LabExperience");
					this.OnLabExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ComputerExperience", DbType="NVarChar(500)")]
		public string ComputerExperience
		{
			get
			{
				return this._ComputerExperience;
			}
			set
			{
				if ((this._ComputerExperience != value))
				{
					this.OnComputerExperienceChanging(value);
					this.SendPropertyChanging();
					this._ComputerExperience = value;
					this.SendPropertyChanged("ComputerExperience");
					this.OnComputerExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabCount", DbType="Int")]
		public System.Nullable<int> LabCount
		{
			get
			{
				return this._LabCount;
			}
			set
			{
				if ((this._LabCount != value))
				{
					this.OnLabCountChanging(value);
					this.SendPropertyChanging();
					this._LabCount = value;
					this.SendPropertyChanged("LabCount");
					this.OnLabCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemCount", DbType="Int")]
		public System.Nullable<int> SemCount
		{
			get
			{
				return this._SemCount;
			}
			set
			{
				if ((this._SemCount != value))
				{
					this.OnSemCountChanging(value);
					this.SendPropertyChanging();
					this._SemCount = value;
					this.SendPropertyChanged("SemCount");
					this.OnSemCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalendarNotes", DbType="NVarChar(500)")]
		public string CalendarNotes
		{
			get
			{
				return this._CalendarNotes;
			}
			set
			{
				if ((this._CalendarNotes != value))
				{
					this.OnCalendarNotesChanging(value);
					this.SendPropertyChanging();
					this._CalendarNotes = value;
					this.SendPropertyChanged("CalendarNotes");
					this.OnCalendarNotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LecCount", DbType="Int")]
		public System.Nullable<int> LecCount
		{
			get
			{
				return this._LecCount;
			}
			set
			{
				if ((this._LecCount != value))
				{
					this.OnLecCountChanging(value);
					this.SendPropertyChanging();
					this._LecCount = value;
					this.SendPropertyChanged("LecCount");
					this.OnLecCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructorHrsPerWeek", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> InstructorHrsPerWeek
		{
			get
			{
				return this._InstructorHrsPerWeek;
			}
			set
			{
				if ((this._InstructorHrsPerWeek != value))
				{
					this.OnInstructorHrsPerWeekChanging(value);
					this.SendPropertyChanging();
					this._InstructorHrsPerWeek = value;
					this.SendPropertyChanged("InstructorHrsPerWeek");
					this.OnInstructorHrsPerWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorTopics", DbType="NVarChar(500)")]
		public string MajorTopics
		{
			get
			{
				return this._MajorTopics;
			}
			set
			{
				if ((this._MajorTopics != value))
				{
					this.OnMajorTopicsChanging(value);
					this.SendPropertyChanging();
					this._MajorTopics = value;
					this.SendPropertyChanged("MajorTopics");
					this.OnMajorTopicsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeachingAssistantCount", DbType="Int")]
		public System.Nullable<int> TeachingAssistantCount
		{
			get
			{
				return this._TeachingAssistantCount;
			}
			set
			{
				if ((this._TeachingAssistantCount != value))
				{
					this.OnTeachingAssistantCountChanging(value);
					this.SendPropertyChanging();
					this._TeachingAssistantCount = value;
					this.SendPropertyChanged("TeachingAssistantCount");
					this.OnTeachingAssistantCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AverageGrade", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AverageGrade
		{
			get
			{
				return this._AverageGrade;
			}
			set
			{
				if ((this._AverageGrade != value))
				{
					this.OnAverageGradeChanging(value);
					this.SendPropertyChanging();
					this._AverageGrade = value;
					this.SendPropertyChanged("AverageGrade");
					this.OnAverageGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailureRate", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> FailureRate
		{
			get
			{
				return this._FailureRate;
			}
			set
			{
				if ((this._FailureRate != value))
				{
					this.OnFailureRateChanging(value);
					this.SendPropertyChanging();
					this._FailureRate = value;
					this.SendPropertyChanged("FailureRate");
					this.OnFailureRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeachingAssistantHours", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> TeachingAssistantHours
		{
			get
			{
				return this._TeachingAssistantHours;
			}
			set
			{
				if ((this._TeachingAssistantHours != value))
				{
					this.OnTeachingAssistantHoursChanging(value);
					this.SendPropertyChanging();
					this._TeachingAssistantHours = value;
					this.SendPropertyChanged("TeachingAssistantHours");
					this.OnTeachingAssistantHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbreviationId", DbType="Int")]
		public System.Nullable<int> AbbreviationId
		{
			get
			{
				return this._AbbreviationId;
			}
			set
			{
				if ((this._AbbreviationId != value))
				{
					if (this._CourseAbbreviation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAbbreviationIdChanging(value);
					this.SendPropertyChanging();
					this._AbbreviationId = value;
					this.SendPropertyChanged("AbbreviationId");
					this.OnAbbreviationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this.OnCreditChanging(value);
					this.SendPropertyChanging();
					this._Credit = value;
					this.SendPropertyChanged("Credit");
					this.OnCreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weight", DbType="NVarChar(20)")]
		public string Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Topic", Storage="_Topics", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<Topic> Topics
		{
			get
			{
				return this._Topics;
			}
			set
			{
				this._Topics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Section", Storage="_Sections", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<Section> Sections
		{
			get
			{
				return this._Sections;
			}
			set
			{
				this._Sections.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_ScenarioCourseprogramRequirementMap", Storage="_ScenarioCourseprogramRequirementMaps", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<ScenarioCourseprogramRequirementMap> ScenarioCourseprogramRequirementMaps
		{
			get
			{
				return this._ScenarioCourseprogramRequirementMaps;
			}
			set
			{
				this._ScenarioCourseprogramRequirementMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Prerequisite", Storage="_Prerequisites", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<Prerequisite> Prerequisites
		{
			get
			{
				return this._Prerequisites;
			}
			set
			{
				this._Prerequisites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_MaterialUpload", Storage="_MaterialUploads", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<MaterialUpload> MaterialUploads
		{
			get
			{
				return this._MaterialUploads;
			}
			set
			{
				this._MaterialUploads.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_InstructorCourseRelation", Storage="_InstructorCourseRelations", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<InstructorCourseRelation> InstructorCourseRelations
		{
			get
			{
				return this._InstructorCourseRelations;
			}
			set
			{
				this._InstructorCourseRelations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_ExamArchive", Storage="_ExamArchives", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<ExamArchive> ExamArchives
		{
			get
			{
				return this._ExamArchives;
			}
			set
			{
				this._ExamArchives.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseProgramRequirementMap", Storage="_CourseProgramRequirementMaps", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<CourseProgramRequirementMap> CourseProgramRequirementMaps
		{
			get
			{
				return this._CourseProgramRequirementMaps;
			}
			set
			{
				this._CourseProgramRequirementMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CoursePrerequisiteMap", Storage="_CoursePrerequisiteMaps", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<CoursePrerequisiteMap> CoursePrerequisiteMaps
		{
			get
			{
				return this._CoursePrerequisiteMaps;
			}
			set
			{
				this._CoursePrerequisiteMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseCategoryMap", Storage="_CourseCategoryMaps", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<CourseCategoryMap> CourseCategoryMaps
		{
			get
			{
				return this._CourseCategoryMaps;
			}
			set
			{
				this._CourseCategoryMaps.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Book", Storage="_Books", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<Book> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseAbbreviation_Course", Storage="_CourseAbbreviation", ThisKey="AbbreviationId", OtherKey="AbbreviationId", IsForeignKey=true)]
		public CourseAbbreviation CourseAbbreviation
		{
			get
			{
				return this._CourseAbbreviation.Entity;
			}
			set
			{
				CourseAbbreviation previousValue = this._CourseAbbreviation.Entity;
				if (((previousValue != value) 
							|| (this._CourseAbbreviation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseAbbreviation.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._CourseAbbreviation.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._AbbreviationId = value.AbbreviationId;
					}
					else
					{
						this._AbbreviationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourseAbbreviation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Topics(Topic entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Sections(Section entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_ScenarioCourseprogramRequirementMaps(ScenarioCourseprogramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_ScenarioCourseprogramRequirementMaps(ScenarioCourseprogramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Prerequisites(Prerequisite entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Prerequisites(Prerequisite entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_MaterialUploads(MaterialUpload entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_MaterialUploads(MaterialUpload entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_InstructorCourseRelations(InstructorCourseRelation entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_InstructorCourseRelations(InstructorCourseRelation entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_ExamArchives(ExamArchive entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_ExamArchives(ExamArchive entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_CourseProgramRequirementMaps(CourseProgramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseProgramRequirementMaps(CourseProgramRequirementMap entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_CoursePrerequisiteMaps(CoursePrerequisiteMap entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CoursePrerequisiteMaps(CoursePrerequisiteMap entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_CourseCategoryMaps(CourseCategoryMap entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseCategoryMaps(CourseCategoryMap entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Books(Book entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Control")]
	public partial class Control : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ControlId;
		
		private string _Name;
		
		private string _Type;
		
		private System.Nullable<int> _ParentId;
		
		private EntitySet<Access> _Accesses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnControlIdChanging(int value);
    partial void OnControlIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    #endregion
		
		public Control()
		{
			this._Accesses = new EntitySet<Access>(new Action<Access>(this.attach_Accesses), new Action<Access>(this.detach_Accesses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ControlId
		{
			get
			{
				return this._ControlId;
			}
			set
			{
				if ((this._ControlId != value))
				{
					this.OnControlIdChanging(value);
					this.SendPropertyChanging();
					this._ControlId = value;
					this.SendPropertyChanged("ControlId");
					this.OnControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Control_Access", Storage="_Accesses", ThisKey="ControlId", OtherKey="ControlId")]
		public EntitySet<Access> Accesses
		{
			get
			{
				return this._Accesses;
			}
			set
			{
				this._Accesses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accesses(Access entity)
		{
			this.SendPropertyChanging();
			entity.Control = this;
		}
		
		private void detach_Accesses(Access entity)
		{
			this.SendPropertyChanging();
			entity.Control = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _CategoryName;
		
		private string _CategoryDescription;
		
		private string _CategoryType;
		
		private string _Abbreviation;
		
		private EntitySet<CourseCategoryMap> _CourseCategoryMaps;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnCategoryDescriptionChanging(string value);
    partial void OnCategoryDescriptionChanged();
    partial void OnCategoryTypeChanging(string value);
    partial void OnCategoryTypeChanged();
    partial void OnAbbreviationChanging(string value);
    partial void OnAbbreviationChanged();
    #endregion
		
		public Category()
		{
			this._CourseCategoryMaps = new EntitySet<CourseCategoryMap>(new Action<CourseCategoryMap>(this.attach_CourseCategoryMaps), new Action<CourseCategoryMap>(this.detach_CourseCategoryMaps));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryDescription", DbType="NVarChar(500)")]
		public string CategoryDescription
		{
			get
			{
				return this._CategoryDescription;
			}
			set
			{
				if ((this._CategoryDescription != value))
				{
					this.OnCategoryDescriptionChanging(value);
					this.SendPropertyChanging();
					this._CategoryDescription = value;
					this.SendPropertyChanged("CategoryDescription");
					this.OnCategoryDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryType", DbType="NVarChar(250)")]
		public string CategoryType
		{
			get
			{
				return this._CategoryType;
			}
			set
			{
				if ((this._CategoryType != value))
				{
					this.OnCategoryTypeChanging(value);
					this.SendPropertyChanging();
					this._CategoryType = value;
					this.SendPropertyChanged("CategoryType");
					this.OnCategoryTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Abbreviation", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Abbreviation
		{
			get
			{
				return this._Abbreviation;
			}
			set
			{
				if ((this._Abbreviation != value))
				{
					this.OnAbbreviationChanging(value);
					this.SendPropertyChanging();
					this._Abbreviation = value;
					this.SendPropertyChanged("Abbreviation");
					this.OnAbbreviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_CourseCategoryMap", Storage="_CourseCategoryMaps", ThisKey="CategoryId", OtherKey="CategoryId")]
		public EntitySet<CourseCategoryMap> CourseCategoryMaps
		{
			get
			{
				return this._CourseCategoryMaps;
			}
			set
			{
				this._CourseCategoryMaps.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseCategoryMaps(CourseCategoryMap entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_CourseCategoryMaps(CourseCategoryMap entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Calender")]
	public partial class Calender : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<System.DateTime> _EventDate;
		
		private string _EventDesc;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnEventDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEventDateChanged();
    partial void OnEventDescChanging(string value);
    partial void OnEventDescChanged();
    #endregion
		
		public Calender()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDate", DbType="Date")]
		public System.Nullable<System.DateTime> EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDesc", DbType="VarChar(250)")]
		public string EventDesc
		{
			get
			{
				return this._EventDesc;
			}
			set
			{
				if ((this._EventDesc != value))
				{
					this.OnEventDescChanging(value);
					this.SendPropertyChanging();
					this._EventDesc = value;
					this.SendPropertyChanged("EventDesc");
					this.OnEventDescChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Book")]
	public partial class Book : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Author_;
		
		private string _ISBN;
		
		private string _Year;
		
		private int _CourseId;
		
		private int _BookId;
		
		private string _Title;
		
		private string _Edition;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuthor_Changing(string value);
    partial void OnAuthor_Changed();
    partial void OnISBNChanging(string value);
    partial void OnISBNChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnBookIdChanging(int value);
    partial void OnBookIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnEditionChanging(string value);
    partial void OnEditionChanged();
    #endregion
		
		public Book()
		{
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Author ]", Storage="_Author_", DbType="NVarChar(150) NOT NULL", CanBeNull=false)]
		public string Author_
		{
			get
			{
				return this._Author_;
			}
			set
			{
				if ((this._Author_ != value))
				{
					this.OnAuthor_Changing(value);
					this.SendPropertyChanging();
					this._Author_ = value;
					this.SendPropertyChanged("Author_");
					this.OnAuthor_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISBN", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string ISBN
		{
			get
			{
				return this._ISBN;
			}
			set
			{
				if ((this._ISBN != value))
				{
					this.OnISBNChanging(value);
					this.SendPropertyChanging();
					this._ISBN = value;
					this.SendPropertyChanged("ISBN");
					this.OnISBNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="NVarChar(4) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookId
		{
			get
			{
				return this._BookId;
			}
			set
			{
				if ((this._BookId != value))
				{
					this.OnBookIdChanging(value);
					this.SendPropertyChanging();
					this._BookId = value;
					this.SendPropertyChanged("BookId");
					this.OnBookIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Edition", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Edition
		{
			get
			{
				return this._Edition;
			}
			set
			{
				if ((this._Edition != value))
				{
					this.OnEditionChanging(value);
					this.SendPropertyChanging();
					this._Edition = value;
					this.SendPropertyChanged("Edition");
					this.OnEditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Book", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AuditValue")]
	public partial class AuditValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuditValueId;
		
		private int _AuditID;
		
		private string _FieldName;
		
		private string _OldValue;
		
		private string _NewValue;
		
		private EntityRef<Audit> _Audit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditValueIdChanging(int value);
    partial void OnAuditValueIdChanged();
    partial void OnAuditIDChanging(int value);
    partial void OnAuditIDChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnOldValueChanging(string value);
    partial void OnOldValueChanged();
    partial void OnNewValueChanging(string value);
    partial void OnNewValueChanged();
    #endregion
		
		public AuditValue()
		{
			this._Audit = default(EntityRef<Audit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditValueId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuditValueId
		{
			get
			{
				return this._AuditValueId;
			}
			set
			{
				if ((this._AuditValueId != value))
				{
					this.OnAuditValueIdChanging(value);
					this.SendPropertyChanging();
					this._AuditValueId = value;
					this.SendPropertyChanged("AuditValueId");
					this.OnAuditValueIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditID", DbType="Int NOT NULL")]
		public int AuditID
		{
			get
			{
				return this._AuditID;
			}
			set
			{
				if ((this._AuditID != value))
				{
					if (this._Audit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuditIDChanging(value);
					this.SendPropertyChanging();
					this._AuditID = value;
					this.SendPropertyChanged("AuditID");
					this.OnAuditIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldValue", DbType="NVarChar(2000)")]
		public string OldValue
		{
			get
			{
				return this._OldValue;
			}
			set
			{
				if ((this._OldValue != value))
				{
					this.OnOldValueChanging(value);
					this.SendPropertyChanging();
					this._OldValue = value;
					this.SendPropertyChanged("OldValue");
					this.OnOldValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewValue", DbType="NVarChar(2000)")]
		public string NewValue
		{
			get
			{
				return this._NewValue;
			}
			set
			{
				if ((this._NewValue != value))
				{
					this.OnNewValueChanging(value);
					this.SendPropertyChanging();
					this._NewValue = value;
					this.SendPropertyChanged("NewValue");
					this.OnNewValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_AuditValue", Storage="_Audit", ThisKey="AuditID", OtherKey="AuditID", IsForeignKey=true)]
		public Audit Audit
		{
			get
			{
				return this._Audit.Entity;
			}
			set
			{
				Audit previousValue = this._Audit.Entity;
				if (((previousValue != value) 
							|| (this._Audit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Audit.Entity = null;
						previousValue.AuditValues.Remove(this);
					}
					this._Audit.Entity = value;
					if ((value != null))
					{
						value.AuditValues.Add(this);
						this._AuditID = value.AuditID;
					}
					else
					{
						this._AuditID = default(int);
					}
					this.SendPropertyChanged("Audit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Audit")]
	public partial class Audit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AuditID;
		
		private string _Title;
		
		private string _Action;
		
		private string _TableName;
		
		private System.Nullable<int> _TableKey;
		
		private int _UserId;
		
		private System.Nullable<System.DateTime> _AuditDate;
		
		private System.Nullable<System.DateTime> _LastModified;
		
		private EntitySet<AuditValue> _AuditValues;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAuditIDChanging(int value);
    partial void OnAuditIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnActionChanging(string value);
    partial void OnActionChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnTableKeyChanging(System.Nullable<int> value);
    partial void OnTableKeyChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnAuditDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAuditDateChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    #endregion
		
		public Audit()
		{
			this._AuditValues = new EntitySet<AuditValue>(new Action<AuditValue>(this.attach_AuditValues), new Action<AuditValue>(this.detach_AuditValues));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AuditID
		{
			get
			{
				return this._AuditID;
			}
			set
			{
				if ((this._AuditID != value))
				{
					this.OnAuditIDChanging(value);
					this.SendPropertyChanging();
					this._AuditID = value;
					this.SendPropertyChanged("AuditID");
					this.OnAuditIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(2000) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Action", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Action
		{
			get
			{
				return this._Action;
			}
			set
			{
				if ((this._Action != value))
				{
					this.OnActionChanging(value);
					this.SendPropertyChanging();
					this._Action = value;
					this.SendPropertyChanged("Action");
					this.OnActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableKey", DbType="Int")]
		public System.Nullable<int> TableKey
		{
			get
			{
				return this._TableKey;
			}
			set
			{
				if ((this._TableKey != value))
				{
					this.OnTableKeyChanging(value);
					this.SendPropertyChanging();
					this._TableKey = value;
					this.SendPropertyChanged("TableKey");
					this.OnTableKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuditDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AuditDate
		{
			get
			{
				return this._AuditDate;
			}
			set
			{
				if ((this._AuditDate != value))
				{
					this.OnAuditDateChanging(value);
					this.SendPropertyChanging();
					this._AuditDate = value;
					this.SendPropertyChanged("AuditDate");
					this.OnAuditDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModified
		{
			get
			{
				return this._LastModified;
			}
			set
			{
				if ((this._LastModified != value))
				{
					this.OnLastModifiedChanging(value);
					this.SendPropertyChanging();
					this._LastModified = value;
					this.SendPropertyChanged("LastModified");
					this.OnLastModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Audit_AuditValue", Storage="_AuditValues", ThisKey="AuditID", OtherKey="AuditID")]
		public EntitySet<AuditValue> AuditValues
		{
			get
			{
				return this._AuditValues;
			}
			set
			{
				this._AuditValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Audit", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Audits.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Audits.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AuditValues(AuditValue entity)
		{
			this.SendPropertyChanging();
			entity.Audit = this;
		}
		
		private void detach_AuditValues(AuditValue entity)
		{
			this.SendPropertyChanging();
			entity.Audit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_WebEvent_Events")]
	public partial class aspnet_WebEvent_Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _EventId;
		
		private System.DateTime _EventTimeUtc;
		
		private System.DateTime _EventTime;
		
		private string _EventType;
		
		private decimal _EventSequence;
		
		private decimal _EventOccurrence;
		
		private int _EventCode;
		
		private int _EventDetailCode;
		
		private string _Message;
		
		private string _ApplicationPath;
		
		private string _ApplicationVirtualPath;
		
		private string _MachineName;
		
		private string _RequestUrl;
		
		private string _ExceptionType;
		
		private string _Details;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventIdChanging(string value);
    partial void OnEventIdChanged();
    partial void OnEventTimeUtcChanging(System.DateTime value);
    partial void OnEventTimeUtcChanged();
    partial void OnEventTimeChanging(System.DateTime value);
    partial void OnEventTimeChanged();
    partial void OnEventTypeChanging(string value);
    partial void OnEventTypeChanged();
    partial void OnEventSequenceChanging(decimal value);
    partial void OnEventSequenceChanged();
    partial void OnEventOccurrenceChanging(decimal value);
    partial void OnEventOccurrenceChanged();
    partial void OnEventCodeChanging(int value);
    partial void OnEventCodeChanged();
    partial void OnEventDetailCodeChanging(int value);
    partial void OnEventDetailCodeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnApplicationPathChanging(string value);
    partial void OnApplicationPathChanged();
    partial void OnApplicationVirtualPathChanging(string value);
    partial void OnApplicationVirtualPathChanged();
    partial void OnMachineNameChanging(string value);
    partial void OnMachineNameChanged();
    partial void OnRequestUrlChanging(string value);
    partial void OnRequestUrlChanged();
    partial void OnExceptionTypeChanging(string value);
    partial void OnExceptionTypeChanged();
    partial void OnDetailsChanging(string value);
    partial void OnDetailsChanged();
    #endregion
		
		public aspnet_WebEvent_Event()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventId", DbType="Char(32) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string EventId
		{
			get
			{
				return this._EventId;
			}
			set
			{
				if ((this._EventId != value))
				{
					this.OnEventIdChanging(value);
					this.SendPropertyChanging();
					this._EventId = value;
					this.SendPropertyChanged("EventId");
					this.OnEventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTimeUtc", DbType="DateTime NOT NULL")]
		public System.DateTime EventTimeUtc
		{
			get
			{
				return this._EventTimeUtc;
			}
			set
			{
				if ((this._EventTimeUtc != value))
				{
					this.OnEventTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._EventTimeUtc = value;
					this.SendPropertyChanged("EventTimeUtc");
					this.OnEventTimeUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventTime", DbType="DateTime NOT NULL")]
		public System.DateTime EventTime
		{
			get
			{
				return this._EventTime;
			}
			set
			{
				if ((this._EventTime != value))
				{
					this.OnEventTimeChanging(value);
					this.SendPropertyChanging();
					this._EventTime = value;
					this.SendPropertyChanged("EventTime");
					this.OnEventTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventSequence", DbType="Decimal(19,0) NOT NULL")]
		public decimal EventSequence
		{
			get
			{
				return this._EventSequence;
			}
			set
			{
				if ((this._EventSequence != value))
				{
					this.OnEventSequenceChanging(value);
					this.SendPropertyChanging();
					this._EventSequence = value;
					this.SendPropertyChanged("EventSequence");
					this.OnEventSequenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventOccurrence", DbType="Decimal(19,0) NOT NULL")]
		public decimal EventOccurrence
		{
			get
			{
				return this._EventOccurrence;
			}
			set
			{
				if ((this._EventOccurrence != value))
				{
					this.OnEventOccurrenceChanging(value);
					this.SendPropertyChanging();
					this._EventOccurrence = value;
					this.SendPropertyChanged("EventOccurrence");
					this.OnEventOccurrenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventCode", DbType="Int NOT NULL")]
		public int EventCode
		{
			get
			{
				return this._EventCode;
			}
			set
			{
				if ((this._EventCode != value))
				{
					this.OnEventCodeChanging(value);
					this.SendPropertyChanging();
					this._EventCode = value;
					this.SendPropertyChanged("EventCode");
					this.OnEventCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDetailCode", DbType="Int NOT NULL")]
		public int EventDetailCode
		{
			get
			{
				return this._EventDetailCode;
			}
			set
			{
				if ((this._EventDetailCode != value))
				{
					this.OnEventDetailCodeChanging(value);
					this.SendPropertyChanging();
					this._EventDetailCode = value;
					this.SendPropertyChanged("EventDetailCode");
					this.OnEventDetailCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(1024)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationPath", DbType="NVarChar(256)")]
		public string ApplicationPath
		{
			get
			{
				return this._ApplicationPath;
			}
			set
			{
				if ((this._ApplicationPath != value))
				{
					this.OnApplicationPathChanging(value);
					this.SendPropertyChanging();
					this._ApplicationPath = value;
					this.SendPropertyChanged("ApplicationPath");
					this.OnApplicationPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationVirtualPath", DbType="NVarChar(256)")]
		public string ApplicationVirtualPath
		{
			get
			{
				return this._ApplicationVirtualPath;
			}
			set
			{
				if ((this._ApplicationVirtualPath != value))
				{
					this.OnApplicationVirtualPathChanging(value);
					this.SendPropertyChanging();
					this._ApplicationVirtualPath = value;
					this.SendPropertyChanged("ApplicationVirtualPath");
					this.OnApplicationVirtualPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string MachineName
		{
			get
			{
				return this._MachineName;
			}
			set
			{
				if ((this._MachineName != value))
				{
					this.OnMachineNameChanging(value);
					this.SendPropertyChanging();
					this._MachineName = value;
					this.SendPropertyChanged("MachineName");
					this.OnMachineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestUrl", DbType="NVarChar(1024)")]
		public string RequestUrl
		{
			get
			{
				return this._RequestUrl;
			}
			set
			{
				if ((this._RequestUrl != value))
				{
					this.OnRequestUrlChanging(value);
					this.SendPropertyChanging();
					this._RequestUrl = value;
					this.SendPropertyChanged("RequestUrl");
					this.OnRequestUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExceptionType", DbType="NVarChar(256)")]
		public string ExceptionType
		{
			get
			{
				return this._ExceptionType;
			}
			set
			{
				if ((this._ExceptionType != value))
				{
					this.OnExceptionTypeChanging(value);
					this.SendPropertyChanging();
					this._ExceptionType = value;
					this.SendPropertyChanged("ExceptionType");
					this.OnExceptionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Details", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Details
		{
			get
			{
				return this._Details;
			}
			set
			{
				if ((this._Details != value))
				{
					this.OnDetailsChanging(value);
					this.SendPropertyChanging();
					this._Details = value;
					this.SendPropertyChanged("Details");
					this.OnDetailsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_UsersInRoles")]
	public partial class aspnet_UsersInRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private System.Guid _RoleId;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<aspnet_Role> _aspnet_Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    #endregion
		
		public aspnet_UsersInRole()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._aspnet_Role = default(EntityRef<aspnet_Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._aspnet_Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_Role", ThisKey="RoleId", OtherKey="RoleId", IsForeignKey=true)]
		public aspnet_Role aspnet_Role
		{
			get
			{
				return this._aspnet_Role.Entity;
			}
			set
			{
				aspnet_Role previousValue = this._aspnet_Role.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Role.Entity = null;
						previousValue.aspnet_UsersInRoles.Remove(this);
					}
					this._aspnet_Role.Entity = value;
					if ((value != null))
					{
						value.aspnet_UsersInRoles.Add(this);
						this._RoleId = value.RoleId;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntityRef<aspnet_Profile> _aspnet_Profile;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers;
		
		private EntityRef<aspnet_Membership> _aspnet_Membership;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._aspnet_Profile = default(EntityRef<aspnet_Profile>);
			this._aspnet_PersonalizationPerUsers = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers));
			this._aspnet_Membership = default(EntityRef<aspnet_Membership>);
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Profile", Storage="_aspnet_Profile", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Profile aspnet_Profile
		{
			get
			{
				return this._aspnet_Profile.Entity;
			}
			set
			{
				aspnet_Profile previousValue = this._aspnet_Profile.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Profile.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Profile.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Profile");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_PersonalizationPerUser", Storage="_aspnet_PersonalizationPerUsers", ThisKey="UserId", OtherKey="UserId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_Membership", ThisKey="UserId", OtherKey="UserId", IsUnique=true, IsForeignKey=false)]
		public aspnet_Membership aspnet_Membership
		{
			get
			{
				return this._aspnet_Membership.Entity;
			}
			set
			{
				aspnet_Membership previousValue = this._aspnet_Membership.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Membership.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Membership.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._aspnet_Membership.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("aspnet_Membership");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Users.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Users.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
		
		private void attach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_SchemaVersions")]
	public partial class aspnet_SchemaVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Feature;
		
		private string _CompatibleSchemaVersion;
		
		private bool _IsCurrentVersion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFeatureChanging(string value);
    partial void OnFeatureChanged();
    partial void OnCompatibleSchemaVersionChanging(string value);
    partial void OnCompatibleSchemaVersionChanged();
    partial void OnIsCurrentVersionChanging(bool value);
    partial void OnIsCurrentVersionChanged();
    #endregion
		
		public aspnet_SchemaVersion()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feature", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Feature
		{
			get
			{
				return this._Feature;
			}
			set
			{
				if ((this._Feature != value))
				{
					this.OnFeatureChanging(value);
					this.SendPropertyChanging();
					this._Feature = value;
					this.SendPropertyChanged("Feature");
					this.OnFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompatibleSchemaVersion", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CompatibleSchemaVersion
		{
			get
			{
				return this._CompatibleSchemaVersion;
			}
			set
			{
				if ((this._CompatibleSchemaVersion != value))
				{
					this.OnCompatibleSchemaVersionChanging(value);
					this.SendPropertyChanging();
					this._CompatibleSchemaVersion = value;
					this.SendPropertyChanged("CompatibleSchemaVersion");
					this.OnCompatibleSchemaVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrentVersion", DbType="Bit NOT NULL")]
		public bool IsCurrentVersion
		{
			get
			{
				return this._IsCurrentVersion;
			}
			set
			{
				if ((this._IsCurrentVersion != value))
				{
					this.OnIsCurrentVersionChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentVersion = value;
					this.SendPropertyChanged("IsCurrentVersion");
					this.OnIsCurrentVersionChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Roles")]
	public partial class aspnet_Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _RoleId;
		
		private string _RoleName;
		
		private string _LoweredRoleName;
		
		private string _Description;
		
		private EntitySet<aspnet_UsersInRole> _aspnet_UsersInRoles;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnLoweredRoleNameChanging(string value);
    partial void OnLoweredRoleNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Role()
		{
			this._aspnet_UsersInRoles = new EntitySet<aspnet_UsersInRole>(new Action<aspnet_UsersInRole>(this.attach_aspnet_UsersInRoles), new Action<aspnet_UsersInRole>(this.detach_aspnet_UsersInRoles));
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredRoleName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredRoleName
		{
			get
			{
				return this._LoweredRoleName;
			}
			set
			{
				if ((this._LoweredRoleName != value))
				{
					this.OnLoweredRoleNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredRoleName = value;
					this.SendPropertyChanged("LoweredRoleName");
					this.OnLoweredRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Role_aspnet_UsersInRole", Storage="_aspnet_UsersInRoles", ThisKey="RoleId", OtherKey="RoleId")]
		public EntitySet<aspnet_UsersInRole> aspnet_UsersInRoles
		{
			get
			{
				return this._aspnet_UsersInRoles;
			}
			set
			{
				this._aspnet_UsersInRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Roles.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Roles.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = this;
		}
		
		private void detach_aspnet_UsersInRoles(aspnet_UsersInRole entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Role = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Profile")]
	public partial class aspnet_Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserId;
		
		private string _PropertyNames;
		
		private string _PropertyValuesString;
		
		private System.Data.Linq.Binary _PropertyValuesBinary;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPropertyNamesChanging(string value);
    partial void OnPropertyNamesChanged();
    partial void OnPropertyValuesStringChanging(string value);
    partial void OnPropertyValuesStringChanged();
    partial void OnPropertyValuesBinaryChanging(System.Data.Linq.Binary value);
    partial void OnPropertyValuesBinaryChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_Profile()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyNames", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertyNames
		{
			get
			{
				return this._PropertyNames;
			}
			set
			{
				if ((this._PropertyNames != value))
				{
					this.OnPropertyNamesChanging(value);
					this.SendPropertyChanging();
					this._PropertyNames = value;
					this.SendPropertyChanged("PropertyNames");
					this.OnPropertyNamesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyValuesString", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PropertyValuesString
		{
			get
			{
				return this._PropertyValuesString;
			}
			set
			{
				if ((this._PropertyValuesString != value))
				{
					this.OnPropertyValuesStringChanging(value);
					this.SendPropertyChanging();
					this._PropertyValuesString = value;
					this.SendPropertyChanged("PropertyValuesString");
					this.OnPropertyValuesStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PropertyValuesBinary", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PropertyValuesBinary
		{
			get
			{
				return this._PropertyValuesBinary;
			}
			set
			{
				if ((this._PropertyValuesBinary != value))
				{
					this.OnPropertyValuesBinaryChanging(value);
					this.SendPropertyChanging();
					this._PropertyValuesBinary = value;
					this.SendPropertyChanged("PropertyValuesBinary");
					this.OnPropertyValuesBinaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Profile", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Profile = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Profile = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_PersonalizationPerUser")]
	public partial class aspnet_PersonalizationPerUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _PathId;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Data.Linq.Binary _PageSettings;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<aspnet_Path> _aspnet_Path;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnPathIdChanging(System.Nullable<System.Guid> value);
    partial void OnPathIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnPageSettingsChanging(System.Data.Linq.Binary value);
    partial void OnPageSettingsChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_PersonalizationPerUser()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._aspnet_Path = default(EntityRef<aspnet_Path>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					if (this._aspnet_Path.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageSettings", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PageSettings
		{
			get
			{
				return this._PageSettings;
			}
			set
			{
				if ((this._PageSettings != value))
				{
					this.OnPageSettingsChanging(value);
					this.SendPropertyChanging();
					this._PageSettings = value;
					this.SendPropertyChanged("PageSettings");
					this.OnPageSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_PersonalizationPerUser", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers.Remove(this);
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationPerUser", Storage="_aspnet_Path", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path
		{
			get
			{
				return this._aspnet_Path.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path.Entity = null;
						previousValue.aspnet_PersonalizationPerUsers.Remove(this);
					}
					this._aspnet_Path.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationPerUsers.Add(this);
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("aspnet_Path");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_PersonalizationAllUsers")]
	public partial class aspnet_PersonalizationAllUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _PathId;
		
		private System.Data.Linq.Binary _PageSettings;
		
		private System.DateTime _LastUpdatedDate;
		
		private EntityRef<aspnet_Path> _aspnet_Path;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathIdChanging(System.Guid value);
    partial void OnPathIdChanged();
    partial void OnPageSettingsChanging(System.Data.Linq.Binary value);
    partial void OnPageSettingsChanged();
    partial void OnLastUpdatedDateChanging(System.DateTime value);
    partial void OnLastUpdatedDateChanged();
    #endregion
		
		public aspnet_PersonalizationAllUser()
		{
			this._aspnet_Path = default(EntityRef<aspnet_Path>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					if (this._aspnet_Path.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PageSettings", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary PageSettings
		{
			get
			{
				return this._PageSettings;
			}
			set
			{
				if ((this._PageSettings != value))
				{
					this.OnPageSettingsChanging(value);
					this.SendPropertyChanging();
					this._PageSettings = value;
					this.SendPropertyChanged("PageSettings");
					this.OnPageSettingsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastUpdatedDate
		{
			get
			{
				return this._LastUpdatedDate;
			}
			set
			{
				if ((this._LastUpdatedDate != value))
				{
					this.OnLastUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdatedDate = value;
					this.SendPropertyChanged("LastUpdatedDate");
					this.OnLastUpdatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationAllUser", Storage="_aspnet_Path", ThisKey="PathId", OtherKey="PathId", IsForeignKey=true)]
		public aspnet_Path aspnet_Path
		{
			get
			{
				return this._aspnet_Path.Entity;
			}
			set
			{
				aspnet_Path previousValue = this._aspnet_Path.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Path.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Path.Entity = null;
						previousValue.aspnet_PersonalizationAllUser = null;
					}
					this._aspnet_Path.Entity = value;
					if ((value != null))
					{
						value.aspnet_PersonalizationAllUser = this;
						this._PathId = value.PathId;
					}
					else
					{
						this._PathId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Path");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Paths")]
	public partial class aspnet_Path : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _PathId;
		
		private string _Path;
		
		private string _LoweredPath;
		
		private EntitySet<aspnet_PersonalizationPerUser> _aspnet_PersonalizationPerUsers;
		
		private EntityRef<aspnet_PersonalizationAllUser> _aspnet_PersonalizationAllUser;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnPathIdChanging(System.Guid value);
    partial void OnPathIdChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnLoweredPathChanging(string value);
    partial void OnLoweredPathChanged();
    #endregion
		
		public aspnet_Path()
		{
			this._aspnet_PersonalizationPerUsers = new EntitySet<aspnet_PersonalizationPerUser>(new Action<aspnet_PersonalizationPerUser>(this.attach_aspnet_PersonalizationPerUsers), new Action<aspnet_PersonalizationPerUser>(this.detach_aspnet_PersonalizationPerUsers));
			this._aspnet_PersonalizationAllUser = default(EntityRef<aspnet_PersonalizationAllUser>);
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid PathId
		{
			get
			{
				return this._PathId;
			}
			set
			{
				if ((this._PathId != value))
				{
					this.OnPathIdChanging(value);
					this.SendPropertyChanging();
					this._PathId = value;
					this.SendPropertyChanged("PathId");
					this.OnPathIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredPath", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredPath
		{
			get
			{
				return this._LoweredPath;
			}
			set
			{
				if ((this._LoweredPath != value))
				{
					this.OnLoweredPathChanging(value);
					this.SendPropertyChanging();
					this._LoweredPath = value;
					this.SendPropertyChanged("LoweredPath");
					this.OnLoweredPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationPerUser", Storage="_aspnet_PersonalizationPerUsers", ThisKey="PathId", OtherKey="PathId")]
		public EntitySet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUsers
		{
			get
			{
				return this._aspnet_PersonalizationPerUsers;
			}
			set
			{
				this._aspnet_PersonalizationPerUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Path_aspnet_PersonalizationAllUser", Storage="_aspnet_PersonalizationAllUser", ThisKey="PathId", OtherKey="PathId", IsUnique=true, IsForeignKey=false)]
		public aspnet_PersonalizationAllUser aspnet_PersonalizationAllUser
		{
			get
			{
				return this._aspnet_PersonalizationAllUser.Entity;
			}
			set
			{
				aspnet_PersonalizationAllUser previousValue = this._aspnet_PersonalizationAllUser.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_PersonalizationAllUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_PersonalizationAllUser.Entity = null;
						previousValue.aspnet_Path = null;
					}
					this._aspnet_PersonalizationAllUser.Entity = value;
					if ((value != null))
					{
						value.aspnet_Path = this;
					}
					this.SendPropertyChanged("aspnet_PersonalizationAllUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Path", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Paths.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Paths.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path = this;
		}
		
		private void detach_aspnet_PersonalizationPerUsers(aspnet_PersonalizationPerUser entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Path = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Membership")]
	public partial class aspnet_Membership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _Password;
		
		private int _PasswordFormat;
		
		private string _PasswordSalt;
		
		private string _MobilePIN;
		
		private string _Email;
		
		private string _LoweredEmail;
		
		private string _PasswordQuestion;
		
		private string _PasswordAnswer;
		
		private bool _IsApproved;
		
		private bool _IsLockedOut;
		
		private System.DateTime _CreateDate;
		
		private System.DateTime _LastLoginDate;
		
		private System.DateTime _LastPasswordChangedDate;
		
		private System.DateTime _LastLockoutDate;
		
		private int _FailedPasswordAttemptCount;
		
		private System.DateTime _FailedPasswordAttemptWindowStart;
		
		private int _FailedPasswordAnswerAttemptCount;
		
		private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
		
		private string _Comment;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
		private EntityRef<aspnet_Application> _aspnet_Application;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPasswordFormatChanging(int value);
    partial void OnPasswordFormatChanged();
    partial void OnPasswordSaltChanging(string value);
    partial void OnPasswordSaltChanged();
    partial void OnMobilePINChanging(string value);
    partial void OnMobilePINChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoweredEmailChanging(string value);
    partial void OnLoweredEmailChanged();
    partial void OnPasswordQuestionChanging(string value);
    partial void OnPasswordQuestionChanged();
    partial void OnPasswordAnswerChanging(string value);
    partial void OnPasswordAnswerChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    partial void OnIsLockedOutChanging(bool value);
    partial void OnIsLockedOutChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastLoginDateChanging(System.DateTime value);
    partial void OnLastLoginDateChanged();
    partial void OnLastPasswordChangedDateChanging(System.DateTime value);
    partial void OnLastPasswordChangedDateChanged();
    partial void OnLastLockoutDateChanging(System.DateTime value);
    partial void OnLastLockoutDateChanged();
    partial void OnFailedPasswordAttemptCountChanging(int value);
    partial void OnFailedPasswordAttemptCountChanged();
    partial void OnFailedPasswordAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAttemptWindowStartChanged();
    partial void OnFailedPasswordAnswerAttemptCountChanging(int value);
    partial void OnFailedPasswordAnswerAttemptCountChanged();
    partial void OnFailedPasswordAnswerAttemptWindowStartChanging(System.DateTime value);
    partial void OnFailedPasswordAnswerAttemptWindowStartChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public aspnet_Membership()
		{
			this._aspnet_User = default(EntityRef<aspnet_User>);
			this._aspnet_Application = default(EntityRef<aspnet_Application>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					if (this._aspnet_Application.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordFormat", DbType="Int NOT NULL")]
		public int PasswordFormat
		{
			get
			{
				return this._PasswordFormat;
			}
			set
			{
				if ((this._PasswordFormat != value))
				{
					this.OnPasswordFormatChanging(value);
					this.SendPropertyChanging();
					this._PasswordFormat = value;
					this.SendPropertyChanged("PasswordFormat");
					this.OnPasswordFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordSalt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PasswordSalt
		{
			get
			{
				return this._PasswordSalt;
			}
			set
			{
				if ((this._PasswordSalt != value))
				{
					this.OnPasswordSaltChanging(value);
					this.SendPropertyChanging();
					this._PasswordSalt = value;
					this.SendPropertyChanged("PasswordSalt");
					this.OnPasswordSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePIN", DbType="NVarChar(16)")]
		public string MobilePIN
		{
			get
			{
				return this._MobilePIN;
			}
			set
			{
				if ((this._MobilePIN != value))
				{
					this.OnMobilePINChanging(value);
					this.SendPropertyChanging();
					this._MobilePIN = value;
					this.SendPropertyChanged("MobilePIN");
					this.OnMobilePINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredEmail", DbType="NVarChar(256)")]
		public string LoweredEmail
		{
			get
			{
				return this._LoweredEmail;
			}
			set
			{
				if ((this._LoweredEmail != value))
				{
					this.OnLoweredEmailChanging(value);
					this.SendPropertyChanging();
					this._LoweredEmail = value;
					this.SendPropertyChanged("LoweredEmail");
					this.OnLoweredEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordQuestion", DbType="NVarChar(256)")]
		public string PasswordQuestion
		{
			get
			{
				return this._PasswordQuestion;
			}
			set
			{
				if ((this._PasswordQuestion != value))
				{
					this.OnPasswordQuestionChanging(value);
					this.SendPropertyChanging();
					this._PasswordQuestion = value;
					this.SendPropertyChanged("PasswordQuestion");
					this.OnPasswordQuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordAnswer", DbType="NVarChar(128)")]
		public string PasswordAnswer
		{
			get
			{
				return this._PasswordAnswer;
			}
			set
			{
				if ((this._PasswordAnswer != value))
				{
					this.OnPasswordAnswerChanging(value);
					this.SendPropertyChanging();
					this._PasswordAnswer = value;
					this.SendPropertyChanged("PasswordAnswer");
					this.OnPasswordAnswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsLockedOut", DbType="Bit NOT NULL")]
		public bool IsLockedOut
		{
			get
			{
				return this._IsLockedOut;
			}
			set
			{
				if ((this._IsLockedOut != value))
				{
					this.OnIsLockedOutChanging(value);
					this.SendPropertyChanging();
					this._IsLockedOut = value;
					this.SendPropertyChanged("IsLockedOut");
					this.OnIsLockedOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLoginDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLoginDate
		{
			get
			{
				return this._LastLoginDate;
			}
			set
			{
				if ((this._LastLoginDate != value))
				{
					this.OnLastLoginDateChanging(value);
					this.SendPropertyChanging();
					this._LastLoginDate = value;
					this.SendPropertyChanged("LastLoginDate");
					this.OnLastLoginDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPasswordChangedDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastPasswordChangedDate
		{
			get
			{
				return this._LastPasswordChangedDate;
			}
			set
			{
				if ((this._LastPasswordChangedDate != value))
				{
					this.OnLastPasswordChangedDateChanging(value);
					this.SendPropertyChanging();
					this._LastPasswordChangedDate = value;
					this.SendPropertyChanged("LastPasswordChangedDate");
					this.OnLastPasswordChangedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLockoutDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastLockoutDate
		{
			get
			{
				return this._LastLockoutDate;
			}
			set
			{
				if ((this._LastLockoutDate != value))
				{
					this.OnLastLockoutDateChanging(value);
					this.SendPropertyChanging();
					this._LastLockoutDate = value;
					this.SendPropertyChanged("LastLockoutDate");
					this.OnLastLockoutDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAttemptCount
		{
			get
			{
				return this._FailedPasswordAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAttemptCount != value))
				{
					this.OnFailedPasswordAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAttemptCount");
					this.OnFailedPasswordAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAttemptWindowStart != value))
				{
					this.OnFailedPasswordAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
					this.OnFailedPasswordAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptCount", DbType="Int NOT NULL")]
		public int FailedPasswordAnswerAttemptCount
		{
			get
			{
				return this._FailedPasswordAnswerAttemptCount;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptCount != value))
				{
					this.OnFailedPasswordAnswerAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptCount = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
					this.OnFailedPasswordAnswerAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FailedPasswordAnswerAttemptWindowStart", DbType="DateTime NOT NULL")]
		public System.DateTime FailedPasswordAnswerAttemptWindowStart
		{
			get
			{
				return this._FailedPasswordAnswerAttemptWindowStart;
			}
			set
			{
				if ((this._FailedPasswordAnswerAttemptWindowStart != value))
				{
					this.OnFailedPasswordAnswerAttemptWindowStartChanging(value);
					this.SendPropertyChanging();
					this._FailedPasswordAnswerAttemptWindowStart = value;
					this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
					this.OnFailedPasswordAnswerAttemptWindowStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_User_aspnet_Membership", Storage="_aspnet_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.aspnet_Membership = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.aspnet_Membership = this;
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Application", ThisKey="ApplicationId", OtherKey="ApplicationId", IsForeignKey=true)]
		public aspnet_Application aspnet_Application
		{
			get
			{
				return this._aspnet_Application.Entity;
			}
			set
			{
				aspnet_Application previousValue = this._aspnet_Application.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_Application.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_Application.Entity = null;
						previousValue.aspnet_Memberships.Remove(this);
					}
					this._aspnet_Application.Entity = value;
					if ((value != null))
					{
						value.aspnet_Memberships.Add(this);
						this._ApplicationId = value.ApplicationId;
					}
					else
					{
						this._ApplicationId = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_Application");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.aspnet_Applications")]
	public partial class aspnet_Application : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ApplicationName;
		
		private string _LoweredApplicationName;
		
		private System.Guid _ApplicationId;
		
		private string _Description;
		
		private EntitySet<aspnet_User> _aspnet_Users;
		
		private EntitySet<aspnet_Role> _aspnet_Roles;
		
		private EntitySet<aspnet_Path> _aspnet_Paths;
		
		private EntitySet<aspnet_Membership> _aspnet_Memberships;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationNameChanging(string value);
    partial void OnApplicationNameChanged();
    partial void OnLoweredApplicationNameChanging(string value);
    partial void OnLoweredApplicationNameChanged();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public aspnet_Application()
		{
			this._aspnet_Users = new EntitySet<aspnet_User>(new Action<aspnet_User>(this.attach_aspnet_Users), new Action<aspnet_User>(this.detach_aspnet_Users));
			this._aspnet_Roles = new EntitySet<aspnet_Role>(new Action<aspnet_Role>(this.attach_aspnet_Roles), new Action<aspnet_Role>(this.detach_aspnet_Roles));
			this._aspnet_Paths = new EntitySet<aspnet_Path>(new Action<aspnet_Path>(this.attach_aspnet_Paths), new Action<aspnet_Path>(this.detach_aspnet_Paths));
			this._aspnet_Memberships = new EntitySet<aspnet_Membership>(new Action<aspnet_Membership>(this.attach_aspnet_Memberships), new Action<aspnet_Membership>(this.detach_aspnet_Memberships));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string ApplicationName
		{
			get
			{
				return this._ApplicationName;
			}
			set
			{
				if ((this._ApplicationName != value))
				{
					this.OnApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._ApplicationName = value;
					this.SendPropertyChanged("ApplicationName");
					this.OnApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoweredApplicationName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredApplicationName
		{
			get
			{
				return this._LoweredApplicationName;
			}
			set
			{
				if ((this._LoweredApplicationName != value))
				{
					this.OnLoweredApplicationNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredApplicationName = value;
					this.SendPropertyChanged("LoweredApplicationName");
					this.OnLoweredApplicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(256)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_User", Storage="_aspnet_Users", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_User> aspnet_Users
		{
			get
			{
				return this._aspnet_Users;
			}
			set
			{
				this._aspnet_Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Role", Storage="_aspnet_Roles", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Role> aspnet_Roles
		{
			get
			{
				return this._aspnet_Roles;
			}
			set
			{
				this._aspnet_Roles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Path", Storage="_aspnet_Paths", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Path> aspnet_Paths
		{
			get
			{
				return this._aspnet_Paths;
			}
			set
			{
				this._aspnet_Paths.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="aspnet_Application_aspnet_Membership", Storage="_aspnet_Memberships", ThisKey="ApplicationId", OtherKey="ApplicationId")]
		public EntitySet<aspnet_Membership> aspnet_Memberships
		{
			get
			{
				return this._aspnet_Memberships;
			}
			set
			{
				this._aspnet_Memberships.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Users(aspnet_User entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Roles(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Roles(aspnet_Role entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Paths(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Paths(aspnet_Path entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
		
		private void attach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = this;
		}
		
		private void detach_aspnet_Memberships(aspnet_Membership entity)
		{
			this.SendPropertyChanging();
			entity.aspnet_Application = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdvancementRank")]
	public partial class AdvancementRank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AdvancementRankId;
		
		private int _RankId;
		
		private int _UserId;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntityRef<Rank> _Rank;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAdvancementRankIdChanging(int value);
    partial void OnAdvancementRankIdChanged();
    partial void OnRankIdChanging(int value);
    partial void OnRankIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public AdvancementRank()
		{
			this._Rank = default(EntityRef<Rank>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdvancementRankId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AdvancementRankId
		{
			get
			{
				return this._AdvancementRankId;
			}
			set
			{
				if ((this._AdvancementRankId != value))
				{
					this.OnAdvancementRankIdChanging(value);
					this.SendPropertyChanging();
					this._AdvancementRankId = value;
					this.SendPropertyChanged("AdvancementRankId");
					this.OnAdvancementRankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RankId", DbType="Int NOT NULL")]
		public int RankId
		{
			get
			{
				return this._RankId;
			}
			set
			{
				if ((this._RankId != value))
				{
					if (this._Rank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRankIdChanging(value);
					this.SendPropertyChanging();
					this._RankId = value;
					this.SendPropertyChanged("RankId");
					this.OnRankIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Rank_AdvancementRank", Storage="_Rank", ThisKey="RankId", OtherKey="RankId", IsForeignKey=true)]
		public Rank Rank
		{
			get
			{
				return this._Rank.Entity;
			}
			set
			{
				Rank previousValue = this._Rank.Entity;
				if (((previousValue != value) 
							|| (this._Rank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Rank.Entity = null;
						previousValue.AdvancementRanks.Remove(this);
					}
					this._Rank.Entity = value;
					if ((value != null))
					{
						value.AdvancementRanks.Add(this);
						this._RankId = value.RankId;
					}
					else
					{
						this._RankId = default(int);
					}
					this.SendPropertyChanged("Rank");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AdvancementRank", Storage="_User", ThisKey="UserId", OtherKey="UserId", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AdvancementRanks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AdvancementRanks.Add(this);
						this._UserId = value.UserId;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AddOccasion")]
	public partial class AddOccasion
	{
		
		private string _Occasion;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Title;
		
		private string _DateOfTheday;
		
		public AddOccasion()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occasion", DbType="VarChar(50)")]
		public string Occasion
		{
			get
			{
				return this._Occasion;
			}
			set
			{
				if ((this._Occasion != value))
				{
					this._Occasion = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(100)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfTheday", DbType="VarChar(10)")]
		public string DateOfTheday
		{
			get
			{
				return this._DateOfTheday;
			}
			set
			{
				if ((this._DateOfTheday != value))
				{
					this._DateOfTheday = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Access")]
	public partial class Access : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessId;
		
		private string _RoleName;
		
		private int _ControlId;
		
		private int _AccessValue;
		
		private EntityRef<Control> _Control;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessIdChanging(int value);
    partial void OnAccessIdChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnControlIdChanging(int value);
    partial void OnControlIdChanged();
    partial void OnAccessValueChanging(int value);
    partial void OnAccessValueChanged();
    #endregion
		
		public Access()
		{
			this._Control = default(EntityRef<Control>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AccessId
		{
			get
			{
				return this._AccessId;
			}
			set
			{
				if ((this._AccessId != value))
				{
					this.OnAccessIdChanging(value);
					this.SendPropertyChanging();
					this._AccessId = value;
					this.SendPropertyChanged("AccessId");
					this.OnAccessIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlId", DbType="Int NOT NULL")]
		public int ControlId
		{
			get
			{
				return this._ControlId;
			}
			set
			{
				if ((this._ControlId != value))
				{
					if (this._Control.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnControlIdChanging(value);
					this.SendPropertyChanging();
					this._ControlId = value;
					this.SendPropertyChanged("ControlId");
					this.OnControlIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessValue", DbType="Int NOT NULL")]
		public int AccessValue
		{
			get
			{
				return this._AccessValue;
			}
			set
			{
				if ((this._AccessValue != value))
				{
					this.OnAccessValueChanging(value);
					this.SendPropertyChanging();
					this._AccessValue = value;
					this.SendPropertyChanged("AccessValue");
					this.OnAccessValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Control_Access", Storage="_Control", ThisKey="ControlId", OtherKey="ControlId", IsForeignKey=true)]
		public Control Control
		{
			get
			{
				return this._Control.Entity;
			}
			set
			{
				Control previousValue = this._Control.Entity;
				if (((previousValue != value) 
							|| (this._Control.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Control.Entity = null;
						previousValue.Accesses.Remove(this);
					}
					this._Control.Entity = value;
					if ((value != null))
					{
						value.Accesses.Add(this);
						this._ControlId = value.ControlId;
					}
					else
					{
						this._ControlId = default(int);
					}
					this.SendPropertyChanged("Control");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDentalPlan")]
	public partial class tblDentalPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _CarrierId;
		
		private System.Nullable<int> _PlanCode;
		
		private System.Nullable<decimal> _IndivFamilyDeductive;
		
		private System.Nullable<int> _Preventive;
		
		private System.Nullable<int> _Basic;
		
		private System.Nullable<int> _Major;
		
		private System.Nullable<int> _EndoPerio;
		
		private System.Nullable<decimal> _AnnualMax;
		
		private System.Nullable<decimal> _Ortho;
		
		private bool _Active;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.DateTime _UpdatedOn;
		
		private EntitySet<tblDentalPlanRate> _tblDentalPlanRates;
		
		private EntityRef<tblBenefitPlan> _tblBenefitPlan;
		
		private EntityRef<tblBenefitPlan> _tblBenefitPlan1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCarrierIdChanging(System.Nullable<int> value);
    partial void OnCarrierIdChanged();
    partial void OnPlanCodeChanging(System.Nullable<int> value);
    partial void OnPlanCodeChanged();
    partial void OnIndivFamilyDeductiveChanging(System.Nullable<decimal> value);
    partial void OnIndivFamilyDeductiveChanged();
    partial void OnPreventiveChanging(System.Nullable<int> value);
    partial void OnPreventiveChanged();
    partial void OnBasicChanging(System.Nullable<int> value);
    partial void OnBasicChanged();
    partial void OnMajorChanging(System.Nullable<int> value);
    partial void OnMajorChanged();
    partial void OnEndoPerioChanging(System.Nullable<int> value);
    partial void OnEndoPerioChanged();
    partial void OnAnnualMaxChanging(System.Nullable<decimal> value);
    partial void OnAnnualMaxChanged();
    partial void OnOrthoChanging(System.Nullable<decimal> value);
    partial void OnOrthoChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.DateTime value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblDentalPlan()
		{
			this._tblDentalPlanRates = new EntitySet<tblDentalPlanRate>(new Action<tblDentalPlanRate>(this.attach_tblDentalPlanRates), new Action<tblDentalPlanRate>(this.detach_tblDentalPlanRates));
			this._tblBenefitPlan = default(EntityRef<tblBenefitPlan>);
			this._tblBenefitPlan1 = default(EntityRef<tblBenefitPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarrierId", DbType="Int")]
		public System.Nullable<int> CarrierId
		{
			get
			{
				return this._CarrierId;
			}
			set
			{
				if ((this._CarrierId != value))
				{
					if (this._tblBenefitPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarrierIdChanging(value);
					this.SendPropertyChanging();
					this._CarrierId = value;
					this.SendPropertyChanged("CarrierId");
					this.OnCarrierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanCode", DbType="Int")]
		public System.Nullable<int> PlanCode
		{
			get
			{
				return this._PlanCode;
			}
			set
			{
				if ((this._PlanCode != value))
				{
					if (this._tblBenefitPlan1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanCodeChanging(value);
					this.SendPropertyChanging();
					this._PlanCode = value;
					this.SendPropertyChanged("PlanCode");
					this.OnPlanCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndivFamilyDeductive", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> IndivFamilyDeductive
		{
			get
			{
				return this._IndivFamilyDeductive;
			}
			set
			{
				if ((this._IndivFamilyDeductive != value))
				{
					this.OnIndivFamilyDeductiveChanging(value);
					this.SendPropertyChanging();
					this._IndivFamilyDeductive = value;
					this.SendPropertyChanged("IndivFamilyDeductive");
					this.OnIndivFamilyDeductiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Preventive", DbType="Int")]
		public System.Nullable<int> Preventive
		{
			get
			{
				return this._Preventive;
			}
			set
			{
				if ((this._Preventive != value))
				{
					this.OnPreventiveChanging(value);
					this.SendPropertyChanging();
					this._Preventive = value;
					this.SendPropertyChanged("Preventive");
					this.OnPreventiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Basic", DbType="Int")]
		public System.Nullable<int> Basic
		{
			get
			{
				return this._Basic;
			}
			set
			{
				if ((this._Basic != value))
				{
					this.OnBasicChanging(value);
					this.SendPropertyChanging();
					this._Basic = value;
					this.SendPropertyChanged("Basic");
					this.OnBasicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Major", DbType="Int")]
		public System.Nullable<int> Major
		{
			get
			{
				return this._Major;
			}
			set
			{
				if ((this._Major != value))
				{
					this.OnMajorChanging(value);
					this.SendPropertyChanging();
					this._Major = value;
					this.SendPropertyChanged("Major");
					this.OnMajorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndoPerio", DbType="Int")]
		public System.Nullable<int> EndoPerio
		{
			get
			{
				return this._EndoPerio;
			}
			set
			{
				if ((this._EndoPerio != value))
				{
					this.OnEndoPerioChanging(value);
					this.SendPropertyChanging();
					this._EndoPerio = value;
					this.SendPropertyChanged("EndoPerio");
					this.OnEndoPerioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AnnualMax", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> AnnualMax
		{
			get
			{
				return this._AnnualMax;
			}
			set
			{
				if ((this._AnnualMax != value))
				{
					this.OnAnnualMaxChanging(value);
					this.SendPropertyChanging();
					this._AnnualMax = value;
					this.SendPropertyChanged("AnnualMax");
					this.OnAnnualMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ortho", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Ortho
		{
			get
			{
				return this._Ortho;
			}
			set
			{
				if ((this._Ortho != value))
				{
					this.OnOrthoChanging(value);
					this.SendPropertyChanging();
					this._Ortho = value;
					this.SendPropertyChanged("Ortho");
					this.OnOrthoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDentalPlan_tblDentalPlanRate", Storage="_tblDentalPlanRates", ThisKey="ID", OtherKey="DentalPlanId")]
		public EntitySet<tblDentalPlanRate> tblDentalPlanRates
		{
			get
			{
				return this._tblDentalPlanRates;
			}
			set
			{
				this._tblDentalPlanRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblDentalPlan", Storage="_tblBenefitPlan", ThisKey="CarrierId", OtherKey="ID", IsForeignKey=true)]
		public tblBenefitPlan tblBenefitPlan
		{
			get
			{
				return this._tblBenefitPlan.Entity;
			}
			set
			{
				tblBenefitPlan previousValue = this._tblBenefitPlan.Entity;
				if (((previousValue != value) 
							|| (this._tblBenefitPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblBenefitPlan.Entity = null;
						previousValue.tblDentalPlans.Remove(this);
					}
					this._tblBenefitPlan.Entity = value;
					if ((value != null))
					{
						value.tblDentalPlans.Add(this);
						this._CarrierId = value.ID;
					}
					else
					{
						this._CarrierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblBenefitPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblDentalPlan1", Storage="_tblBenefitPlan1", ThisKey="PlanCode", OtherKey="ID", IsForeignKey=true)]
		public tblBenefitPlan tblBenefitPlan1
		{
			get
			{
				return this._tblBenefitPlan1.Entity;
			}
			set
			{
				tblBenefitPlan previousValue = this._tblBenefitPlan1.Entity;
				if (((previousValue != value) 
							|| (this._tblBenefitPlan1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblBenefitPlan1.Entity = null;
						previousValue.tblDentalPlans1.Remove(this);
					}
					this._tblBenefitPlan1.Entity = value;
					if ((value != null))
					{
						value.tblDentalPlans1.Add(this);
						this._PlanCode = value.ID;
					}
					else
					{
						this._PlanCode = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblBenefitPlan1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblDentalPlanRates(tblDentalPlanRate entity)
		{
			this.SendPropertyChanging();
			entity.tblDentalPlan = this;
		}
		
		private void detach_tblDentalPlanRates(tblDentalPlanRate entity)
		{
			this.SendPropertyChanging();
			entity.tblDentalPlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblDentalPlanRate")]
	public partial class tblDentalPlanRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _DentalPlanId;
		
		private System.Nullable<int> _CarrierId;
		
		private System.Nullable<int> _PlanCode;
		
		private System.Nullable<decimal> _Employee;
		
		private System.Nullable<decimal> _EmployeeSpouse;
		
		private System.Nullable<decimal> _EmployeeChildren;
		
		private System.Nullable<decimal> _Family;
		
		private bool _Active;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.DateTime _UpdatedOn;
		
		private EntityRef<tblBenefitPlan> _tblBenefitPlan;
		
		private EntityRef<tblBenefitPlan> _tblBenefitPlan1;
		
		private EntityRef<tblDentalPlan> _tblDentalPlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDentalPlanIdChanging(System.Nullable<int> value);
    partial void OnDentalPlanIdChanged();
    partial void OnCarrierIdChanging(System.Nullable<int> value);
    partial void OnCarrierIdChanged();
    partial void OnPlanCodeChanging(System.Nullable<int> value);
    partial void OnPlanCodeChanged();
    partial void OnEmployeeChanging(System.Nullable<decimal> value);
    partial void OnEmployeeChanged();
    partial void OnEmployeeSpouseChanging(System.Nullable<decimal> value);
    partial void OnEmployeeSpouseChanged();
    partial void OnEmployeeChildrenChanging(System.Nullable<decimal> value);
    partial void OnEmployeeChildrenChanged();
    partial void OnFamilyChanging(System.Nullable<decimal> value);
    partial void OnFamilyChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.DateTime value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblDentalPlanRate()
		{
			this._tblBenefitPlan = default(EntityRef<tblBenefitPlan>);
			this._tblBenefitPlan1 = default(EntityRef<tblBenefitPlan>);
			this._tblDentalPlan = default(EntityRef<tblDentalPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DentalPlanId", DbType="Int")]
		public System.Nullable<int> DentalPlanId
		{
			get
			{
				return this._DentalPlanId;
			}
			set
			{
				if ((this._DentalPlanId != value))
				{
					if (this._tblDentalPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDentalPlanIdChanging(value);
					this.SendPropertyChanging();
					this._DentalPlanId = value;
					this.SendPropertyChanged("DentalPlanId");
					this.OnDentalPlanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarrierId", DbType="Int")]
		public System.Nullable<int> CarrierId
		{
			get
			{
				return this._CarrierId;
			}
			set
			{
				if ((this._CarrierId != value))
				{
					if (this._tblBenefitPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarrierIdChanging(value);
					this.SendPropertyChanging();
					this._CarrierId = value;
					this.SendPropertyChanged("CarrierId");
					this.OnCarrierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanCode", DbType="Int")]
		public System.Nullable<int> PlanCode
		{
			get
			{
				return this._PlanCode;
			}
			set
			{
				if ((this._PlanCode != value))
				{
					if (this._tblBenefitPlan1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanCodeChanging(value);
					this.SendPropertyChanging();
					this._PlanCode = value;
					this.SendPropertyChanged("PlanCode");
					this.OnPlanCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Employee
		{
			get
			{
				return this._Employee;
			}
			set
			{
				if ((this._Employee != value))
				{
					this.OnEmployeeChanging(value);
					this.SendPropertyChanging();
					this._Employee = value;
					this.SendPropertyChanged("Employee");
					this.OnEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeSpouse", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> EmployeeSpouse
		{
			get
			{
				return this._EmployeeSpouse;
			}
			set
			{
				if ((this._EmployeeSpouse != value))
				{
					this.OnEmployeeSpouseChanging(value);
					this.SendPropertyChanging();
					this._EmployeeSpouse = value;
					this.SendPropertyChanged("EmployeeSpouse");
					this.OnEmployeeSpouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeChildren", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> EmployeeChildren
		{
			get
			{
				return this._EmployeeChildren;
			}
			set
			{
				if ((this._EmployeeChildren != value))
				{
					this.OnEmployeeChildrenChanging(value);
					this.SendPropertyChanging();
					this._EmployeeChildren = value;
					this.SendPropertyChanged("EmployeeChildren");
					this.OnEmployeeChildrenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Family", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Family
		{
			get
			{
				return this._Family;
			}
			set
			{
				if ((this._Family != value))
				{
					this.OnFamilyChanging(value);
					this.SendPropertyChanging();
					this._Family = value;
					this.SendPropertyChanged("Family");
					this.OnFamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblDentalPlanRate", Storage="_tblBenefitPlan", ThisKey="CarrierId", OtherKey="ID", IsForeignKey=true)]
		public tblBenefitPlan tblBenefitPlan
		{
			get
			{
				return this._tblBenefitPlan.Entity;
			}
			set
			{
				tblBenefitPlan previousValue = this._tblBenefitPlan.Entity;
				if (((previousValue != value) 
							|| (this._tblBenefitPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblBenefitPlan.Entity = null;
						previousValue.tblDentalPlanRates.Remove(this);
					}
					this._tblBenefitPlan.Entity = value;
					if ((value != null))
					{
						value.tblDentalPlanRates.Add(this);
						this._CarrierId = value.ID;
					}
					else
					{
						this._CarrierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblBenefitPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblDentalPlanRate1", Storage="_tblBenefitPlan1", ThisKey="PlanCode", OtherKey="ID", IsForeignKey=true)]
		public tblBenefitPlan tblBenefitPlan1
		{
			get
			{
				return this._tblBenefitPlan1.Entity;
			}
			set
			{
				tblBenefitPlan previousValue = this._tblBenefitPlan1.Entity;
				if (((previousValue != value) 
							|| (this._tblBenefitPlan1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblBenefitPlan1.Entity = null;
						previousValue.tblDentalPlanRates1.Remove(this);
					}
					this._tblBenefitPlan1.Entity = value;
					if ((value != null))
					{
						value.tblDentalPlanRates1.Add(this);
						this._PlanCode = value.ID;
					}
					else
					{
						this._PlanCode = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblBenefitPlan1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblDentalPlan_tblDentalPlanRate", Storage="_tblDentalPlan", ThisKey="DentalPlanId", OtherKey="ID", IsForeignKey=true)]
		public tblDentalPlan tblDentalPlan
		{
			get
			{
				return this._tblDentalPlan.Entity;
			}
			set
			{
				tblDentalPlan previousValue = this._tblDentalPlan.Entity;
				if (((previousValue != value) 
							|| (this._tblDentalPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblDentalPlan.Entity = null;
						previousValue.tblDentalPlanRates.Remove(this);
					}
					this._tblDentalPlan.Entity = value;
					if ((value != null))
					{
						value.tblDentalPlanRates.Add(this);
						this._DentalPlanId = value.ID;
					}
					else
					{
						this._DentalPlanId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblDentalPlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblVisionPlan")]
	public partial class tblVisionPlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _CarrierId;
		
		private System.Nullable<int> _PlanCode;
		
		private System.Nullable<int> _LensSingleVision;
		
		private System.Nullable<int> _LensBifocal;
		
		private System.Nullable<int> _LensTrifocal;
		
		private System.Nullable<int> _LensLenticular;
		
		private System.Nullable<int> _ContactLenseAllowence;
		
		private System.Nullable<int> _FarmesAllowence;
		
		private System.Nullable<int> _ExamsCopay;
		
		private bool _Active;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.DateTime _UpdatedOn;
		
		private EntityRef<tblBenefitPlan> _tblBenefitPlan;
		
		private EntityRef<tblBenefitPlan> _tblBenefitPlan1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCarrierIdChanging(System.Nullable<int> value);
    partial void OnCarrierIdChanged();
    partial void OnPlanCodeChanging(System.Nullable<int> value);
    partial void OnPlanCodeChanged();
    partial void OnLensSingleVisionChanging(System.Nullable<int> value);
    partial void OnLensSingleVisionChanged();
    partial void OnLensBifocalChanging(System.Nullable<int> value);
    partial void OnLensBifocalChanged();
    partial void OnLensTrifocalChanging(System.Nullable<int> value);
    partial void OnLensTrifocalChanged();
    partial void OnLensLenticularChanging(System.Nullable<int> value);
    partial void OnLensLenticularChanged();
    partial void OnContactLenseAllowenceChanging(System.Nullable<int> value);
    partial void OnContactLenseAllowenceChanged();
    partial void OnFarmesAllowenceChanging(System.Nullable<int> value);
    partial void OnFarmesAllowenceChanged();
    partial void OnExamsCopayChanging(System.Nullable<int> value);
    partial void OnExamsCopayChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.DateTime value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblVisionPlan()
		{
			this._tblBenefitPlan = default(EntityRef<tblBenefitPlan>);
			this._tblBenefitPlan1 = default(EntityRef<tblBenefitPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarrierId", DbType="Int")]
		public System.Nullable<int> CarrierId
		{
			get
			{
				return this._CarrierId;
			}
			set
			{
				if ((this._CarrierId != value))
				{
					if (this._tblBenefitPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarrierIdChanging(value);
					this.SendPropertyChanging();
					this._CarrierId = value;
					this.SendPropertyChanged("CarrierId");
					this.OnCarrierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanCode", DbType="Int")]
		public System.Nullable<int> PlanCode
		{
			get
			{
				return this._PlanCode;
			}
			set
			{
				if ((this._PlanCode != value))
				{
					if (this._tblBenefitPlan1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanCodeChanging(value);
					this.SendPropertyChanging();
					this._PlanCode = value;
					this.SendPropertyChanged("PlanCode");
					this.OnPlanCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LensSingleVision", DbType="Int")]
		public System.Nullable<int> LensSingleVision
		{
			get
			{
				return this._LensSingleVision;
			}
			set
			{
				if ((this._LensSingleVision != value))
				{
					this.OnLensSingleVisionChanging(value);
					this.SendPropertyChanging();
					this._LensSingleVision = value;
					this.SendPropertyChanged("LensSingleVision");
					this.OnLensSingleVisionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LensBifocal", DbType="Int")]
		public System.Nullable<int> LensBifocal
		{
			get
			{
				return this._LensBifocal;
			}
			set
			{
				if ((this._LensBifocal != value))
				{
					this.OnLensBifocalChanging(value);
					this.SendPropertyChanging();
					this._LensBifocal = value;
					this.SendPropertyChanged("LensBifocal");
					this.OnLensBifocalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LensTrifocal", DbType="Int")]
		public System.Nullable<int> LensTrifocal
		{
			get
			{
				return this._LensTrifocal;
			}
			set
			{
				if ((this._LensTrifocal != value))
				{
					this.OnLensTrifocalChanging(value);
					this.SendPropertyChanging();
					this._LensTrifocal = value;
					this.SendPropertyChanged("LensTrifocal");
					this.OnLensTrifocalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LensLenticular", DbType="Int")]
		public System.Nullable<int> LensLenticular
		{
			get
			{
				return this._LensLenticular;
			}
			set
			{
				if ((this._LensLenticular != value))
				{
					this.OnLensLenticularChanging(value);
					this.SendPropertyChanging();
					this._LensLenticular = value;
					this.SendPropertyChanged("LensLenticular");
					this.OnLensLenticularChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactLenseAllowence", DbType="Int")]
		public System.Nullable<int> ContactLenseAllowence
		{
			get
			{
				return this._ContactLenseAllowence;
			}
			set
			{
				if ((this._ContactLenseAllowence != value))
				{
					this.OnContactLenseAllowenceChanging(value);
					this.SendPropertyChanging();
					this._ContactLenseAllowence = value;
					this.SendPropertyChanged("ContactLenseAllowence");
					this.OnContactLenseAllowenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FarmesAllowence", DbType="Int")]
		public System.Nullable<int> FarmesAllowence
		{
			get
			{
				return this._FarmesAllowence;
			}
			set
			{
				if ((this._FarmesAllowence != value))
				{
					this.OnFarmesAllowenceChanging(value);
					this.SendPropertyChanging();
					this._FarmesAllowence = value;
					this.SendPropertyChanged("FarmesAllowence");
					this.OnFarmesAllowenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamsCopay", DbType="Int")]
		public System.Nullable<int> ExamsCopay
		{
			get
			{
				return this._ExamsCopay;
			}
			set
			{
				if ((this._ExamsCopay != value))
				{
					this.OnExamsCopayChanging(value);
					this.SendPropertyChanging();
					this._ExamsCopay = value;
					this.SendPropertyChanged("ExamsCopay");
					this.OnExamsCopayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblVisionPlan", Storage="_tblBenefitPlan", ThisKey="CarrierId", OtherKey="ID", IsForeignKey=true)]
		public tblBenefitPlan tblBenefitPlan
		{
			get
			{
				return this._tblBenefitPlan.Entity;
			}
			set
			{
				tblBenefitPlan previousValue = this._tblBenefitPlan.Entity;
				if (((previousValue != value) 
							|| (this._tblBenefitPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblBenefitPlan.Entity = null;
						previousValue.tblVisionPlans.Remove(this);
					}
					this._tblBenefitPlan.Entity = value;
					if ((value != null))
					{
						value.tblVisionPlans.Add(this);
						this._CarrierId = value.ID;
					}
					else
					{
						this._CarrierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblBenefitPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblVisionPlan1", Storage="_tblBenefitPlan1", ThisKey="PlanCode", OtherKey="ID", IsForeignKey=true)]
		public tblBenefitPlan tblBenefitPlan1
		{
			get
			{
				return this._tblBenefitPlan1.Entity;
			}
			set
			{
				tblBenefitPlan previousValue = this._tblBenefitPlan1.Entity;
				if (((previousValue != value) 
							|| (this._tblBenefitPlan1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblBenefitPlan1.Entity = null;
						previousValue.tblVisionPlans1.Remove(this);
					}
					this._tblBenefitPlan1.Entity = value;
					if ((value != null))
					{
						value.tblVisionPlans1.Add(this);
						this._PlanCode = value.ID;
					}
					else
					{
						this._PlanCode = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblBenefitPlan1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tblVisionPlanRate")]
	public partial class tblVisionPlanRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _VisionPlanId;
		
		private System.Nullable<int> _CarrierId;
		
		private System.Nullable<int> _PlanCode;
		
		private System.Nullable<decimal> _Employee;
		
		private System.Nullable<decimal> _EmployeeSpouse;
		
		private System.Nullable<decimal> _EmployeeChildren;
		
		private System.Nullable<decimal> _Family;
		
		private bool _Active;
		
		private string _CreatedBy;
		
		private System.DateTime _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.DateTime _UpdatedOn;
		
		private EntityRef<tblBenefitPlan> _tblBenefitPlan;
		
		private EntityRef<tblBenefitPlan> _tblBenefitPlan1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVisionPlanIdChanging(System.Nullable<int> value);
    partial void OnVisionPlanIdChanged();
    partial void OnCarrierIdChanging(System.Nullable<int> value);
    partial void OnCarrierIdChanged();
    partial void OnPlanCodeChanging(System.Nullable<int> value);
    partial void OnPlanCodeChanged();
    partial void OnEmployeeChanging(System.Nullable<decimal> value);
    partial void OnEmployeeChanged();
    partial void OnEmployeeSpouseChanging(System.Nullable<decimal> value);
    partial void OnEmployeeSpouseChanged();
    partial void OnEmployeeChildrenChanging(System.Nullable<decimal> value);
    partial void OnEmployeeChildrenChanged();
    partial void OnFamilyChanging(System.Nullable<decimal> value);
    partial void OnFamilyChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.DateTime value);
    partial void OnUpdatedOnChanged();
    #endregion
		
		public tblVisionPlanRate()
		{
			this._tblBenefitPlan = default(EntityRef<tblBenefitPlan>);
			this._tblBenefitPlan1 = default(EntityRef<tblBenefitPlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisionPlanId", DbType="Int")]
		public System.Nullable<int> VisionPlanId
		{
			get
			{
				return this._VisionPlanId;
			}
			set
			{
				if ((this._VisionPlanId != value))
				{
					this.OnVisionPlanIdChanging(value);
					this.SendPropertyChanging();
					this._VisionPlanId = value;
					this.SendPropertyChanged("VisionPlanId");
					this.OnVisionPlanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarrierId", DbType="Int")]
		public System.Nullable<int> CarrierId
		{
			get
			{
				return this._CarrierId;
			}
			set
			{
				if ((this._CarrierId != value))
				{
					if (this._tblBenefitPlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCarrierIdChanging(value);
					this.SendPropertyChanging();
					this._CarrierId = value;
					this.SendPropertyChanged("CarrierId");
					this.OnCarrierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanCode", DbType="Int")]
		public System.Nullable<int> PlanCode
		{
			get
			{
				return this._PlanCode;
			}
			set
			{
				if ((this._PlanCode != value))
				{
					if (this._tblBenefitPlan1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlanCodeChanging(value);
					this.SendPropertyChanging();
					this._PlanCode = value;
					this.SendPropertyChanged("PlanCode");
					this.OnPlanCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Employee", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Employee
		{
			get
			{
				return this._Employee;
			}
			set
			{
				if ((this._Employee != value))
				{
					this.OnEmployeeChanging(value);
					this.SendPropertyChanging();
					this._Employee = value;
					this.SendPropertyChanged("Employee");
					this.OnEmployeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeSpouse", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> EmployeeSpouse
		{
			get
			{
				return this._EmployeeSpouse;
			}
			set
			{
				if ((this._EmployeeSpouse != value))
				{
					this.OnEmployeeSpouseChanging(value);
					this.SendPropertyChanging();
					this._EmployeeSpouse = value;
					this.SendPropertyChanged("EmployeeSpouse");
					this.OnEmployeeSpouseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeChildren", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> EmployeeChildren
		{
			get
			{
				return this._EmployeeChildren;
			}
			set
			{
				if ((this._EmployeeChildren != value))
				{
					this.OnEmployeeChildrenChanging(value);
					this.SendPropertyChanging();
					this._EmployeeChildren = value;
					this.SendPropertyChanged("EmployeeChildren");
					this.OnEmployeeChildrenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Family", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Family
		{
			get
			{
				return this._Family;
			}
			set
			{
				if ((this._Family != value))
				{
					this.OnFamilyChanging(value);
					this.SendPropertyChanging();
					this._Family = value;
					this.SendPropertyChanged("Family");
					this.OnFamilyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblVisionPlanRate", Storage="_tblBenefitPlan", ThisKey="CarrierId", OtherKey="ID", IsForeignKey=true)]
		public tblBenefitPlan tblBenefitPlan
		{
			get
			{
				return this._tblBenefitPlan.Entity;
			}
			set
			{
				tblBenefitPlan previousValue = this._tblBenefitPlan.Entity;
				if (((previousValue != value) 
							|| (this._tblBenefitPlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblBenefitPlan.Entity = null;
						previousValue.tblVisionPlanRates.Remove(this);
					}
					this._tblBenefitPlan.Entity = value;
					if ((value != null))
					{
						value.tblVisionPlanRates.Add(this);
						this._CarrierId = value.ID;
					}
					else
					{
						this._CarrierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblBenefitPlan");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblBenefitPlan_tblVisionPlanRate1", Storage="_tblBenefitPlan1", ThisKey="PlanCode", OtherKey="ID", IsForeignKey=true)]
		public tblBenefitPlan tblBenefitPlan1
		{
			get
			{
				return this._tblBenefitPlan1.Entity;
			}
			set
			{
				tblBenefitPlan previousValue = this._tblBenefitPlan1.Entity;
				if (((previousValue != value) 
							|| (this._tblBenefitPlan1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblBenefitPlan1.Entity = null;
						previousValue.tblVisionPlanRates1.Remove(this);
					}
					this._tblBenefitPlan1.Entity = value;
					if ((value != null))
					{
						value.tblVisionPlanRates1.Add(this);
						this._PlanCode = value.ID;
					}
					else
					{
						this._PlanCode = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblBenefitPlan1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test1")]
	public partial class test1 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ids;
		
		private System.Nullable<int> _id;
		
		private string _name;
		
		private System.Nullable<int> _basic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidsChanging(int value);
    partial void OnidsChanged();
    partial void OnidChanging(System.Nullable<int> value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnbasicChanging(System.Nullable<int> value);
    partial void OnbasicChanged();
    #endregion
		
		public test1()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ids", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ids
		{
			get
			{
				return this._ids;
			}
			set
			{
				if ((this._ids != value))
				{
					this.OnidsChanging(value);
					this.SendPropertyChanging();
					this._ids = value;
					this.SendPropertyChanged("ids");
					this.OnidsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int")]
		public System.Nullable<int> id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(200)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_basic", DbType="Int")]
		public System.Nullable<int> basic
		{
			get
			{
				return this._basic;
			}
			set
			{
				if ((this._basic != value))
				{
					this.OnbasicChanging(value);
					this.SendPropertyChanging();
					this._basic = value;
					this.SendPropertyChanged("basic");
					this.OnbasicChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TblSubpoenaFrm")]
	public partial class TblSubpoenaFrm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubpoenaFrmId;
        private int _DetectiveId;
		
		private string _CaseId;

        private string _SaveType;
		
		private int _StateId;
		
		private int _CountyId;
		
		private string _OfficialName;
		
		private string _DetativeName;
		
		private System.DateTime _Date;
		
		private string _Status;
		
		private string _PDFPath;
		
		private string _Content;
		
		private string _RepresentativeSig;
		
		private string _SupervisorSig;
		
		private System.Nullable<bool> _Active;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _CreatedOn;
		
		private string _UpdatedBy;
		
		private System.Nullable<System.DateTime> _UpdatedOn;
		
		private string _SubpoenaName;
		
		private string _Supervisor;
		
		private string _Representative;
		
		private string _Custodian;
		
		private string _RecordsPertainTo;
		
		private string _AddressIndividualBusiness;
		
		private string _CrimeUnderInvestigation;
		
		private string _FSS;
		
		private string _Suspect;
		
		private string _Offense;
		
		private string _InformationRequested;
		
		private System.Nullable<bool> _Disclaimer;
		
		private string _ProbableCause;
		
		private System.Nullable<bool> _RequestGranted;
		
		private System.Nullable<bool> _RequestDefereed;
		
		private System.Nullable<bool> _RequestDeclined;
		
		private string _ResonsDefereed;
		
		private string _ResonsDeclined;
		
		private string _SignatureRequired;
		
		private string _TypeName;
		
		private EntityRef<TblState> _TblState;
		
		private EntityRef<TblCounty> _TblCounty;
		

        
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubpoenaFrmIdChanging(int value);
    partial void OnSubpoenaFrmIdChanged();
    partial void OnCaseIdChanging(string value);
    partial void OnCaseIdChanged();
    partial void OnSaveTypeChanging(string value);
    partial void OnSaveTypeChanged();
        
    partial void OnDetectiveIdChanging(int value);
    partial void OnDetectiveIdChanged();
    partial void OnStateIdChanging(int value);
    partial void OnStateIdChanged();
    partial void OnCountyIdChanging(int value);
    partial void OnCountyIdChanged();
    partial void OnOfficialNameChanging(string value);
    partial void OnOfficialNameChanged();
    partial void OnDetativeNameChanging(string value);
    partial void OnDetativeNameChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnPDFPathChanging(string value);
    partial void OnPDFPathChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnRepresentativeSigChanging(string value);
    partial void OnRepresentativeSigChanged();
    partial void OnSupervisorSigChanging(string value);
    partial void OnSupervisorSigChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnCreatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedOnChanged();
    partial void OnUpdatedByChanging(string value);
    partial void OnUpdatedByChanged();
    partial void OnUpdatedOnChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedOnChanged();
    partial void OnSubpoenaNameChanging(string value);
    partial void OnSubpoenaNameChanged();
    partial void OnSupervisorChanging(string value);
    partial void OnSupervisorChanged();
    partial void OnRepresentativeChanging(string value);
    partial void OnRepresentativeChanged();
    partial void OnCustodianChanging(string value);
    partial void OnCustodianChanged();
    partial void OnRecordsPertainToChanging(string value);
    partial void OnRecordsPertainToChanged();
    partial void OnAddressIndividualBusinessChanging(string value);
    partial void OnAddressIndividualBusinessChanged();
    partial void OnCrimeUnderInvestigationChanging(string value);
    partial void OnCrimeUnderInvestigationChanged();
    partial void OnFSSChanging(string value);
    partial void OnFSSChanged();
    partial void OnSuspectChanging(string value);
    partial void OnSuspectChanged();
    partial void OnOffenseChanging(string value);
    partial void OnOffenseChanged();
    partial void OnInformationRequestedChanging(string value);
    partial void OnInformationRequestedChanged();
    partial void OnDisclaimerChanging(System.Nullable<bool> value);
    partial void OnDisclaimerChanged();
    partial void OnProbableCauseChanging(string value);
    partial void OnProbableCauseChanged();
    partial void OnRequestGrantedChanging(System.Nullable<bool> value);
    partial void OnRequestGrantedChanged();
    partial void OnRequestDefereedChanging(System.Nullable<bool> value);
    partial void OnRequestDefereedChanged();
    partial void OnRequestDeclinedChanging(System.Nullable<bool> value);
    partial void OnRequestDeclinedChanged();
    partial void OnResonsDefereedChanging(string value);
    partial void OnResonsDefereedChanged();
    partial void OnResonsDeclinedChanging(string value);
    partial void OnResonsDeclinedChanged();
    partial void OnSignatureRequiredChanging(string value);
    partial void OnSignatureRequiredChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public TblSubpoenaFrm()
		{
			this._TblState = default(EntityRef<TblState>);
			this._TblCounty = default(EntityRef<TblCounty>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubpoenaFrmId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubpoenaFrmId
		{
			get
			{
				return this._SubpoenaFrmId;
			}
			set
			{
				if ((this._SubpoenaFrmId != value))
				{
					this.OnSubpoenaFrmIdChanging(value);
					this.SendPropertyChanging();
					this._SubpoenaFrmId = value;
					this.SendPropertyChanged("SubpoenaFrmId");
					this.OnSubpoenaFrmIdChanged();
				}
			}
		}


        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_DetectiveId", DbType = "Int NOT NULL")]
        public int DetectiveId
        {
            get
            {
                return this._DetectiveId;
            }
            set
            {
                if ((this._DetectiveId != value))
                {
                    this.OnDetectiveIdChanging(value);
                    this.SendPropertyChanging();
                    this._DetectiveId = value;
                    this.SendPropertyChanged("DetectiveId");
                    this.OnDetectiveIdChanged();
                }
            }
        }
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CaseId", DbType="VarChar(100)")]
		public string CaseId
		{
			get
			{
				return this._CaseId;
			}
			set
			{
				if ((this._CaseId != value))
				{
					this.OnCaseIdChanging(value);
					this.SendPropertyChanging();
					this._CaseId = value;
					this.SendPropertyChanged("CaseId");
					this.OnCaseIdChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SaveType", DbType = "VarChar(100)")]
        public string SaveType
        {
            get
            {
                return this._SaveType;
            }
            set
            {
                if ((this._SaveType != value))
                {
                    this.OnSaveTypeChanging(value);
                    this.SendPropertyChanging();
                    this._SaveType = value;
                    this.SendPropertyChanged("SaveType");
                    this.OnSaveTypeChanged();
                }
            }
        }
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateId", DbType="Int NOT NULL")]
		public int StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._TblState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountyId", DbType="Int NOT NULL")]
		public int CountyId
		{
			get
			{
				return this._CountyId;
			}
			set
			{
				if ((this._CountyId != value))
				{
					if (this._TblCounty.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountyIdChanging(value);
					this.SendPropertyChanging();
					this._CountyId = value;
					this.SendPropertyChanged("CountyId");
					this.OnCountyIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OfficialName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string OfficialName
		{
			get
			{
				return this._OfficialName;
			}
			set
			{
				if ((this._OfficialName != value))
				{
					this.OnOfficialNameChanging(value);
					this.SendPropertyChanging();
					this._OfficialName = value;
					this.SendPropertyChanged("OfficialName");
					this.OnOfficialNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetativeName", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string DetativeName
		{
			get
			{
				return this._DetativeName;
			}
			set
			{
				if ((this._DetativeName != value))
				{
					this.OnDetativeNameChanging(value);
					this.SendPropertyChanging();
					this._DetativeName = value;
					this.SendPropertyChanged("DetativeName");
					this.OnDetativeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PDFPath", DbType="VarChar(MAX)")]
		public string PDFPath
		{
			get
			{
				return this._PDFPath;
			}
			set
			{
				if ((this._PDFPath != value))
				{
					this.OnPDFPathChanging(value);
					this.SendPropertyChanging();
					this._PDFPath = value;
					this.SendPropertyChanged("PDFPath");
					this.OnPDFPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="VarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RepresentativeSig", DbType="VarChar(100)")]
		public string RepresentativeSig
		{
			get
			{
				return this._RepresentativeSig;
			}
			set
			{
				if ((this._RepresentativeSig != value))
				{
					this.OnRepresentativeSigChanging(value);
					this.SendPropertyChanging();
					this._RepresentativeSig = value;
					this.SendPropertyChanged("RepresentativeSig");
					this.OnRepresentativeSigChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupervisorSig", DbType="VarChar(100)")]
		public string SupervisorSig
		{
			get
			{
				return this._SupervisorSig;
			}
			set
			{
				if ((this._SupervisorSig != value))
				{
					this.OnSupervisorSigChanging(value);
					this.SendPropertyChanging();
					this._SupervisorSig = value;
					this.SendPropertyChanged("SupervisorSig");
					this.OnSupervisorSigChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedBy", DbType="VarChar(100)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedBy", DbType="VarChar(100)")]
		public string UpdatedBy
		{
			get
			{
				return this._UpdatedBy;
			}
			set
			{
				if ((this._UpdatedBy != value))
				{
					this.OnUpdatedByChanging(value);
					this.SendPropertyChanging();
					this._UpdatedBy = value;
					this.SendPropertyChanged("UpdatedBy");
					this.OnUpdatedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdatedOn", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedOn
		{
			get
			{
				return this._UpdatedOn;
			}
			set
			{
				if ((this._UpdatedOn != value))
				{
					this.OnUpdatedOnChanging(value);
					this.SendPropertyChanging();
					this._UpdatedOn = value;
					this.SendPropertyChanged("UpdatedOn");
					this.OnUpdatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubpoenaName", DbType="VarChar(500)")]
		public string SubpoenaName
		{
			get
			{
				return this._SubpoenaName;
			}
			set
			{
				if ((this._SubpoenaName != value))
				{
					this.OnSubpoenaNameChanging(value);
					this.SendPropertyChanging();
					this._SubpoenaName = value;
					this.SendPropertyChanged("SubpoenaName");
					this.OnSubpoenaNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Supervisor", DbType="VarChar(200)")]
		public string Supervisor
		{
			get
			{
				return this._Supervisor;
			}
			set
			{
				if ((this._Supervisor != value))
				{
					this.OnSupervisorChanging(value);
					this.SendPropertyChanging();
					this._Supervisor = value;
					this.SendPropertyChanged("Supervisor");
					this.OnSupervisorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Representative", DbType="VarChar(200)")]
		public string Representative
		{
			get
			{
				return this._Representative;
			}
			set
			{
				if ((this._Representative != value))
				{
					this.OnRepresentativeChanging(value);
					this.SendPropertyChanging();
					this._Representative = value;
					this.SendPropertyChanged("Representative");
					this.OnRepresentativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Custodian", DbType="VarChar(500)")]
		public string Custodian
		{
			get
			{
				return this._Custodian;
			}
			set
			{
				if ((this._Custodian != value))
				{
					this.OnCustodianChanging(value);
					this.SendPropertyChanging();
					this._Custodian = value;
					this.SendPropertyChanged("Custodian");
					this.OnCustodianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordsPertainTo", DbType="VarChar(500)")]
		public string RecordsPertainTo
		{
			get
			{
				return this._RecordsPertainTo;
			}
			set
			{
				if ((this._RecordsPertainTo != value))
				{
					this.OnRecordsPertainToChanging(value);
					this.SendPropertyChanging();
					this._RecordsPertainTo = value;
					this.SendPropertyChanged("RecordsPertainTo");
					this.OnRecordsPertainToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressIndividualBusiness", DbType="VarChar(500)")]
		public string AddressIndividualBusiness
		{
			get
			{
				return this._AddressIndividualBusiness;
			}
			set
			{
				if ((this._AddressIndividualBusiness != value))
				{
					this.OnAddressIndividualBusinessChanging(value);
					this.SendPropertyChanging();
					this._AddressIndividualBusiness = value;
					this.SendPropertyChanged("AddressIndividualBusiness");
					this.OnAddressIndividualBusinessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CrimeUnderInvestigation", DbType="VarChar(500)")]
		public string CrimeUnderInvestigation
		{
			get
			{
				return this._CrimeUnderInvestigation;
			}
			set
			{
				if ((this._CrimeUnderInvestigation != value))
				{
					this.OnCrimeUnderInvestigationChanging(value);
					this.SendPropertyChanging();
					this._CrimeUnderInvestigation = value;
					this.SendPropertyChanged("CrimeUnderInvestigation");
					this.OnCrimeUnderInvestigationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FSS", DbType="VarChar(500)")]
		public string FSS
		{
			get
			{
				return this._FSS;
			}
			set
			{
				if ((this._FSS != value))
				{
					this.OnFSSChanging(value);
					this.SendPropertyChanging();
					this._FSS = value;
					this.SendPropertyChanged("FSS");
					this.OnFSSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suspect", DbType="VarChar(500)")]
		public string Suspect
		{
			get
			{
				return this._Suspect;
			}
			set
			{
				if ((this._Suspect != value))
				{
					this.OnSuspectChanging(value);
					this.SendPropertyChanging();
					this._Suspect = value;
					this.SendPropertyChanged("Suspect");
					this.OnSuspectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Offense", DbType="VarChar(200)")]
		public string Offense
		{
			get
			{
				return this._Offense;
			}
			set
			{
				if ((this._Offense != value))
				{
					this.OnOffenseChanging(value);
					this.SendPropertyChanging();
					this._Offense = value;
					this.SendPropertyChanged("Offense");
					this.OnOffenseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InformationRequested", DbType="VarChar(MAX)")]
		public string InformationRequested
		{
			get
			{
				return this._InformationRequested;
			}
			set
			{
				if ((this._InformationRequested != value))
				{
					this.OnInformationRequestedChanging(value);
					this.SendPropertyChanging();
					this._InformationRequested = value;
					this.SendPropertyChanged("InformationRequested");
					this.OnInformationRequestedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Disclaimer", DbType="Bit")]
		public System.Nullable<bool> Disclaimer
		{
			get
			{
				return this._Disclaimer;
			}
			set
			{
				if ((this._Disclaimer != value))
				{
					this.OnDisclaimerChanging(value);
					this.SendPropertyChanging();
					this._Disclaimer = value;
					this.SendPropertyChanged("Disclaimer");
					this.OnDisclaimerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProbableCause", DbType="VarChar(MAX)")]
		public string ProbableCause
		{
			get
			{
				return this._ProbableCause;
			}
			set
			{
				if ((this._ProbableCause != value))
				{
					this.OnProbableCauseChanging(value);
					this.SendPropertyChanging();
					this._ProbableCause = value;
					this.SendPropertyChanged("ProbableCause");
					this.OnProbableCauseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestGranted", DbType="Bit")]
		public System.Nullable<bool> RequestGranted
		{
			get
			{
				return this._RequestGranted;
			}
			set
			{
				if ((this._RequestGranted != value))
				{
					this.OnRequestGrantedChanging(value);
					this.SendPropertyChanging();
					this._RequestGranted = value;
					this.SendPropertyChanged("RequestGranted");
					this.OnRequestGrantedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDefereed", DbType="Bit")]
		public System.Nullable<bool> RequestDefereed
		{
			get
			{
				return this._RequestDefereed;
			}
			set
			{
				if ((this._RequestDefereed != value))
				{
					this.OnRequestDefereedChanging(value);
					this.SendPropertyChanging();
					this._RequestDefereed = value;
					this.SendPropertyChanged("RequestDefereed");
					this.OnRequestDefereedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequestDeclined", DbType="Bit")]
		public System.Nullable<bool> RequestDeclined
		{
			get
			{
				return this._RequestDeclined;
			}
			set
			{
				if ((this._RequestDeclined != value))
				{
					this.OnRequestDeclinedChanging(value);
					this.SendPropertyChanging();
					this._RequestDeclined = value;
					this.SendPropertyChanged("RequestDeclined");
					this.OnRequestDeclinedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResonsDefereed", DbType="VarChar(500)")]
		public string ResonsDefereed
		{
			get
			{
				return this._ResonsDefereed;
			}
			set
			{
				if ((this._ResonsDefereed != value))
				{
					this.OnResonsDefereedChanging(value);
					this.SendPropertyChanging();
					this._ResonsDefereed = value;
					this.SendPropertyChanged("ResonsDefereed");
					this.OnResonsDefereedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResonsDeclined", DbType="VarChar(500)")]
		public string ResonsDeclined
		{
			get
			{
				return this._ResonsDeclined;
			}
			set
			{
				if ((this._ResonsDeclined != value))
				{
					this.OnResonsDeclinedChanging(value);
					this.SendPropertyChanging();
					this._ResonsDeclined = value;
					this.SendPropertyChanged("ResonsDeclined");
					this.OnResonsDeclinedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SignatureRequired", DbType="VarChar(500)")]
		public string SignatureRequired
		{
			get
			{
				return this._SignatureRequired;
			}
			set
			{
				if ((this._SignatureRequired != value))
				{
					this.OnSignatureRequiredChanging(value);
					this.SendPropertyChanging();
					this._SignatureRequired = value;
					this.SendPropertyChanged("SignatureRequired");
					this.OnSignatureRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeName", DbType="VarChar(500)")]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblState_TblSubpoenaFrm", Storage="_TblState", ThisKey="StateId", OtherKey="StateId", IsForeignKey=true)]
		public TblState TblState
		{
			get
			{
				return this._TblState.Entity;
			}
			set
			{
				TblState previousValue = this._TblState.Entity;
				if (((previousValue != value) 
							|| (this._TblState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblState.Entity = null;
						previousValue.TblSubpoenaFrms.Remove(this);
					}
					this._TblState.Entity = value;
					if ((value != null))
					{
						value.TblSubpoenaFrms.Add(this);
						this._StateId = value.StateId;
					}
					else
					{
						this._StateId = default(int);
					}
					this.SendPropertyChanged("TblState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TblCounty_TblSubpoenaFrm", Storage="_TblCounty", ThisKey="CountyId", OtherKey="CountyId", IsForeignKey=true)]
		public TblCounty TblCounty
		{
			get
			{
				return this._TblCounty.Entity;
			}
			set
			{
				TblCounty previousValue = this._TblCounty.Entity;
				if (((previousValue != value) 
							|| (this._TblCounty.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCounty.Entity = null;
						previousValue.TblSubpoenaFrms.Remove(this);
					}
					this._TblCounty.Entity = value;
					if ((value != null))
					{
						value.TblSubpoenaFrms.Add(this);
						this._CountyId = value.CountyId;
					}
					else
					{
						this._CountyId = default(int);
					}
					this.SendPropertyChanged("TblCounty");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
